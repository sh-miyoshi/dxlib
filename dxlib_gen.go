// Code generated by 'go generate'; DO NOT EDIT.

package dxlib

import (
	"syscall"
	"unsafe"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

var (
	mod = syscall.NewLazyDLL("DxLib.dll")

	dx_DxLib_Init                           = mod.NewProc("dx_DxLib_Init")
	dx_DxLib_End                            = mod.NewProc("dx_DxLib_End")
	dx_ProcessMessage                       = mod.NewProc("dx_ProcessMessage")
	dx_DrawLine                             = mod.NewProc("dx_DrawLine")
	dx_DrawLineAA                           = mod.NewProc("dx_DrawLineAA")
	dx_DrawBox                              = mod.NewProc("dx_DrawBox")
	dx_DrawBoxAA                            = mod.NewProc("dx_DrawBoxAA")
	dx_DrawCircle                           = mod.NewProc("dx_DrawCircle")
	dx_DrawCircleAA                         = mod.NewProc("dx_DrawCircleAA")
	dx_DrawOval                             = mod.NewProc("dx_DrawOval")
	dx_DrawOvalAA                           = mod.NewProc("dx_DrawOvalAA")
	dx_DrawTriangle                         = mod.NewProc("dx_DrawTriangle")
	dx_DrawTriangleAA                       = mod.NewProc("dx_DrawTriangleAA")
	dx_DrawPixel                            = mod.NewProc("dx_DrawPixel")
	dx_GetPixel                             = mod.NewProc("dx_GetPixel")
	dx_LoadGraphScreen                      = mod.NewProc("dx_LoadGraphScreen")
	dx_LoadGraph                            = mod.NewProc("dx_LoadGraph")
	dx_LoadDivGraph                         = mod.NewProc("dx_LoadDivGraph")
	dx_MakeGraph                            = mod.NewProc("dx_MakeGraph")
	dx_MakeScreen                           = mod.NewProc("dx_MakeScreen")
	dx_SetCreateDrawValidGraphMultiSample   = mod.NewProc("dx_SetCreateDrawValidGraphMultiSample")
	dx_SetCreateGraphColorBitDepth          = mod.NewProc("dx_SetCreateGraphColorBitDepth")
	dx_SetDrawValidFloatTypeGraphCreateFlag = mod.NewProc("dx_SetDrawValidFloatTypeGraphCreateFlag")
	dx_SetCreateDrawValidGraphChannelNum    = mod.NewProc("dx_SetCreateDrawValidGraphChannelNum")
	dx_SetUsePremulAlphaConvertLoad         = mod.NewProc("dx_SetUsePremulAlphaConvertLoad")
	dx_DrawGraph                            = mod.NewProc("dx_DrawGraph")
	dx_DrawTurnGraph                        = mod.NewProc("dx_DrawTurnGraph")
	dx_DrawExtendGraph                      = mod.NewProc("dx_DrawExtendGraph")
	dx_DrawRotaGraph                        = mod.NewProc("dx_DrawRotaGraph")
	dx_DrawRotaGraph2                       = mod.NewProc("dx_DrawRotaGraph2")
	dx_DrawRotaGraph3                       = mod.NewProc("dx_DrawRotaGraph3")
	dx_DrawModiGraph                        = mod.NewProc("dx_DrawModiGraph")
	dx_DrawRectGraph                        = mod.NewProc("dx_DrawRectGraph")
	dx_DerivationGraph                      = mod.NewProc("dx_DerivationGraph")
	dx_GetDrawScreenGraph                   = mod.NewProc("dx_GetDrawScreenGraph")
	dx_GetGraphiteSize                      = mod.NewProc("dx_GetGraphiteSize")
	dx_InitGraph                            = mod.NewProc("dx_InitGraph")
	dx_DeleteGraph                          = mod.NewProc("dx_DeleteGraph")
	dx_SetDrawMode                          = mod.NewProc("dx_SetDrawMode")
	dx_SetDrawBlendMode                     = mod.NewProc("dx_SetDrawBlendMode")
	dx_SetDrawBright                        = mod.NewProc("dx_SetDrawBright")
	dx_SetTransColor                        = mod.NewProc("dx_SetTransColor")
	dx_LoadBlendGraph                       = mod.NewProc("dx_LoadBlendGraph")
	dx_DrawBlendGraph                       = mod.NewProc("dx_DrawBlendGraph")
	dx_DrawString                           = mod.NewProc("dx_DrawString")
	dx_GetDrawStringWidth                   = mod.NewProc("dx_GetDrawStringWidth")
	dx_SetFontSize                          = mod.NewProc("dx_SetFontSize")
	dx_SetFontThickness                     = mod.NewProc("dx_SetFontThickness")
	dx_ChangeFont                           = mod.NewProc("dx_ChangeFont")
	dx_ChangeFontType                       = mod.NewProc("dx_ChangeFontType")
	dx_CreateFontToHandle                   = mod.NewProc("dx_CreateFontToHandle")
	dx_LoadFontDataToHandle                 = mod.NewProc("dx_LoadFontDataToHandle")
	dx_DeleteFontToHandle                   = mod.NewProc("dx_DeleteFontToHandle")
	dx_SetFontCacheUsePremulAlphaFlag       = mod.NewProc("dx_SetFontCacheUsePremulAlphaFlag")
	dx_DrawStringToHandle                   = mod.NewProc("dx_DrawStringToHandle")
	dx_GetDrawStringWidthToHandle           = mod.NewProc("dx_GetDrawStringWidthToHandle")
	dx_GetFontStateToHandle                 = mod.NewProc("dx_GetFontStateToHandle")
	dx_InitFontToHandle                     = mod.NewProc("dx_InitFontToHandle")
	dx_clsDx                                = mod.NewProc("dx_clsDx")
	dx_SetGraphMode                         = mod.NewProc("dx_SetGraphMode")
	dx_SetFullScreenResolutionMode          = mod.NewProc("dx_SetFullScreenResolutionMode")
	dx_SetFullScreenScalingMode             = mod.NewProc("dx_SetFullScreenScalingMode")
	dx_GetScreenState                       = mod.NewProc("dx_GetScreenState")
	dx_SetDrawArea                          = mod.NewProc("dx_SetDrawArea")
	dx_ClearDrawScreen                      = mod.NewProc("dx_ClearDrawScreen")
	dx_SetBackgroundColor                   = mod.NewProc("dx_SetBackgroundColor")
	dx_GetColor                             = mod.NewProc("dx_GetColor")
	dx_SetDrawScreen                        = mod.NewProc("dx_SetDrawScreen")
	dx_ScreenFlip                           = mod.NewProc("dx_ScreenFlip")
	dx_SetFullSceneAntiAliasingMode         = mod.NewProc("dx_SetFullSceneAntiAliasingMode")
)

func DxLib_Init() int {
	res, _, err := dx_DxLib_Init.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DxLib_End() int {
	res, _, err := dx_DxLib_End.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ProcessMessage() int {
	res, _, err := dx_ProcessMessage.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawLine(x1 int, y1 int, x2 int, y2 int, color uint) int {
	res, _, err := dx_DrawLine.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawLineAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint) int {
	res, _, err := dx_DrawLineAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint(color))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawBox(x1 int, y1 int, x2 int, y2 int, color uint, fillFlag int) int {
	res, _, err := dx_DrawBox.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawBoxAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint, fillFlag int) int {
	res, _, err := dx_DrawBoxAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawCircle(x int, y int, r int, color uint, fillFlag int) int {
	res, _, err := dx_DrawCircle.Call(pint(x), pint(y), pint(r), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawCircleAA(x float32, y float32, r float32, posnum int, color uint, fillFlag int) int {
	res, _, err := dx_DrawCircleAA.Call(pfloat32(x), pfloat32(y), pfloat32(r), pint(posnum), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawOval(x int, y int, rx int, ry int, color uint, fillFlag int) int {
	res, _, err := dx_DrawOval.Call(pint(x), pint(y), pint(rx), pint(ry), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawOvalAA(x float32, y float32, rx float32, ry float32, posnum int, color uint, fillFlag int) int {
	res, _, err := dx_DrawOvalAA.Call(pfloat32(x), pfloat32(y), pfloat32(rx), pfloat32(ry), pint(posnum), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawTriangle(x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, color uint, fillFlag int) int {
	res, _, err := dx_DrawTriangle.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(x3), pint(y3), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawTriangleAA(x1 float32, y1 float32, x2 float32, y2 float32, x3 float32, y3 float32, color uint, fillFlag int) int {
	res, _, err := dx_DrawTriangleAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), pfloat32(x3), pfloat32(y3), puint(color), pint(fillFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawPixel(x int, y int, color uint) int {
	res, _, err := dx_DrawPixel.Call(pint(x), pint(y), puint(color))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetPixel(x int, y int) uint {
	res, _, err := dx_GetPixel.Call(pint(x), pint(y))
	if err != nil {
		panic(err)
	}
	return uint(res)
}

func LoadGraphScreen(x int, y int, graphName string, transFlag int) int {
	res, _, err := dx_LoadGraphScreen.Call(pint(x), pint(y), pstring(graphName), pint(transFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func LoadGraph(fileName string) int {
	res, _, err := dx_LoadGraph.Call(pstring(fileName))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func LoadDivGraph(fileName string, allnum int, xnum int, ynum int, xsize int, ysize int, handleBuf *int) int {
	res, _, err := dx_LoadDivGraph.Call(pstring(fileName), pint(allnum), pint(xnum), pint(ynum), pint(xsize), pint(ysize), ppint(handleBuf))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func MakeGraph(sizeX int, sizeY int) int {
	res, _, err := dx_MakeGraph.Call(pint(sizeX), pint(sizeY))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func MakeScreen(sizeX int, sizeY int, useAlphaChannel int) int {
	res, _, err := dx_MakeScreen.Call(pint(sizeX), pint(sizeY), pint(useAlphaChannel))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetCreateDrawValidGraphMultiSample(samples int, quality int) int {
	res, _, err := dx_SetCreateDrawValidGraphMultiSample.Call(pint(samples), pint(quality))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetCreateGraphColorBitDepth(bitDepth int) int {
	res, _, err := dx_SetCreateGraphColorBitDepth.Call(pint(bitDepth))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetDrawValidFloatTypeGraphCreateFlag(flag int) int {
	res, _, err := dx_SetDrawValidFloatTypeGraphCreateFlag.Call(pint(flag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetCreateDrawValidGraphChannelNum(channelNum int) int {
	res, _, err := dx_SetCreateDrawValidGraphChannelNum.Call(pint(channelNum))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetUsePremulAlphaConvertLoad(useFlag int) int {
	res, _, err := dx_SetUsePremulAlphaConvertLoad.Call(pint(useFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawGraph(x int, y int, grHandle int, transFlag int) int {
	res, _, err := dx_DrawGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawTurnGraph(x int, y int, grHandle int, transFlag int) int {
	res, _, err := dx_DrawTurnGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawExtendGraph(x1 int, y1 int, x2 int, y2 int, grHandle int, transFlag int) int {
	res, _, err := dx_DrawExtendGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(grHandle), pint(transFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawRotaGraph(x int, y int, extRate float64, angle float64, grHandle int, transFlag int, turnFlag int) int {
	res, _, err := dx_DrawRotaGraph.Call(pint(x), pint(y), pfloat64(extRate), pfloat64(angle), pint(grHandle), pint(transFlag), pint(turnFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawRotaGraph2(x int, y int, cx int, cy int, extRate float64, angle float64, grHandle int, transFlag int, turnFlag int) int {
	res, _, err := dx_DrawRotaGraph2.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat64(extRate), pfloat64(angle), pint(grHandle), pint(transFlag), pint(turnFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawRotaGraph3(x int, y int, cx int, cy int, extRateX float64, extRateY float64, angle float64, grHandle int, transFlag int, turnFlag int) int {
	res, _, err := dx_DrawRotaGraph3.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat64(extRateX), pfloat64(extRateY), pfloat64(angle), pint(grHandle), pint(transFlag), pint(turnFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawModiGraph(x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, x4 int, y4 int, grHandle int, transFlag int) int {
	res, _, err := dx_DrawModiGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(x3), pint(y3), pint(x4), pint(y4), pint(grHandle), pint(transFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawRectGraph(destX int, destY int, srcX int, srcY int, width int, height int, graphHandle int, transFlag int, turnFlag int) int {
	res, _, err := dx_DrawRectGraph.Call(pint(destX), pint(destY), pint(srcX), pint(srcY), pint(width), pint(height), pint(graphHandle), pint(transFlag), pint(turnFlag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DerivationGraph(srcX int, srcY int, width int, height int, srcGraphHandle int) int {
	res, _, err := dx_DerivationGraph.Call(pint(srcX), pint(srcY), pint(width), pint(height), pint(srcGraphHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetDrawScreenGraph(x1 int, y1 int, x2 int, y2 int, grHandle int) int {
	res, _, err := dx_GetDrawScreenGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(grHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetGraphiteSize(grHandle int, sizeXBuf *int, sizeYBuf *int) int {
	res, _, err := dx_GetGraphiteSize.Call(pint(grHandle), ppint(sizeXBuf), ppint(sizeYBuf))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func InitGraph() int {
	res, _, err := dx_InitGraph.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DeleteGraph(grHandle int) int {
	res, _, err := dx_DeleteGraph.Call(pint(grHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetDrawMode(drawMode int) int {
	res, _, err := dx_SetDrawMode.Call(pint(drawMode))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetDrawBlendMode(blendMode int, pal int) int {
	res, _, err := dx_SetDrawBlendMode.Call(pint(blendMode), pint(pal))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetDrawBright(redBright int, greenBright int, blueBright int) int {
	res, _, err := dx_SetDrawBright.Call(pint(redBright), pint(greenBright), pint(blueBright))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetTransColor(red int, green int, blue int) int {
	res, _, err := dx_SetTransColor.Call(pint(red), pint(green), pint(blue))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func LoadBlendGraph(fileName string) int {
	res, _, err := dx_LoadBlendGraph.Call(pstring(fileName))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawBlendGraph(x int, y int, grHandle int, transFlag int, blendGraph int, borderParam int, borderRange int) int {
	res, _, err := dx_DrawBlendGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag), pint(blendGraph), pint(borderParam), pint(borderRange))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawString(x int, y int, str string, color uint) int {
	res, _, err := dx_DrawString.Call(pint(x), pint(y), pstring(str), puint(color))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetDrawStringWidth(str string, strLen int) int {
	res, _, err := dx_GetDrawStringWidth.Call(pstring(str), pint(strLen))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetFontSize(fontSize int) int {
	res, _, err := dx_SetFontSize.Call(pint(fontSize))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetFontThickness(tinckPal int) int {
	res, _, err := dx_SetFontThickness.Call(pint(tinckPal))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ChangeFont(fontName string) int {
	res, _, err := dx_ChangeFont.Call(pstring(fontName))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ChangeFontType(fontType int) int {
	res, _, err := dx_ChangeFontType.Call(pint(fontType))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func CreateFontToHandle(fontName string, size int, thick int, fontType int) int {
	res, _, err := dx_CreateFontToHandle.Call(pstring(fontName), pint(size), pint(thick), pint(fontType))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func LoadFontDataToHandle(fileName string, edgeSize int) int {
	res, _, err := dx_LoadFontDataToHandle.Call(pstring(fileName), pint(edgeSize))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DeleteFontToHandle(fontHandle int) int {
	res, _, err := dx_DeleteFontToHandle.Call(pint(fontHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetFontCacheUsePremulAlphaFlag(flag int) int {
	res, _, err := dx_SetFontCacheUsePremulAlphaFlag.Call(pint(flag))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawStringToHandle(x int, y int, str string, color uint, fontHandle int) int {
	res, _, err := dx_DrawStringToHandle.Call(pint(x), pint(y), pstring(str), puint(color), pint(fontHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetDrawStringWidthToHandle(str string, strLen int, fontHandle int) int {
	res, _, err := dx_GetDrawStringWidthToHandle.Call(pstring(str), pint(strLen), pint(fontHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetFontStateToHandle(fontName string, size *int, thick *int, fontHandle int) int {
	res, _, err := dx_GetFontStateToHandle.Call(pstring(fontName), ppint(size), ppint(thick), pint(fontHandle))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func InitFontToHandle() int {
	res, _, err := dx_InitFontToHandle.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func clsDx() int {
	res, _, err := dx_clsDx.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetGraphMode(sizeX int, sizeY int, colorBitNum int) int {
	res, _, err := dx_SetGraphMode.Call(pint(sizeX), pint(sizeY), pint(colorBitNum))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetFullScreenResolutionMode(resolutionMode int) int {
	res, _, err := dx_SetFullScreenResolutionMode.Call(pint(resolutionMode))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetFullScreenScalingMode(scalingMode int) int {
	res, _, err := dx_SetFullScreenScalingMode.Call(pint(scalingMode))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetScreenState(sizeX *int, sizeY *int, colorBitDepth *int) int {
	res, _, err := dx_GetScreenState.Call(ppint(sizeX), ppint(sizeY), ppint(colorBitDepth))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetDrawArea(x1 int, y1 int, x2 int, y2 int) int {
	res, _, err := dx_SetDrawArea.Call(pint(x1), pint(y1), pint(x2), pint(y2))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ClearDrawScreen() int {
	res, _, err := dx_ClearDrawScreen.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetBackgroundColor(red int, green int, blue int) int {
	res, _, err := dx_SetBackgroundColor.Call(pint(red), pint(green), pint(blue))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func GetColor(red int, green int, blue int) uint {
	res, _, err := dx_GetColor.Call(pint(red), pint(green), pint(blue))
	if err != nil {
		panic(err)
	}
	return uint(res)
}

func SetDrawScreen(drawScreen int) int {
	res, _, err := dx_SetDrawScreen.Call(pint(drawScreen))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ScreenFlip() int {
	res, _, err := dx_ScreenFlip.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func SetFullSceneAntiAliasingMode(samples int, quality int) int {
	res, _, err := dx_SetFullSceneAntiAliasingMode.Call(pint(samples), pint(quality))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ppint(i *int) uintptr {
	return uintptr(*i)
}

func pint(i int) uintptr {
	return uintptr(i)
}

func puint(ui uint) uintptr {
	return uintptr(ui)
}

func pstring(str string) uintptr {
	sjisStr, _, err := transform.String(japanese.ShiftJIS.NewEncoder(), str)
	if err != nil {
		panic(err)
	}
	pbyte, err := syscall.BytePtrFromString(sjisStr)
	if err != nil {
		panic(err)
	}
	return uintptr(unsafe.Pointer(pbyte))
}

func pfloat32(f float32) uintptr {
	return uintptr(f)
}

func pfloat64(f float64) uintptr {
	return uintptr(f)
}
