// Code generated by 'go generate'; DO NOT EDIT.

package dxlib

import (
	"fmt"
	"math"
	"syscall"
	"unsafe"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

type DrawLineOption struct {
	Thickness *int
}

type DrawLineAAOption struct {
	Thickness *float32
}

type DrawBoxAAOption struct {
	LineThickness *float32
}

type DrawCircleOption struct {
	LineThickness *int
}

type DrawCircleAAOption struct {
	LineThickness *float32
}

type DrawOvalOption struct {
	LineThickness *int
}

type DrawOvalAAOption struct {
	LineThickness *float32
}

type DrawTriangleAAOption struct {
	LineThickness *float32
}

type LoadGraphOption struct {
	NotUse3DFlag *int
}

type LoadDivGraphOption struct {
	NotUse3DFlag *int
}

type MakeGraphOption struct {
	NotUse3DFlag *int
}

type DrawRotaGraphOption struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type DrawRotaGraph2Option struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type DrawRotaGraph3Option struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type DrawRotaGraphFastOption struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type DrawRotaGraphFast2Option struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type DrawRotaGraphFast3Option struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type DrawRectGraphOption struct {
	ReverseXFlag *int
	ReverseYFlag *int
}

type GetDrawScreenGraphOption struct {
	UseClientFlag *int
}

type InitGraphOption struct {
	LogOutFlag *int
}

type DrawStringOption struct {
	EdgeColor *uint
}

type GetDrawStringWidthOption struct {
	VericalFlag *int
}

type ChangeFontOption struct {
	CharSet *int
}

type CreateFontToHandleOption struct {
	FontName *string
	Size     *int
	Thick    *int
	FontType *int
	CharSet  *int
	EdgeSize *int
	Italic   *int
	Handle   *int
}

type LoadFontDataToHandleOption struct {
	EdgeSize *int
}

type DrawStringToHandleOption struct {
	EdgeColor    *int
	VerticalFlag *int
}

type GetDrawStringWidthToHandleOption struct {
	VerticalFlag *int
}

type SetGraphModeOption struct {
	ColorBitNum *int
	RefreshRate *int
}

type LoadSoundMemOption struct {
	BufferNum   *int
	UnionHandle *int
}

type GetNowCountOption struct {
	UseRDTSCFlag *int
}

type GetNowHiPerformanceCountOption struct {
	UseRDTSCFlag *int
}

func IntPtr(a int) *int {
	return &a
}

func UintPtr(a uint) *uint {
	return &a
}

func Float32Ptr(a float32) *float32 {
	return &a
}

func StringPtr(a string) *string {
	return &a
}

var (
	dx_DxLib_Init                               *syscall.LazyProc
	dx_DxLib_End                                *syscall.LazyProc
	dx_ProcessMessage                           *syscall.LazyProc
	dx_DrawLine                                 *syscall.LazyProc
	dx_DrawLineAA                               *syscall.LazyProc
	dx_DrawBox                                  *syscall.LazyProc
	dx_DrawBoxAA                                *syscall.LazyProc
	dx_DrawCircle                               *syscall.LazyProc
	dx_DrawCircleAA                             *syscall.LazyProc
	dx_DrawOval                                 *syscall.LazyProc
	dx_DrawOvalAA                               *syscall.LazyProc
	dx_DrawTriangle                             *syscall.LazyProc
	dx_DrawTriangleAA                           *syscall.LazyProc
	dx_DrawPixel                                *syscall.LazyProc
	dx_GetPixel                                 *syscall.LazyProc
	dx_LoadGraphScreen                          *syscall.LazyProc
	dx_LoadGraph                                *syscall.LazyProc
	dx_LoadDivGraph                             *syscall.LazyProc
	dx_MakeGraph                                *syscall.LazyProc
	dx_MakeScreen                               *syscall.LazyProc
	dx_SetCreateDrawValidGraphMultiSample       *syscall.LazyProc
	dx_SetCreateGraphColorBitDepth              *syscall.LazyProc
	dx_SetDrawValidFloatTypeGraphCreateFlag     *syscall.LazyProc
	dx_SetCreateDrawValidGraphChannelNum        *syscall.LazyProc
	dx_SetUsePremulAlphaConvertLoad             *syscall.LazyProc
	dx_DrawGraph                                *syscall.LazyProc
	dx_DrawTurnGraph                            *syscall.LazyProc
	dx_DrawExtendGraph                          *syscall.LazyProc
	dx_DrawRotaGraph                            *syscall.LazyProc
	dx_DrawRotaGraph2                           *syscall.LazyProc
	dx_DrawRotaGraph3                           *syscall.LazyProc
	dx_DrawRotaGraphFast                        *syscall.LazyProc
	dx_DrawRotaGraphFast2                       *syscall.LazyProc
	dx_DrawRotaGraphFast3                       *syscall.LazyProc
	dx_DrawModiGraph                            *syscall.LazyProc
	dx_DrawRectGraph                            *syscall.LazyProc
	dx_DerivationGraph                          *syscall.LazyProc
	dx_GetDrawScreenGraph                       *syscall.LazyProc
	dx_GetGraphSize                             *syscall.LazyProc
	dx_InitGraph                                *syscall.LazyProc
	dx_DeleteGraph                              *syscall.LazyProc
	dx_SetDrawMode                              *syscall.LazyProc
	dx_SetDrawBlendMode                         *syscall.LazyProc
	dx_SetDrawBright                            *syscall.LazyProc
	dx_SetTransColor                            *syscall.LazyProc
	dx_LoadBlendGraph                           *syscall.LazyProc
	dx_DrawBlendGraph                           *syscall.LazyProc
	dx_DrawString                               *syscall.LazyProc
	dx_GetDrawStringWidth                       *syscall.LazyProc
	dx_SetFontSize                              *syscall.LazyProc
	dx_SetFontThickness                         *syscall.LazyProc
	dx_ChangeFont                               *syscall.LazyProc
	dx_ChangeFontType                           *syscall.LazyProc
	dx_CreateFontToHandle                       *syscall.LazyProc
	dx_LoadFontDataToHandle                     *syscall.LazyProc
	dx_DeleteFontToHandle                       *syscall.LazyProc
	dx_SetFontCacheUsePremulAlphaFlag           *syscall.LazyProc
	dx_DrawStringToHandle                       *syscall.LazyProc
	dx_GetDrawStringWidthToHandle               *syscall.LazyProc
	dx_GetFontStateToHandle                     *syscall.LazyProc
	dx_InitFontToHandle                         *syscall.LazyProc
	dx_SetGraphMode                             *syscall.LazyProc
	dx_SetFullScreenResolutionMode              *syscall.LazyProc
	dx_SetFullScreenScalingMode                 *syscall.LazyProc
	dx_GetScreenState                           *syscall.LazyProc
	dx_SetDrawArea                              *syscall.LazyProc
	dx_SetBackgroundColor                       *syscall.LazyProc
	dx_GetColor                                 *syscall.LazyProc
	dx_SetDrawScreen                            *syscall.LazyProc
	dx_ScreenFlip                               *syscall.LazyProc
	dx_SetFullSceneAntiAliasingMode             *syscall.LazyProc
	dx_PlayMovie                                *syscall.LazyProc
	dx_PlayMovieToGraph                         *syscall.LazyProc
	dx_PauseMovieToGraph                        *syscall.LazyProc
	dx_SeekMovieToGraph                         *syscall.LazyProc
	dx_TellMovieToGraph                         *syscall.LazyProc
	dx_GetMovieStateToGraph                     *syscall.LazyProc
	dx_CreateMaskScreen                         *syscall.LazyProc
	dx_DeleteMaskScreen                         *syscall.LazyProc
	dx_LoadMask                                 *syscall.LazyProc
	dx_LoadDivMask                              *syscall.LazyProc
	dx_DrawMask                                 *syscall.LazyProc
	dx_DrawFillMask                             *syscall.LazyProc
	dx_DeleteMask                               *syscall.LazyProc
	dx_InitMask                                 *syscall.LazyProc
	dx_FillMaskScreen                           *syscall.LazyProc
	dx_SetUseMaskScreenFlag                     *syscall.LazyProc
	dx_MakeMask                                 *syscall.LazyProc
	dx_GetMaskSize                              *syscall.LazyProc
	dx_GetJoypadNum                             *syscall.LazyProc
	dx_GetJoypadInputState                      *syscall.LazyProc
	dx_GetJoypadAnalogInput                     *syscall.LazyProc
	dx_SetJoypadDeadZone                        *syscall.LazyProc
	dx_StartJoypadVibration                     *syscall.LazyProc
	dx_StopJoypadVibration                      *syscall.LazyProc
	dx_SetMouseDispFlag                         *syscall.LazyProc
	dx_GetMousePoint                            *syscall.LazyProc
	dx_SetMousePoint                            *syscall.LazyProc
	dx_GetMouseInput                            *syscall.LazyProc
	dx_GetMouseInputLog2                        *syscall.LazyProc
	dx_GetMouseWheelRotVol                      *syscall.LazyProc
	dx_GetTouchInputNum                         *syscall.LazyProc
	dx_GetTouchInput                            *syscall.LazyProc
	dx_CheckHitKeyAll                           *syscall.LazyProc
	dx_CheckHitKey                              *syscall.LazyProc
	dx_GetHitKeyStateAll                        *syscall.LazyProc
	dx_GetInputChar                             *syscall.LazyProc
	dx_GetInputCharWait                         *syscall.LazyProc
	dx_ClearInputCharBuf                        *syscall.LazyProc
	dx_KeyInputString                           *syscall.LazyProc
	dx_KeyInputSingleCharString                 *syscall.LazyProc
	dx_KeyInputNumber                           *syscall.LazyProc
	dx_SetKeyInputStringColor                   *syscall.LazyProc
	dx_MakeKeyInput                             *syscall.LazyProc
	dx_DeleteKeyInput                           *syscall.LazyProc
	dx_InitKeyInput                             *syscall.LazyProc
	dx_SetActiveKeyInput                        *syscall.LazyProc
	dx_CheckKeyInput                            *syscall.LazyProc
	dx_DrawKeyInputString                       *syscall.LazyProc
	dx_DrawKeyInputModeString                   *syscall.LazyProc
	dx_SetKeyInputString                        *syscall.LazyProc
	dx_SetKeyInputNumber                        *syscall.LazyProc
	dx_GetKeyInputNumber                        *syscall.LazyProc
	dx_PlaySoundFile                            *syscall.LazyProc
	dx_CheckSoundFile                           *syscall.LazyProc
	dx_StopSoundFile                            *syscall.LazyProc
	dx_LoadSoundMem                             *syscall.LazyProc
	dx_PlaySoundMem                             *syscall.LazyProc
	dx_CheckSoundMem                            *syscall.LazyProc
	dx_StopSoundMem                             *syscall.LazyProc
	dx_DeleteSoundMem                           *syscall.LazyProc
	dx_InitSoundMem                             *syscall.LazyProc
	dx_ChangePanSoundMem                        *syscall.LazyProc
	dx_ChangeVolumeSoundMem                     *syscall.LazyProc
	dx_ChangeNextPlayPanSoundMem                *syscall.LazyProc
	dx_ChangeNextPlayVolumeSoundMem             *syscall.LazyProc
	dx_SetFrequencySoundMem                     *syscall.LazyProc
	dx_SetLoopPosSoundMem                       *syscall.LazyProc
	dx_SetLoopSamplePosSoundMem                 *syscall.LazyProc
	dx_SetCurrentPositionSoundMem               *syscall.LazyProc
	dx_DuplicateSoundMem                        *syscall.LazyProc
	dx_SetCreateSoundPitchRate                  *syscall.LazyProc
	dx_SetCreateSoundTimeStretchRate            *syscall.LazyProc
	dx_Set3DPositionSoundMem                    *syscall.LazyProc
	dx_Set3DRadiusSoundMem                      *syscall.LazyProc
	dx_Set3DVelocitySoundMem                    *syscall.LazyProc
	dx_SetNextPlay3DPositionSoundMem            *syscall.LazyProc
	dx_SetNextPlay3DRadiusSoundMem              *syscall.LazyProc
	dx_SetNextPlay3DVelocitySoundMem            *syscall.LazyProc
	dx_Set3DPresetReverbParamSoundMem           *syscall.LazyProc
	dx_Set3DPresetReverbParamSoundMemAll        *syscall.LazyProc
	dx_SetCreate3DSoundFlag                     *syscall.LazyProc
	dx_SetEnableXAudioFlag                      *syscall.LazyProc
	dx_Set3DSoundOneMetre                       *syscall.LazyProc
	dx_Set3DSoundListenerPosAndFrontPos_UpVecY  *syscall.LazyProc
	dx_Set3DSoundListenerPosAndFrontPosAndUpVec *syscall.LazyProc
	dx_Set3DSoundListenerVelocity               *syscall.LazyProc
	dx_PlayMusic                                *syscall.LazyProc
	dx_CheckMusic                               *syscall.LazyProc
	dx_StopMusic                                *syscall.LazyProc
	dx_SetVolumeMusic                           *syscall.LazyProc
	dx_WaitTimer                                *syscall.LazyProc
	dx_WaitVSync                                *syscall.LazyProc
	dx_WaitKey                                  *syscall.LazyProc
	dx_GetNowCount                              *syscall.LazyProc
	dx_GetNowHiPerformanceCount                 *syscall.LazyProc
	dx_GetRand                                  *syscall.LazyProc
	dx_SRand                                    *syscall.LazyProc
	dx_ChangeWindowMode                         *syscall.LazyProc
	dx_SetMainWindowText                        *syscall.LazyProc
	dx_SetWindowIconID                          *syscall.LazyProc
	dx_SetWindowSizeChangeEnableFlag            *syscall.LazyProc
	dx_SetWindowSizeExtendRate                  *syscall.LazyProc
	dx_FileRead_open                            *syscall.LazyProc
	dx_FileRead_size                            *syscall.LazyProc
	dx_FileRead_close                           *syscall.LazyProc
	dx_FileRead_tell                            *syscall.LazyProc
	dx_FileRead_seek                            *syscall.LazyProc
	dx_FileRead_eof                             *syscall.LazyProc
	dx_FileRead_gets                            *syscall.LazyProc
	dx_FileRead_getc                            *syscall.LazyProc
	dx_LoadSoftImage                            *syscall.LazyProc
	dx_LoadARGB8ColorSoftImage                  *syscall.LazyProc
	dx_LoadXRGB8ColorSoftImage                  *syscall.LazyProc
	dx_MakeARGB8ColorSoftImage                  *syscall.LazyProc
	dx_MakeXRGB8ColorSoftImage                  *syscall.LazyProc
	dx_MakePAL8ColorSoftImage                   *syscall.LazyProc
	dx_DeleteSoftImage                          *syscall.LazyProc
	dx_InitSoftImage                            *syscall.LazyProc
	dx_GetSoftImageSize                         *syscall.LazyProc
	dx_FillSoftImage                            *syscall.LazyProc
	dx_SetPaletteSoftImage                      *syscall.LazyProc
	dx_GetPaletteSoftImage                      *syscall.LazyProc
	dx_DrawPixelPalCodeSoftImage                *syscall.LazyProc
	dx_GetPixelPalCodeSoftImage                 *syscall.LazyProc
	dx_DrawPixelSoftImage                       *syscall.LazyProc
	dx_GetPixelSoftImage                        *syscall.LazyProc
	dx_BltSoftImage                             *syscall.LazyProc
	dx_DrawSoftImage                            *syscall.LazyProc
	dx_CreateGraphFromSoftImage                 *syscall.LazyProc
	dx_CreateDivGraphFromSoftImage              *syscall.LazyProc
	dx_SetUseASyncLoadFlag                      *syscall.LazyProc
	dx_CheckHandleASyncLoad                     *syscall.LazyProc
	dx_GetASyncLoadNum                          *syscall.LazyProc
	dx_SetUseCharCodeFormat                     *syscall.LazyProc
	dx_SetAlwaysRunFlag                         *syscall.LazyProc
	dx_SetOutApplicationLogValidFlag            *syscall.LazyProc
	dx_SetUseDXArchiveFlag                      *syscall.LazyProc
	dx_SetDXArchiveExtension                    *syscall.LazyProc
	dx_SetDXArchiveKeyString                    *syscall.LazyProc
	dx_SetEmulation320x240                      *syscall.LazyProc
	dx_SetUse3DFlag                             *syscall.LazyProc
	dx_SetWaitVSyncFlag                         *syscall.LazyProc
	dx_SetUseDivGraphFlag                       *syscall.LazyProc
	dx_LoadPauseGraph                           *syscall.LazyProc
	dx_ScreenCopy                               *syscall.LazyProc
	dx_GetColorBitDepth                         *syscall.LazyProc
	dx_SaveDrawScreen                           *syscall.LazyProc
	dx_EnumFontName                             *syscall.LazyProc
	dx_DrawVString                              *syscall.LazyProc
	dx_DrawVStringToHandle                      *syscall.LazyProc
	dx_ReloadFileGraphAll                       *syscall.LazyProc
	dx_SetCreateSoundDataType                   *syscall.LazyProc
	dx_SelectMidiMode                           *syscall.LazyProc
	dx_RemoveFontFile                           *syscall.LazyProc
	dx_DrawFormatString                         *syscall.LazyProc
	dx_DrawFormatStringToHandle                 *syscall.LazyProc
	dx_ClearDrawScreen                          *syscall.LazyProc
	dx_AddFontFile                              *syscall.LazyProc
)

// Init method set procs from dllFile.
// This method must be called at first.
func Init(dllFile string) {
	mod := syscall.NewLazyDLL(dllFile)

	dx_DxLib_Init = mod.NewProc("dx_DxLib_Init")
	dx_DxLib_End = mod.NewProc("dx_DxLib_End")
	dx_ProcessMessage = mod.NewProc("dx_ProcessMessage")
	dx_DrawLine = mod.NewProc("dx_DrawLine")
	dx_DrawLineAA = mod.NewProc("dx_DrawLineAA")
	dx_DrawBox = mod.NewProc("dx_DrawBox")
	dx_DrawBoxAA = mod.NewProc("dx_DrawBoxAA")
	dx_DrawCircle = mod.NewProc("dx_DrawCircle")
	dx_DrawCircleAA = mod.NewProc("dx_DrawCircleAA")
	dx_DrawOval = mod.NewProc("dx_DrawOval")
	dx_DrawOvalAA = mod.NewProc("dx_DrawOvalAA")
	dx_DrawTriangle = mod.NewProc("dx_DrawTriangle")
	dx_DrawTriangleAA = mod.NewProc("dx_DrawTriangleAA")
	dx_DrawPixel = mod.NewProc("dx_DrawPixel")
	dx_GetPixel = mod.NewProc("dx_GetPixel")
	dx_LoadGraphScreen = mod.NewProc("dx_LoadGraphScreen")
	dx_LoadGraph = mod.NewProc("dx_LoadGraph")
	dx_LoadDivGraph = mod.NewProc("dx_LoadDivGraph")
	dx_MakeGraph = mod.NewProc("dx_MakeGraph")
	dx_MakeScreen = mod.NewProc("dx_MakeScreen")
	dx_SetCreateDrawValidGraphMultiSample = mod.NewProc("dx_SetCreateDrawValidGraphMultiSample")
	dx_SetCreateGraphColorBitDepth = mod.NewProc("dx_SetCreateGraphColorBitDepth")
	dx_SetDrawValidFloatTypeGraphCreateFlag = mod.NewProc("dx_SetDrawValidFloatTypeGraphCreateFlag")
	dx_SetCreateDrawValidGraphChannelNum = mod.NewProc("dx_SetCreateDrawValidGraphChannelNum")
	dx_SetUsePremulAlphaConvertLoad = mod.NewProc("dx_SetUsePremulAlphaConvertLoad")
	dx_DrawGraph = mod.NewProc("dx_DrawGraph")
	dx_DrawTurnGraph = mod.NewProc("dx_DrawTurnGraph")
	dx_DrawExtendGraph = mod.NewProc("dx_DrawExtendGraph")
	dx_DrawRotaGraph = mod.NewProc("dx_DrawRotaGraph")
	dx_DrawRotaGraph2 = mod.NewProc("dx_DrawRotaGraph2")
	dx_DrawRotaGraph3 = mod.NewProc("dx_DrawRotaGraph3")
	dx_DrawRotaGraphFast = mod.NewProc("dx_DrawRotaGraphFast")
	dx_DrawRotaGraphFast2 = mod.NewProc("dx_DrawRotaGraphFast2")
	dx_DrawRotaGraphFast3 = mod.NewProc("dx_DrawRotaGraphFast3")
	dx_DrawModiGraph = mod.NewProc("dx_DrawModiGraph")
	dx_DrawRectGraph = mod.NewProc("dx_DrawRectGraph")
	dx_DerivationGraph = mod.NewProc("dx_DerivationGraph")
	dx_GetDrawScreenGraph = mod.NewProc("dx_GetDrawScreenGraph")
	dx_GetGraphSize = mod.NewProc("dx_GetGraphSize")
	dx_InitGraph = mod.NewProc("dx_InitGraph")
	dx_DeleteGraph = mod.NewProc("dx_DeleteGraph")
	dx_SetDrawMode = mod.NewProc("dx_SetDrawMode")
	dx_SetDrawBlendMode = mod.NewProc("dx_SetDrawBlendMode")
	dx_SetDrawBright = mod.NewProc("dx_SetDrawBright")
	dx_SetTransColor = mod.NewProc("dx_SetTransColor")
	dx_LoadBlendGraph = mod.NewProc("dx_LoadBlendGraph")
	dx_DrawBlendGraph = mod.NewProc("dx_DrawBlendGraph")
	dx_DrawString = mod.NewProc("dx_DrawString")
	dx_GetDrawStringWidth = mod.NewProc("dx_GetDrawStringWidth")
	dx_SetFontSize = mod.NewProc("dx_SetFontSize")
	dx_SetFontThickness = mod.NewProc("dx_SetFontThickness")
	dx_ChangeFont = mod.NewProc("dx_ChangeFont")
	dx_ChangeFontType = mod.NewProc("dx_ChangeFontType")
	dx_CreateFontToHandle = mod.NewProc("dx_CreateFontToHandle")
	dx_LoadFontDataToHandle = mod.NewProc("dx_LoadFontDataToHandle")
	dx_DeleteFontToHandle = mod.NewProc("dx_DeleteFontToHandle")
	dx_SetFontCacheUsePremulAlphaFlag = mod.NewProc("dx_SetFontCacheUsePremulAlphaFlag")
	dx_DrawStringToHandle = mod.NewProc("dx_DrawStringToHandle")
	dx_GetDrawStringWidthToHandle = mod.NewProc("dx_GetDrawStringWidthToHandle")
	dx_GetFontStateToHandle = mod.NewProc("dx_GetFontStateToHandle")
	dx_InitFontToHandle = mod.NewProc("dx_InitFontToHandle")
	dx_SetGraphMode = mod.NewProc("dx_SetGraphMode")
	dx_SetFullScreenResolutionMode = mod.NewProc("dx_SetFullScreenResolutionMode")
	dx_SetFullScreenScalingMode = mod.NewProc("dx_SetFullScreenScalingMode")
	dx_GetScreenState = mod.NewProc("dx_GetScreenState")
	dx_SetDrawArea = mod.NewProc("dx_SetDrawArea")
	dx_SetBackgroundColor = mod.NewProc("dx_SetBackgroundColor")
	dx_GetColor = mod.NewProc("dx_GetColor")
	dx_SetDrawScreen = mod.NewProc("dx_SetDrawScreen")
	dx_ScreenFlip = mod.NewProc("dx_ScreenFlip")
	dx_SetFullSceneAntiAliasingMode = mod.NewProc("dx_SetFullSceneAntiAliasingMode")
	dx_PlayMovie = mod.NewProc("dx_PlayMovie")
	dx_PlayMovieToGraph = mod.NewProc("dx_PlayMovieToGraph")
	dx_PauseMovieToGraph = mod.NewProc("dx_PauseMovieToGraph")
	dx_SeekMovieToGraph = mod.NewProc("dx_SeekMovieToGraph")
	dx_TellMovieToGraph = mod.NewProc("dx_TellMovieToGraph")
	dx_GetMovieStateToGraph = mod.NewProc("dx_GetMovieStateToGraph")
	dx_CreateMaskScreen = mod.NewProc("dx_CreateMaskScreen")
	dx_DeleteMaskScreen = mod.NewProc("dx_DeleteMaskScreen")
	dx_LoadMask = mod.NewProc("dx_LoadMask")
	dx_LoadDivMask = mod.NewProc("dx_LoadDivMask")
	dx_DrawMask = mod.NewProc("dx_DrawMask")
	dx_DrawFillMask = mod.NewProc("dx_DrawFillMask")
	dx_DeleteMask = mod.NewProc("dx_DeleteMask")
	dx_InitMask = mod.NewProc("dx_InitMask")
	dx_FillMaskScreen = mod.NewProc("dx_FillMaskScreen")
	dx_SetUseMaskScreenFlag = mod.NewProc("dx_SetUseMaskScreenFlag")
	dx_MakeMask = mod.NewProc("dx_MakeMask")
	dx_GetMaskSize = mod.NewProc("dx_GetMaskSize")
	dx_GetJoypadNum = mod.NewProc("dx_GetJoypadNum")
	dx_GetJoypadInputState = mod.NewProc("dx_GetJoypadInputState")
	dx_GetJoypadAnalogInput = mod.NewProc("dx_GetJoypadAnalogInput")
	dx_SetJoypadDeadZone = mod.NewProc("dx_SetJoypadDeadZone")
	dx_StartJoypadVibration = mod.NewProc("dx_StartJoypadVibration")
	dx_StopJoypadVibration = mod.NewProc("dx_StopJoypadVibration")
	dx_SetMouseDispFlag = mod.NewProc("dx_SetMouseDispFlag")
	dx_GetMousePoint = mod.NewProc("dx_GetMousePoint")
	dx_SetMousePoint = mod.NewProc("dx_SetMousePoint")
	dx_GetMouseInput = mod.NewProc("dx_GetMouseInput")
	dx_GetMouseInputLog2 = mod.NewProc("dx_GetMouseInputLog2")
	dx_GetMouseWheelRotVol = mod.NewProc("dx_GetMouseWheelRotVol")
	dx_GetTouchInputNum = mod.NewProc("dx_GetTouchInputNum")
	dx_GetTouchInput = mod.NewProc("dx_GetTouchInput")
	dx_CheckHitKeyAll = mod.NewProc("dx_CheckHitKeyAll")
	dx_CheckHitKey = mod.NewProc("dx_CheckHitKey")
	dx_GetHitKeyStateAll = mod.NewProc("dx_GetHitKeyStateAll")
	dx_GetInputChar = mod.NewProc("dx_GetInputChar")
	dx_GetInputCharWait = mod.NewProc("dx_GetInputCharWait")
	dx_ClearInputCharBuf = mod.NewProc("dx_ClearInputCharBuf")
	dx_KeyInputString = mod.NewProc("dx_KeyInputString")
	dx_KeyInputSingleCharString = mod.NewProc("dx_KeyInputSingleCharString")
	dx_KeyInputNumber = mod.NewProc("dx_KeyInputNumber")
	dx_SetKeyInputStringColor = mod.NewProc("dx_SetKeyInputStringColor")
	dx_MakeKeyInput = mod.NewProc("dx_MakeKeyInput")
	dx_DeleteKeyInput = mod.NewProc("dx_DeleteKeyInput")
	dx_InitKeyInput = mod.NewProc("dx_InitKeyInput")
	dx_SetActiveKeyInput = mod.NewProc("dx_SetActiveKeyInput")
	dx_CheckKeyInput = mod.NewProc("dx_CheckKeyInput")
	dx_DrawKeyInputString = mod.NewProc("dx_DrawKeyInputString")
	dx_DrawKeyInputModeString = mod.NewProc("dx_DrawKeyInputModeString")
	dx_SetKeyInputString = mod.NewProc("dx_SetKeyInputString")
	dx_SetKeyInputNumber = mod.NewProc("dx_SetKeyInputNumber")
	dx_GetKeyInputNumber = mod.NewProc("dx_GetKeyInputNumber")
	dx_PlaySoundFile = mod.NewProc("dx_PlaySoundFile")
	dx_CheckSoundFile = mod.NewProc("dx_CheckSoundFile")
	dx_StopSoundFile = mod.NewProc("dx_StopSoundFile")
	dx_LoadSoundMem = mod.NewProc("dx_LoadSoundMem")
	dx_PlaySoundMem = mod.NewProc("dx_PlaySoundMem")
	dx_CheckSoundMem = mod.NewProc("dx_CheckSoundMem")
	dx_StopSoundMem = mod.NewProc("dx_StopSoundMem")
	dx_DeleteSoundMem = mod.NewProc("dx_DeleteSoundMem")
	dx_InitSoundMem = mod.NewProc("dx_InitSoundMem")
	dx_ChangePanSoundMem = mod.NewProc("dx_ChangePanSoundMem")
	dx_ChangeVolumeSoundMem = mod.NewProc("dx_ChangeVolumeSoundMem")
	dx_ChangeNextPlayPanSoundMem = mod.NewProc("dx_ChangeNextPlayPanSoundMem")
	dx_ChangeNextPlayVolumeSoundMem = mod.NewProc("dx_ChangeNextPlayVolumeSoundMem")
	dx_SetFrequencySoundMem = mod.NewProc("dx_SetFrequencySoundMem")
	dx_SetLoopPosSoundMem = mod.NewProc("dx_SetLoopPosSoundMem")
	dx_SetLoopSamplePosSoundMem = mod.NewProc("dx_SetLoopSamplePosSoundMem")
	dx_SetCurrentPositionSoundMem = mod.NewProc("dx_SetCurrentPositionSoundMem")
	dx_DuplicateSoundMem = mod.NewProc("dx_DuplicateSoundMem")
	dx_SetCreateSoundPitchRate = mod.NewProc("dx_SetCreateSoundPitchRate")
	dx_SetCreateSoundTimeStretchRate = mod.NewProc("dx_SetCreateSoundTimeStretchRate")
	dx_Set3DPositionSoundMem = mod.NewProc("dx_Set3DPositionSoundMem")
	dx_Set3DRadiusSoundMem = mod.NewProc("dx_Set3DRadiusSoundMem")
	dx_Set3DVelocitySoundMem = mod.NewProc("dx_Set3DVelocitySoundMem")
	dx_SetNextPlay3DPositionSoundMem = mod.NewProc("dx_SetNextPlay3DPositionSoundMem")
	dx_SetNextPlay3DRadiusSoundMem = mod.NewProc("dx_SetNextPlay3DRadiusSoundMem")
	dx_SetNextPlay3DVelocitySoundMem = mod.NewProc("dx_SetNextPlay3DVelocitySoundMem")
	dx_Set3DPresetReverbParamSoundMem = mod.NewProc("dx_Set3DPresetReverbParamSoundMem")
	dx_Set3DPresetReverbParamSoundMemAll = mod.NewProc("dx_Set3DPresetReverbParamSoundMemAll")
	dx_SetCreate3DSoundFlag = mod.NewProc("dx_SetCreate3DSoundFlag")
	dx_SetEnableXAudioFlag = mod.NewProc("dx_SetEnableXAudioFlag")
	dx_Set3DSoundOneMetre = mod.NewProc("dx_Set3DSoundOneMetre")
	dx_Set3DSoundListenerPosAndFrontPos_UpVecY = mod.NewProc("dx_Set3DSoundListenerPosAndFrontPos_UpVecY")
	dx_Set3DSoundListenerPosAndFrontPosAndUpVec = mod.NewProc("dx_Set3DSoundListenerPosAndFrontPosAndUpVec")
	dx_Set3DSoundListenerVelocity = mod.NewProc("dx_Set3DSoundListenerVelocity")
	dx_PlayMusic = mod.NewProc("dx_PlayMusic")
	dx_CheckMusic = mod.NewProc("dx_CheckMusic")
	dx_StopMusic = mod.NewProc("dx_StopMusic")
	dx_SetVolumeMusic = mod.NewProc("dx_SetVolumeMusic")
	dx_WaitTimer = mod.NewProc("dx_WaitTimer")
	dx_WaitVSync = mod.NewProc("dx_WaitVSync")
	dx_WaitKey = mod.NewProc("dx_WaitKey")
	dx_GetNowCount = mod.NewProc("dx_GetNowCount")
	dx_GetNowHiPerformanceCount = mod.NewProc("dx_GetNowHiPerformanceCount")
	dx_GetRand = mod.NewProc("dx_GetRand")
	dx_SRand = mod.NewProc("dx_SRand")
	dx_ChangeWindowMode = mod.NewProc("dx_ChangeWindowMode")
	dx_SetMainWindowText = mod.NewProc("dx_SetMainWindowText")
	dx_SetWindowIconID = mod.NewProc("dx_SetWindowIconID")
	dx_SetWindowSizeChangeEnableFlag = mod.NewProc("dx_SetWindowSizeChangeEnableFlag")
	dx_SetWindowSizeExtendRate = mod.NewProc("dx_SetWindowSizeExtendRate")
	dx_FileRead_open = mod.NewProc("dx_FileRead_open")
	dx_FileRead_size = mod.NewProc("dx_FileRead_size")
	dx_FileRead_close = mod.NewProc("dx_FileRead_close")
	dx_FileRead_tell = mod.NewProc("dx_FileRead_tell")
	dx_FileRead_seek = mod.NewProc("dx_FileRead_seek")
	dx_FileRead_eof = mod.NewProc("dx_FileRead_eof")
	dx_FileRead_gets = mod.NewProc("dx_FileRead_gets")
	dx_FileRead_getc = mod.NewProc("dx_FileRead_getc")
	dx_LoadSoftImage = mod.NewProc("dx_LoadSoftImage")
	dx_LoadARGB8ColorSoftImage = mod.NewProc("dx_LoadARGB8ColorSoftImage")
	dx_LoadXRGB8ColorSoftImage = mod.NewProc("dx_LoadXRGB8ColorSoftImage")
	dx_MakeARGB8ColorSoftImage = mod.NewProc("dx_MakeARGB8ColorSoftImage")
	dx_MakeXRGB8ColorSoftImage = mod.NewProc("dx_MakeXRGB8ColorSoftImage")
	dx_MakePAL8ColorSoftImage = mod.NewProc("dx_MakePAL8ColorSoftImage")
	dx_DeleteSoftImage = mod.NewProc("dx_DeleteSoftImage")
	dx_InitSoftImage = mod.NewProc("dx_InitSoftImage")
	dx_GetSoftImageSize = mod.NewProc("dx_GetSoftImageSize")
	dx_FillSoftImage = mod.NewProc("dx_FillSoftImage")
	dx_SetPaletteSoftImage = mod.NewProc("dx_SetPaletteSoftImage")
	dx_GetPaletteSoftImage = mod.NewProc("dx_GetPaletteSoftImage")
	dx_DrawPixelPalCodeSoftImage = mod.NewProc("dx_DrawPixelPalCodeSoftImage")
	dx_GetPixelPalCodeSoftImage = mod.NewProc("dx_GetPixelPalCodeSoftImage")
	dx_DrawPixelSoftImage = mod.NewProc("dx_DrawPixelSoftImage")
	dx_GetPixelSoftImage = mod.NewProc("dx_GetPixelSoftImage")
	dx_BltSoftImage = mod.NewProc("dx_BltSoftImage")
	dx_DrawSoftImage = mod.NewProc("dx_DrawSoftImage")
	dx_CreateGraphFromSoftImage = mod.NewProc("dx_CreateGraphFromSoftImage")
	dx_CreateDivGraphFromSoftImage = mod.NewProc("dx_CreateDivGraphFromSoftImage")
	dx_SetUseASyncLoadFlag = mod.NewProc("dx_SetUseASyncLoadFlag")
	dx_CheckHandleASyncLoad = mod.NewProc("dx_CheckHandleASyncLoad")
	dx_GetASyncLoadNum = mod.NewProc("dx_GetASyncLoadNum")
	dx_SetUseCharCodeFormat = mod.NewProc("dx_SetUseCharCodeFormat")
	dx_SetAlwaysRunFlag = mod.NewProc("dx_SetAlwaysRunFlag")
	dx_SetOutApplicationLogValidFlag = mod.NewProc("dx_SetOutApplicationLogValidFlag")
	dx_SetUseDXArchiveFlag = mod.NewProc("dx_SetUseDXArchiveFlag")
	dx_SetDXArchiveExtension = mod.NewProc("dx_SetDXArchiveExtension")
	dx_SetDXArchiveKeyString = mod.NewProc("dx_SetDXArchiveKeyString")
	dx_SetEmulation320x240 = mod.NewProc("dx_SetEmulation320x240")
	dx_SetUse3DFlag = mod.NewProc("dx_SetUse3DFlag")
	dx_SetWaitVSyncFlag = mod.NewProc("dx_SetWaitVSyncFlag")
	dx_SetUseDivGraphFlag = mod.NewProc("dx_SetUseDivGraphFlag")
	dx_LoadPauseGraph = mod.NewProc("dx_LoadPauseGraph")
	dx_ScreenCopy = mod.NewProc("dx_ScreenCopy")
	dx_GetColorBitDepth = mod.NewProc("dx_GetColorBitDepth")
	dx_SaveDrawScreen = mod.NewProc("dx_SaveDrawScreen")
	dx_EnumFontName = mod.NewProc("dx_EnumFontName")
	dx_DrawVString = mod.NewProc("dx_DrawVString")
	dx_DrawVStringToHandle = mod.NewProc("dx_DrawVStringToHandle")
	dx_ReloadFileGraphAll = mod.NewProc("dx_ReloadFileGraphAll")
	dx_SetCreateSoundDataType = mod.NewProc("dx_SetCreateSoundDataType")
	dx_SelectMidiMode = mod.NewProc("dx_SelectMidiMode")
	dx_RemoveFontFile = mod.NewProc("dx_RemoveFontFile")
	dx_DrawFormatString = mod.NewProc("dx_DrawFormatString")
	dx_DrawFormatStringToHandle = mod.NewProc("dx_DrawFormatStringToHandle")
	dx_ClearDrawScreen = mod.NewProc("dx_ClearDrawScreen")
	dx_AddFontFile = mod.NewProc("dx_AddFontFile")

}

func DxLib_Init() int {
	if dx_DxLib_Init == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DxLib_Init.Call()
	return int(res)
}

func DxLib_End() int {
	if dx_DxLib_End == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DxLib_End.Call()
	return int(res)
}

func ProcessMessage() int {
	if dx_ProcessMessage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ProcessMessage.Call()
	return int(res)
}

// DrawLine 線を描画
//
// 引数
//   x1, y1: 線の起点座標
//   x2, y2: 線の終点座標
//   color: 線の色
//   thickness: 文字の太さ(デフォルト: 1)
func DrawLine(x1 int, y1 int, x2 int, y2 int, color uint, opt ...DrawLineOption) int {
	if dx_DrawLine == nil {
		panic("Please call dxlib.Init() at first")
	}

	thickness := int(1)
	if len(opt) > 0 && opt[0].Thickness != nil {
		thickness = *opt[0].Thickness
	}

	res, _, _ := dx_DrawLine.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color), pint(thickness))
	return int(res)
}

// DrawLineAA 線を描画(アンチエイリアス効果付き)
//
// 引数
//   x1, y1: 線の起点座標
//   x2, y2: 線の終点座標
//   color: 線の色
//   thickness: 文字の太さ(デフォルト: 1.0)
func DrawLineAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint, opt ...DrawLineAAOption) int {
	if dx_DrawLineAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	thickness := float32(1.0)
	if len(opt) > 0 && opt[0].Thickness != nil {
		thickness = *opt[0].Thickness
	}

	res, _, _ := dx_DrawLineAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint(color), pfloat32(thickness))
	return int(res)
}

// DrawBox 四角形を描画
//
// 引数
//   x1, y1: 四角形の左上の頂点座標
//   x2, y2: 四角形の右下＋１の頂点座標
//   color: 四角形の色
//   fillFlag: 四角の中身を塗りつぶすか(TRUEで塗りつぶし)
func DrawBox(x1 int, y1 int, x2 int, y2 int, color uint, fillFlag int) int {
	if dx_DrawBox == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBox.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color), pint(fillFlag))
	return int(res)
}

// DrawBoxAA 四角形を描画(アンチエイリアス効果付き)
//
// 引数
//   x1, y1: 四角形の左上の頂点座標
//   x2, y2: 四角形の右下＋１の頂点座標
//   color: 四角形の色
//   fillFlag: 四角の中身を塗りつぶすか(TRUEで塗りつぶし)
//   lineThickness: 文字の太さ(デフォルト: 1.0)
func DrawBoxAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint, fillFlag int, opt ...DrawBoxAAOption) int {
	if dx_DrawBoxAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	lineThickness := float32(1.0)
	if len(opt) > 0 && opt[0].LineThickness != nil {
		lineThickness = *opt[0].LineThickness
	}

	res, _, _ := dx_DrawBoxAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint(color), pint(fillFlag), pfloat32(lineThickness))
	return int(res)
}

// DrawCircle 円を描画
//
// 引数
//   x, y: 円の中心座標
//   r: 半径
//   color: 円の色
//   fillFlag: 塗りつぶすか(TRUEで塗りつぶし)
//   lineThickness: 文字の太さ(デフォルト: 1)
func DrawCircle(x int, y int, r int, color uint, fillFlag int, opt ...DrawCircleOption) int {
	if dx_DrawCircle == nil {
		panic("Please call dxlib.Init() at first")
	}

	lineThickness := int(1)
	if len(opt) > 0 && opt[0].LineThickness != nil {
		lineThickness = *opt[0].LineThickness
	}

	res, _, _ := dx_DrawCircle.Call(pint(x), pint(y), pint(r), puint(color), pint(fillFlag), pint(lineThickness))
	return int(res)
}

// DrawCircleAA 円を描画(アンチエイリアス効果付き)
//
// 引数
//   x, y: 円の中心座標
//   r: 半径
//   posnum: 円を形成する頂点の数
//   color: 円の色
//   fillFlag: 塗りつぶすか(TRUEで塗りつぶし)
//   lineThickness: 文字の太さ(デフォルト: 1.0)
func DrawCircleAA(x float32, y float32, r float32, posnum int, color uint, fillFlag int, opt ...DrawCircleAAOption) int {
	if dx_DrawCircleAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	lineThickness := float32(1.0)
	if len(opt) > 0 && opt[0].LineThickness != nil {
		lineThickness = *opt[0].LineThickness
	}

	res, _, _ := dx_DrawCircleAA.Call(pfloat32(x), pfloat32(y), pfloat32(r), pint(posnum), puint(color), pint(fillFlag), pfloat32(lineThickness))
	return int(res)
}

// DrawOval 楕円を描画
//
// 引数
//   x, y: 楕円の中心座標
//   rx, ry: 描く楕円のX軸に対する半径とY軸に対する半径
//   color: 円の色
//   fillFlag: 塗りつぶすか(TRUEで塗りつぶし)
//   lineThickness: 文字の太さ(デフォルト: 1.0)
func DrawOval(x int, y int, rx int, ry int, color uint, fillFlag int, opt ...DrawOvalOption) int {
	if dx_DrawOval == nil {
		panic("Please call dxlib.Init() at first")
	}

	lineThickness := int(1.0)
	if len(opt) > 0 && opt[0].LineThickness != nil {
		lineThickness = *opt[0].LineThickness
	}

	res, _, _ := dx_DrawOval.Call(pint(x), pint(y), pint(rx), pint(ry), puint(color), pint(fillFlag), pint(lineThickness))
	return int(res)
}

// DrawOvalAA 楕円を描画(アンチエイリアス効果付き)
//
// 引数
//   x, y: 楕円の中心座標
//   rx, ry: 描く楕円のX軸に対する半径とY軸に対する半径
//   posnum: 円を形成する頂点の数
//   color: 円の色
//   fillFlag: 塗りつぶすか(TRUEで塗りつぶし)
//   lineThickness: 文字の太さ(デフォルト: 1.0)
func DrawOvalAA(x float32, y float32, rx float32, ry float32, posnum int, color uint, fillFlag int, opt ...DrawOvalAAOption) int {
	if dx_DrawOvalAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	lineThickness := float32(1.0)
	if len(opt) > 0 && opt[0].LineThickness != nil {
		lineThickness = *opt[0].LineThickness
	}

	res, _, _ := dx_DrawOvalAA.Call(pfloat32(x), pfloat32(y), pfloat32(rx), pfloat32(ry), pint(posnum), puint(color), pint(fillFlag), pfloat32(lineThickness))
	return int(res)
}

// DrawTriangle 三角形の描画
//
// 引数
//   x1, y1, x2, y2, x3, y3: 三角形を描く３つの座標
//   color: 三角形の色
//   fillFlag: 塗りつぶすか(TRUEで塗りつぶし)
func DrawTriangle(x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, color uint, fillFlag int) int {
	if dx_DrawTriangle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTriangle.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(x3), pint(y3), puint(color), pint(fillFlag))
	return int(res)
}

// DrawTriangleAA 三角形の描画(アンチエイリアス効果付き)
//
// 引数
//   x1, y1, x2, y2, x3, y3: 三角形を描く３つの座標
//   color: 三角形の色
//   fillFlag: 塗りつぶすか(TRUEで塗りつぶし)
//   lineThickness: 文字の太さ(デフォルト: 1.0)
func DrawTriangleAA(x1 float32, y1 float32, x2 float32, y2 float32, x3 float32, y3 float32, color uint, fillFlag int, opt ...DrawTriangleAAOption) int {
	if dx_DrawTriangleAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	lineThickness := float32(1.0)
	if len(opt) > 0 && opt[0].LineThickness != nil {
		lineThickness = *opt[0].LineThickness
	}

	res, _, _ := dx_DrawTriangleAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), pfloat32(x3), pfloat32(y3), puint(color), pint(fillFlag), pfloat32(lineThickness))
	return int(res)
}

// DrawPixel 点を描画
//
// 引数
//   x, y: 座標
//   color: 点の色
func DrawPixel(x int, y int, color uint) int {
	if dx_DrawPixel == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixel.Call(pint(x), pint(y), puint(color))
	return int(res)
}

// GetPixel 指定点の色を取得
//
// 引数
//   x, y: 座標
func GetPixel(x int, y int) uint {
	if dx_GetPixel == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixel.Call(pint(x), pint(y))
	return uint(res)
}

// LoadGraphScreen 画像ファイルを読みこんで画面に表示する
//
// 引数
//   x, y: ロードした画像を描画する矩形の左上頂点の座標
//   graphName: ロードする画像ファイルパス
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効)
func LoadGraphScreen(x int, y int, graphName string, transFlag int) int {
	if dx_LoadGraphScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadGraphScreen.Call(pint(x), pint(y), pstring(graphName), pint(transFlag))
	return int(res)
}

// LoadGraph 画像ファイルのメモリへの読みこみ、及び動画ファイルのロード
//
// 引数
//   fileName: ファイルパス
//   notUse3DFlag: 3D機能を制限するか(デフォルト: FALSE)
func LoadGraph(fileName string, opt ...LoadGraphOption) int {
	if dx_LoadGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	notUse3DFlag := int(FALSE)
	if len(opt) > 0 && opt[0].NotUse3DFlag != nil {
		notUse3DFlag = *opt[0].NotUse3DFlag
	}

	res, _, _ := dx_LoadGraph.Call(pstring(fileName), pint(notUse3DFlag))
	return int(res)
}

// LoadDivGraph 画像ファイルのメモリへの分割読みこみ
//
// 引数
//   fileName: 画像ファイルパス
//   allnum: 画像の分割総数
//   xnum, ynum: 画像の横向きに対する分割数と縦に対する分割数
//   xsize, ysize: 分割された画像一つの大きさ
//   handleBuf: グラフィックハンドルを保存するバッファ
//   notUse3DFlag: 3D機能を制限するか(デフォルト: FALSE)
func LoadDivGraph(fileName string, allnum int, xnum int, ynum int, xsize int, ysize int, handleBuf []int, opt ...LoadDivGraphOption) int {
	if dx_LoadDivGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	notUse3DFlag := int(FALSE)
	if len(opt) > 0 && opt[0].NotUse3DFlag != nil {
		notUse3DFlag = *opt[0].NotUse3DFlag
	}

	res, _, _ := dx_LoadDivGraph.Call(pstring(fileName), pint(allnum), pint(xnum), pint(ynum), pint(xsize), pint(ysize), parrayint(handleBuf), pint(notUse3DFlag))
	return int(res)
}

// MakeGraph 空のグラフィックを作成する
//
// 引数
//   sizeX, sizeY: 作成する空グラフィックのサイズ
//   notUse3DFlag: 3D機能を制限するか(デフォルト: FALSE)
func MakeGraph(sizeX int, sizeY int, opt ...MakeGraphOption) int {
	if dx_MakeGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	notUse3DFlag := int(FALSE)
	if len(opt) > 0 && opt[0].NotUse3DFlag != nil {
		notUse3DFlag = *opt[0].NotUse3DFlag
	}

	res, _, _ := dx_MakeGraph.Call(pint(sizeX), pint(sizeY), pint(notUse3DFlag))
	return int(res)
}

// MakeScreen 描画対象にできるグラフィックを作成する
//
// 引数
//   sizeX, sizeY: 作成するグラフィックのサイズ
//  useAlphaChannel: 作成するグラフィックにアルファチャンネルを付けるかどうか(TRUE: つける)
func MakeScreen(sizeX int, sizeY int, useAlphaChannel int) int {
	if dx_MakeScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeScreen.Call(pint(sizeX), pint(sizeY), pint(useAlphaChannel))
	return int(res)
}

// SetCreateDrawValidGraphMultiSample 描画対象にできるグラフィックのマルチサンプリング設定を行う
func SetCreateDrawValidGraphMultiSample(samples int, quality int) int {
	if dx_SetCreateDrawValidGraphMultiSample == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateDrawValidGraphMultiSample.Call(pint(samples), pint(quality))
	return int(res)
}

// SetCreateGraphColorBitDepth 作成するグラフィックのビット深度を設定
//
// 引数
//   bitDepth: ビット震度(16 or 32)
func SetCreateGraphColorBitDepth(bitDepth int) int {
	if dx_SetCreateGraphColorBitDepth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateGraphColorBitDepth.Call(pint(bitDepth))
	return int(res)
}

// SetDrawValidFloatTypeGraphCreateFlag 描画可能な浮動小数点型のグラフィックを作成するかどうかの設定(デフォルト: FALSE)
func SetDrawValidFloatTypeGraphCreateFlag(flag int) int {
	if dx_SetDrawValidFloatTypeGraphCreateFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawValidFloatTypeGraphCreateFlag.Call(pint(flag))
	return int(res)
}

// SetCreateDrawValidGraphChannelNum 作成する描画可能なグラフィックのチャンネル数の設定
//
// 引数
//   channelNum: 作成する描画可能なグラフィックのチャンネル数(1, 2, or 4)
func SetCreateDrawValidGraphChannelNum(channelNum int) int {
	if dx_SetCreateDrawValidGraphChannelNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateDrawValidGraphChannelNum.Call(pint(channelNum))
	return int(res)
}

// SetUsePremulAlphaConvertLoad 読み込み時に画像を乗算済みα画像に変換するかを設定(デフォルト: FALSE)
func SetUsePremulAlphaConvertLoad(useFlag int) int {
	if dx_SetUsePremulAlphaConvertLoad == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUsePremulAlphaConvertLoad.Call(pint(useFlag))
	return int(res)
}

// DrawGraph メモリに読みこんだグラフィックの描画
//
// 引数
//   x, y: グラフィックを描画する領域の左上頂点の座標
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
func DrawGraph(x int, y int, grHandle int, transFlag int) int {
	if dx_DrawGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag))
	return int(res)
}

// DrawTurnGraph メモリに読みこんだグラフィックのＬＲ反転描画
//
// 引数
//   x, y: グラフィックを描画する領域の左上頂点の座標
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
func DrawTurnGraph(x int, y int, grHandle int, transFlag int) int {
	if dx_DrawTurnGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTurnGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag))
	return int(res)
}

// DrawExtendGraph メモリに読みこんだグラフィックの拡大縮小描画
func DrawExtendGraph(x1 int, y1 int, x2 int, y2 int, grHandle int, transFlag int) int {
	if dx_DrawExtendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawExtendGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(grHandle), pint(transFlag))
	return int(res)
}

// DrawRotaGraph メモリに読みこんだグラフィックの回転描画
//
// 引数
//   x, y: グラフィックを描画する領域の中心座標
//   extRate: 拡大率(1.0で等倍)
//   angle: 描画角度(ラジアン指定)
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
//   reverseXFlag: 画像の左右反転を行うか
//   reverseYFlag: 画像の上下反転を行うか
func DrawRotaGraph(x int, y int, extRate float64, angle float64, grHandle int, transFlag int, opt ...DrawRotaGraphOption) int {
	if dx_DrawRotaGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRotaGraph.Call(pint(x), pint(y), pfloat64(extRate), pfloat64(angle), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

// DrawRotaGraph2 メモリに読みこんだグラフィックの回転描画(回転中心指定あり)
//
// 引数
//   x, y: グラフィックを描画する領域の中心座標
//   cx, cy: 画像を回転描画する画像上の中心座標
//   extRate: 拡大率(1.0で等倍)
//   angle: 描画角度(ラジアン指定)
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
//   reverseXFlag: 画像の左右反転を行うか
//   reverseYFlag: 画像の上下反転を行うか
func DrawRotaGraph2(x int, y int, cx int, cy int, extRate float64, angle float64, grHandle int, transFlag int, opt ...DrawRotaGraph2Option) int {
	if dx_DrawRotaGraph2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRotaGraph2.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat64(extRate), pfloat64(angle), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

// DrawRotaGraph3 メモリに読みこんだグラフィックの回転描画(回転中心指定あり)
//
// 引数
//   x, y: グラフィックを描画する領域の中心座標
//   cx, cy: 画像を回転描画する画像上の中心座標
//   extRateX, exRateY: 拡大率(1.0で等倍)
//   angle: 描画角度(ラジアン指定)
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
//   reverseXFlag: 画像の左右反転を行うか
//   reverseYFlag: 画像の上下反転を行うか
func DrawRotaGraph3(x int, y int, cx int, cy int, extRateX float64, extRateY float64, angle float64, grHandle int, transFlag int, opt ...DrawRotaGraph3Option) int {
	if dx_DrawRotaGraph3 == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRotaGraph3.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat64(extRateX), pfloat64(extRateY), pfloat64(angle), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

func DrawRotaGraphFast(x int, y int, extRate float32, angle float32, grHandle int, transFlag int, opt ...DrawRotaGraphFastOption) int {
	if dx_DrawRotaGraphFast == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRotaGraphFast.Call(pint(x), pint(y), pfloat32(extRate), pfloat32(angle), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

func DrawRotaGraphFast2(x int, y int, cx int, cy int, extRate float32, angle float32, grHandle int, transFlag int, opt ...DrawRotaGraphFast2Option) int {
	if dx_DrawRotaGraphFast2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRotaGraphFast2.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat32(extRate), pfloat32(angle), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

func DrawRotaGraphFast3(x int, y int, cx int, cy int, extRateX float32, extRateY float32, angle float32, grHandle int, transFlag int, opt ...DrawRotaGraphFast3Option) int {
	if dx_DrawRotaGraphFast3 == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRotaGraphFast3.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat32(extRateX), pfloat32(extRateY), pfloat32(angle), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

// DrawModiGraph メモリに読みこんだグラフィックの自由変形描画
//
// 引数
//   x1, y1, x2, y2, x3, y3, x4, y4: x1から順に描画する画像の左上、右上、右下、左下の頂点の座標
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
func DrawModiGraph(x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, x4 int, y4 int, grHandle int, transFlag int) int {
	if dx_DrawModiGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawModiGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(x3), pint(y3), pint(x4), pint(y4), pint(grHandle), pint(transFlag))
	return int(res)
}

// DrawRectGraph グラフィックの指定矩形部分のみを描画
//
// 引数
//   destX, destY: グラフィックを描画する座標
//   srcX, srcY: 描画するグラフィック上の描画したい矩形の左上座標
//   width, height: 描画するグラフィックのサイズ
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
//   reverseXFlag: 画像の左右反転を行うか
//   reverseYFlag: 画像の上下反転を行うか
func DrawRectGraph(destX int, destY int, srcX int, srcY int, width int, height int, grHandle int, transFlag int, opt ...DrawRectGraphOption) int {
	if dx_DrawRectGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	reverseXFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseXFlag != nil {
		reverseXFlag = *opt[0].ReverseXFlag
	}
	reverseYFlag := int(FALSE)
	if len(opt) > 0 && opt[0].ReverseYFlag != nil {
		reverseYFlag = *opt[0].ReverseYFlag
	}

	res, _, _ := dx_DrawRectGraph.Call(pint(destX), pint(destY), pint(srcX), pint(srcY), pint(width), pint(height), pint(grHandle), pint(transFlag), pint(reverseXFlag), pint(reverseYFlag))
	return int(res)
}

// DerivationGraph 指定のグラフィックの指定部分だけを抜き出して新たなグラフィックを作成する
//
// 引数
//   srcX, secY: グラフィック中の抜き出したい矩形の左上座標
//   width, height: 抜き出すグラフィックのサイズ
//   srcGraphHandle: グラフィックハンドル
func DerivationGraph(srcX int, srcY int, width int, height int, srcGraphHandle int) int {
	if dx_DerivationGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DerivationGraph.Call(pint(srcX), pint(srcY), pint(width), pint(height), pint(srcGraphHandle))
	return int(res)
}

// GetDrawScreenGraph 描画先に設定されているグラフィック領域から指定領域のグラフィックを読みこむ
//
// 引数
//   x1, y1: 取得するグラフィック領域（矩形）の左上頂点の座標
//   x2, y2: 取得するグラフィック領域の右下頂点＋１の座標
//   grHandle: 取り込んだグラフィックを保存出来るサイズのグラフィックを持つハンドル
//   useClientFlag: デフォルト TRUE
func GetDrawScreenGraph(x1 int, y1 int, x2 int, y2 int, grHandle int, opt ...GetDrawScreenGraphOption) int {
	if dx_GetDrawScreenGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	useClientFlag := int(TRUE)
	if len(opt) > 0 && opt[0].UseClientFlag != nil {
		useClientFlag = *opt[0].UseClientFlag
	}

	res, _, _ := dx_GetDrawScreenGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(grHandle), pint(useClientFlag))
	return int(res)
}

// GetGraphSize グラフィックのサイズを得る
func GetGraphSize(grHandle int, sizeXBuf *int, sizeYBuf *int) int {
	if dx_GetGraphSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetGraphSize.Call(pint(grHandle), ppint(sizeXBuf), ppint(sizeYBuf))
	return int(res)
}

// InitGraph 読みこんだグラフィックデータをすべて削除する
//
// 引数
//   logOutFlag: デフォルト FALSE
func InitGraph(opt ...InitGraphOption) int {
	if dx_InitGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	logOutFlag := int(FALSE)
	if len(opt) > 0 && opt[0].LogOutFlag != nil {
		logOutFlag = *opt[0].LogOutFlag
	}

	res, _, _ := dx_InitGraph.Call(pint(logOutFlag))
	return int(res)
}

// DeleteGraph 指定のグラフィックをメモリ上から削除する
func DeleteGraph(grHandle int) int {
	if dx_DeleteGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteGraph.Call(pint(grHandle))
	return int(res)
}

// SetDrawMode 描画モードをセットする
//
// 引数
//   drawMode: 描画モード(DX_DRAWMODE_NEAREST: 標準 or DX_DRAWMODE_BILINEAR)
func SetDrawMode(drawMode int) int {
	if dx_SetDrawMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawMode.Call(pint(drawMode))
	return int(res)
}

// SetDrawBlendMode 描画の際のブレンドモードをセット
//
// 引数
//   blendMode: 描画ブレンドモード
//   pal: 描画ブレンドモードのパラメータ(0~255)
func SetDrawBlendMode(blendMode int, pal int) int {
	if dx_SetDrawBlendMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawBlendMode.Call(pint(blendMode), pint(pal))
	return int(res)
}

// SetDrawBright 描画輝度をセット
func SetDrawBright(redBright int, greenBright int, blueBright int) int {
	if dx_SetDrawBright == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawBright.Call(pint(redBright), pint(greenBright), pint(blueBright))
	return int(res)
}

// SetTransColor グラフィックに設定する透過色をセットする
func SetTransColor(red int, green int, blue int) int {
	if dx_SetTransColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetTransColor.Call(pint(red), pint(green), pint(blue))
	return int(res)
}

// LoadBlendGraph 画像ファイルからブレンド画像を読み込む
func LoadBlendGraph(fileName string) int {
	if dx_LoadBlendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadBlendGraph.Call(pstring(fileName))
	return int(res)
}

// DrawBlendGraph ブレンド画像と通常画像を合成して描画する
//
// 引数
//   x, y: 画像を描画する領域の左上端座標
//   grHandle: グラフィックハンドル
//   transFlag: 画像の透明度を有効にするかどうか(TRUE: 有効にする)
//   blendGraph: ブレンド画像ハンドル
//   borderParam: 境界位置(0~255)
//   borderRange: 境界幅(指定できる値は1, 64, 128, 255の４つ)
func DrawBlendGraph(x int, y int, grHandle int, transFlag int, blendGraph int, borderParam int, borderRange int) int {
	if dx_DrawBlendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBlendGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag), pint(blendGraph), pint(borderParam), pint(borderRange))
	return int(res)
}

// DrawString 文字列を描画
//
// 引数
//   x, y: 文字列を描画する領域の左上の座標
//   str: 文字列
//   color: 文字列の色
//   edgeColor: デフォルト 0
func DrawString(x int, y int, str string, color uint, opt ...DrawStringOption) int {
	if dx_DrawString == nil {
		panic("Please call dxlib.Init() at first")
	}

	edgeColor := uint(0)
	if len(opt) > 0 && opt[0].EdgeColor != nil {
		edgeColor = *opt[0].EdgeColor
	}

	res, _, _ := dx_DrawString.Call(pint(x), pint(y), pstring(str), puint(color), puint(edgeColor))
	return int(res)
}

// GetDrawStringWidth 描画した時の文字列の幅(ドット単位)を得る
//
// 引数
//  str: 文字列
//   strLen: 文字列長
//   vericalFlag: デフォルト FALSE
func GetDrawStringWidth(str string, strLen int, opt ...GetDrawStringWidthOption) int {
	if dx_GetDrawStringWidth == nil {
		panic("Please call dxlib.Init() at first")
	}

	vericalFlag := int(FALSE)
	if len(opt) > 0 && opt[0].VericalFlag != nil {
		vericalFlag = *opt[0].VericalFlag
	}

	res, _, _ := dx_GetDrawStringWidth.Call(pstring(str), pint(strLen), pint(vericalFlag))
	return int(res)
}

// SetFontSize フォントのサイズをセットする
func SetFontSize(fontSize int) int {
	if dx_SetFontSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontSize.Call(pint(fontSize))
	return int(res)
}

// SetFontThickness 描画する文字列の文字の太さをセットする
//
// 引数
//   thickPal: 文字の太さ(0~9, デフォルト 6)
func SetFontThickness(thickPal int) int {
	if dx_SetFontThickness == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontThickness.Call(pint(thickPal))
	return int(res)
}

// ChangeFont 文字列描画に使用するフォントを変更する
//
// 引数
//   fontName: フォント名
//   charSet: デフォルト -1
func ChangeFont(fontName string, opt ...ChangeFontOption) int {
	if dx_ChangeFont == nil {
		panic("Please call dxlib.Init() at first")
	}

	charSet := int(-1)
	if len(opt) > 0 && opt[0].CharSet != nil {
		charSet = *opt[0].CharSet
	}

	res, _, _ := dx_ChangeFont.Call(pstring(fontName), pint(charSet))
	return int(res)
}

// ChangeFontType 文字列描画に使用するフォントのタイプを変更する
func ChangeFontType(fontType int) int {
	if dx_ChangeFontType == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeFontType.Call(pint(fontType))
	return int(res)
}

// CreateFontToHandle 新しいフォントデータを作成
//
// 引数
//   fontName: 作成するフォント名(NULLにするとデフォルトのフォント)
//   size: サイズ(デフォルト -1)
//   thick:  太さ(デフォルト -1)
//   fontType: フォントタイプ(デフォルト -1)
//   charSet: デフォルト -1
//   edgeSize: デフォルト -1
//   italic: デフォルト FALSE
//   handle: デフォルト -1
func CreateFontToHandle(opt ...CreateFontToHandleOption) int {
	if dx_CreateFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	fontName := string("")
	if len(opt) > 0 && opt[0].FontName != nil {
		fontName = *opt[0].FontName
	}
	size := int(-1)
	if len(opt) > 0 && opt[0].Size != nil {
		size = *opt[0].Size
	}
	thick := int(-1)
	if len(opt) > 0 && opt[0].Thick != nil {
		thick = *opt[0].Thick
	}
	fontType := int(-1)
	if len(opt) > 0 && opt[0].FontType != nil {
		fontType = *opt[0].FontType
	}
	charSet := int(-1)
	if len(opt) > 0 && opt[0].CharSet != nil {
		charSet = *opt[0].CharSet
	}
	edgeSize := int(-1)
	if len(opt) > 0 && opt[0].EdgeSize != nil {
		edgeSize = *opt[0].EdgeSize
	}
	italic := int(FALSE)
	if len(opt) > 0 && opt[0].Italic != nil {
		italic = *opt[0].Italic
	}
	handle := int(-1)
	if len(opt) > 0 && opt[0].Handle != nil {
		handle = *opt[0].Handle
	}

	res, _, _ := dx_CreateFontToHandle.Call(pstring(fontName), pint(size), pint(thick), pint(fontType), pint(charSet), pint(edgeSize), pint(italic), pint(handle))
	return int(res)
}

// LoadFontDataToHandle DXフォントデータファイルを読み込む
//
// 引数
//   fileName: ファイル名
//   edgeSize: 成するフォントの縁の太さ(0を指定すると縁無し)
func LoadFontDataToHandle(fileName string, opt ...LoadFontDataToHandleOption) int {
	if dx_LoadFontDataToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	edgeSize := int(0)
	if len(opt) > 0 && opt[0].EdgeSize != nil {
		edgeSize = *opt[0].EdgeSize
	}

	res, _, _ := dx_LoadFontDataToHandle.Call(pstring(fileName), pint(edgeSize))
	return int(res)
}

// DeleteFontToHandle フォントデータを削除する
func DeleteFontToHandle(fontHandle int) int {
	if dx_DeleteFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteFontToHandle.Call(pint(fontHandle))
	return int(res)
}

// SetFontCacheUsePremulAlphaFlag 作成するフォントデータを『乗算済みα』用にするかどうかを設定する
func SetFontCacheUsePremulAlphaFlag(flag int) int {
	if dx_SetFontCacheUsePremulAlphaFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontCacheUsePremulAlphaFlag.Call(pint(flag))
	return int(res)
}

// DrawStringToHandle 指定のフォントデータで文字列を描画する
//
// 引数
//   x, y: 文字列を描画する起点座標
//   str: 文字列
//   color: 文字の色
//   fontHandle: 描画に使用するフォントハンドル
//   edgeColor: 縁の色(デフォルト 0)
//   verticalFlag: デフォルト FALSE
func DrawStringToHandle(x int, y int, str string, color uint, fontHandle int, opt ...DrawStringToHandleOption) int {
	if dx_DrawStringToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	edgeColor := int(0)
	if len(opt) > 0 && opt[0].EdgeColor != nil {
		edgeColor = *opt[0].EdgeColor
	}
	verticalFlag := int(FALSE)
	if len(opt) > 0 && opt[0].VerticalFlag != nil {
		verticalFlag = *opt[0].VerticalFlag
	}

	res, _, _ := dx_DrawStringToHandle.Call(pint(x), pint(y), pstring(str), puint(color), pint(fontHandle), pint(edgeColor), pint(verticalFlag))
	return int(res)
}

// GetDrawStringWidthToHandle 指定のフォントデータで描画する文字列の幅(ドット単位)を得る
//
// 引数
//   str: 文字列
//   strLen: 文字列長
//   fontHandle: フォントハンドル
//   verticalFlag: デフォルト FALSE
func GetDrawStringWidthToHandle(str string, strLen int, fontHandle int, opt ...GetDrawStringWidthToHandleOption) int {
	if dx_GetDrawStringWidthToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	verticalFlag := int(FALSE)
	if len(opt) > 0 && opt[0].VerticalFlag != nil {
		verticalFlag = *opt[0].VerticalFlag
	}

	res, _, _ := dx_GetDrawStringWidthToHandle.Call(pstring(str), pint(strLen), pint(fontHandle), pint(verticalFlag))
	return int(res)
}

// GetFontStateToHandle 指定のフォントデータの情報を得る
func GetFontStateToHandle(fontName string, size *int, thick *int, fontHandle int, fontType *int, charSet *int, edgeSize *int, italic *int) int {
	if dx_GetFontStateToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetFontStateToHandle.Call(pstring(fontName), ppint(size), ppint(thick), pint(fontHandle), ppint(fontType), ppint(charSet), ppint(edgeSize), ppint(italic))
	return int(res)
}

// InitFontToHandle フォントデータを全て初期化する
func InitFontToHandle() int {
	if dx_InitFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitFontToHandle.Call()
	return int(res)
}

// SetGraphMode 画面モードの変更
//
// 引数
//   sizeX, sizeY: 画面の解像度(デフォルト 640x480)
//   colorButNum: カラービット数(DXライブラリの標準色ビット数: 16)
//   refreshRate: デフォルト 60
func SetGraphMode(sizeX int, sizeY int, opt ...SetGraphModeOption) int {
	if dx_SetGraphMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	colorBitNum := int(16)
	if len(opt) > 0 && opt[0].ColorBitNum != nil {
		colorBitNum = *opt[0].ColorBitNum
	}
	refreshRate := int(60)
	if len(opt) > 0 && opt[0].RefreshRate != nil {
		refreshRate = *opt[0].RefreshRate
	}

	res, _, _ := dx_SetGraphMode.Call(pint(sizeX), pint(sizeY), pint(colorBitNum), pint(refreshRate))
	return int(res)
}

func SetFullScreenResolutionMode(resolutionMode int) int {
	if dx_SetFullScreenResolutionMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullScreenResolutionMode.Call(pint(resolutionMode))
	return int(res)
}

func SetFullScreenScalingMode(scalingMode int, fitScaling int) int {
	if dx_SetFullScreenScalingMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullScreenScalingMode.Call(pint(scalingMode), pint(fitScaling))
	return int(res)
}

func GetScreenState(sizeX *int, sizeY *int, colorBitDepth *int) int {
	if dx_GetScreenState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetScreenState.Call(ppint(sizeX), ppint(sizeY), ppint(colorBitDepth))
	return int(res)
}

func SetDrawArea(x1 int, y1 int, x2 int, y2 int) int {
	if dx_SetDrawArea == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawArea.Call(pint(x1), pint(y1), pint(x2), pint(y2))
	return int(res)
}

func SetBackgroundColor(red int, green int, blue int, alpha int) int {
	if dx_SetBackgroundColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetBackgroundColor.Call(pint(red), pint(green), pint(blue), pint(alpha))
	return int(res)
}

func GetColor(red int, green int, blue int) uint {
	if dx_GetColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetColor.Call(pint(red), pint(green), pint(blue))
	return uint(res)
}

func SetDrawScreen(drawScreen int) int {
	if dx_SetDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawScreen.Call(pint(drawScreen))
	return int(res)
}

func ScreenFlip() int {
	if dx_ScreenFlip == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ScreenFlip.Call()
	return int(res)
}

func SetFullSceneAntiAliasingMode(samples int, quality int) int {
	if dx_SetFullSceneAntiAliasingMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullSceneAntiAliasingMode.Call(pint(samples), pint(quality))
	return int(res)
}

func PlayMovie(fileName string, exRate int, playType int) int {
	if dx_PlayMovie == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMovie.Call(pstring(fileName), pint(exRate), pint(playType))
	return int(res)
}

func PlayMovieToGraph(graphHandle int, playType int, sysPlay int) int {
	if dx_PlayMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMovieToGraph.Call(pint(graphHandle), pint(playType), pint(sysPlay))
	return int(res)
}

func PauseMovieToGraph(graphHandle int, sysPause int) int {
	if dx_PauseMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PauseMovieToGraph.Call(pint(graphHandle), pint(sysPause))
	return int(res)
}

func SeekMovieToGraph(graphHandle int, time int) int {
	if dx_SeekMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SeekMovieToGraph.Call(pint(graphHandle), pint(time))
	return int(res)
}

func TellMovieToGraph(graphHandle int) int {
	if dx_TellMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_TellMovieToGraph.Call(pint(graphHandle))
	return int(res)
}

func GetMovieStateToGraph(graphHandle int) int {
	if dx_GetMovieStateToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMovieStateToGraph.Call(pint(graphHandle))
	return int(res)
}

func CreateMaskScreen() int {
	if dx_CreateMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateMaskScreen.Call()
	return int(res)
}

func DeleteMaskScreen() int {
	if dx_DeleteMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteMaskScreen.Call()
	return int(res)
}

func LoadMask(fileName string) int {
	if dx_LoadMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadMask.Call(pstring(fileName))
	return int(res)
}

func LoadDivMask(fileName string, allnum int, xnum int, ynum int, xsize int, ysize int, handleBuf []int) int {
	if dx_LoadDivMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadDivMask.Call(pstring(fileName), pint(allnum), pint(xnum), pint(ynum), pint(xsize), pint(ysize), parrayint(handleBuf))
	return int(res)
}

func DrawMask(x int, y int, maskHandle int, transMode int) int {
	if dx_DrawMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawMask.Call(pint(x), pint(y), pint(maskHandle), pint(transMode))
	return int(res)
}

func DrawFillMask(x1 int, y1 int, x2 int, y2 int, maskHandle int) int {
	if dx_DrawFillMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawFillMask.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(maskHandle))
	return int(res)
}

func DeleteMask(maskHandle int) int {
	if dx_DeleteMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteMask.Call(pint(maskHandle))
	return int(res)
}

func InitMask() int {
	if dx_InitMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitMask.Call()
	return int(res)
}

func FillMaskScreen(flag int) int {
	if dx_FillMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FillMaskScreen.Call(pint(flag))
	return int(res)
}

func SetUseMaskScreenFlag(validFlag int) int {
	if dx_SetUseMaskScreenFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseMaskScreenFlag.Call(pint(validFlag))
	return int(res)
}

func MakeMask(width int, height int) int {
	if dx_MakeMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeMask.Call(pint(width), pint(height))
	return int(res)
}

func GetMaskSize(widthBuf *int, heightBuf *int, maskHandle int) int {
	if dx_GetMaskSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMaskSize.Call(ppint(widthBuf), ppint(heightBuf), pint(maskHandle))
	return int(res)
}

func GetJoypadNum() int {
	if dx_GetJoypadNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadNum.Call()
	return int(res)
}

func GetJoypadInputState(inputType int) int {
	if dx_GetJoypadInputState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadInputState.Call(pint(inputType))
	return int(res)
}

func GetJoypadAnalogInput(xbuf *int, ybuf *int, inputType int) int {
	if dx_GetJoypadAnalogInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadAnalogInput.Call(ppint(xbuf), ppint(ybuf), pint(inputType))
	return int(res)
}

func SetJoypadDeadZone(inputType int, zone float64) int {
	if dx_SetJoypadDeadZone == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetJoypadDeadZone.Call(pint(inputType), pfloat64(zone))
	return int(res)
}

func StartJoypadVibration(inputType int, power int, time int) int {
	if dx_StartJoypadVibration == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StartJoypadVibration.Call(pint(inputType), pint(power), pint(time))
	return int(res)
}

func StopJoypadVibration(inputType int, effectIndex int) int {
	if dx_StopJoypadVibration == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopJoypadVibration.Call(pint(inputType), pint(effectIndex))
	return int(res)
}

func SetMouseDispFlag(dispFlag int) int {
	if dx_SetMouseDispFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMouseDispFlag.Call(pint(dispFlag))
	return int(res)
}

func GetMousePoint(xbuf *int, ybuf *int) int {
	if dx_GetMousePoint == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMousePoint.Call(ppint(xbuf), ppint(ybuf))
	return int(res)
}

func SetMousePoint(pointX int, pointY int) int {
	if dx_SetMousePoint == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMousePoint.Call(pint(pointX), pint(pointY))
	return int(res)
}

func GetMouseInput() int {
	if dx_GetMouseInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseInput.Call()
	return int(res)
}

func GetMouseInputLog2(button *int, clickX *int, clickY *int, logType *int, logDelete int) int {
	if dx_GetMouseInputLog2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseInputLog2.Call(ppint(button), ppint(clickX), ppint(clickY), ppint(logType), pint(logDelete))
	return int(res)
}

func GetMouseWheelRotVol(counterReset int) int {
	if dx_GetMouseWheelRotVol == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseWheelRotVol.Call(pint(counterReset))
	return int(res)
}

func GetTouchInputNum() int {
	if dx_GetTouchInputNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetTouchInputNum.Call()
	return int(res)
}

func GetTouchInput(inputNo int, positionX *int, positionY *int, id *int, device *int) int {
	if dx_GetTouchInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetTouchInput.Call(pint(inputNo), ppint(positionX), ppint(positionY), ppint(id), ppint(device))
	return int(res)
}

func CheckHitKeyAll(checkType int) int {
	if dx_CheckHitKeyAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHitKeyAll.Call(pint(checkType))
	return int(res)
}

func CheckHitKey(keyCode int) int {
	if dx_CheckHitKey == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHitKey.Call(pint(keyCode))
	return int(res)
}

func GetHitKeyStateAll(keyStateBuf []byte) int {
	if dx_GetHitKeyStateAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetHitKeyStateAll.Call(parraybyte(keyStateBuf))
	return int(res)
}

func GetInputChar(deleteFlag int) byte {
	if dx_GetInputChar == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetInputChar.Call(pint(deleteFlag))
	return byte(res)
}

func GetInputCharWait(deleteFlag int) byte {
	if dx_GetInputCharWait == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetInputCharWait.Call(pint(deleteFlag))
	return byte(res)
}

func ClearInputCharBuf() int {
	if dx_ClearInputCharBuf == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ClearInputCharBuf.Call()
	return int(res)
}

func KeyInputString(x int, y int, charMaxLength int, strBuffer string, cancelValidFlag int) int {
	if dx_KeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputString.Call(pint(x), pint(y), pint(charMaxLength), pstring(strBuffer), pint(cancelValidFlag))
	return int(res)
}

func KeyInputSingleCharString(x int, y int, charMaxLength int, strBuffer string, cancelValidFlag int) int {
	if dx_KeyInputSingleCharString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputSingleCharString.Call(pint(x), pint(y), pint(charMaxLength), pstring(strBuffer), pint(cancelValidFlag))
	return int(res)
}

func KeyInputNumber(x int, y int, maxNum int, minNum int, cancelValidFlag int) int {
	if dx_KeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputNumber.Call(pint(x), pint(y), pint(maxNum), pint(minNum), pint(cancelValidFlag))
	return int(res)
}

func SetKeyInputStringColor(nmlStr int, nmlCur int, imeStrBack int, imeCur int, imeLine int, imeSelectStr int, imeModeStr int, nmlStrE int, imeSelectStrE int, imeModeStrE int, imeSelectWinE int, imeSelectWinF int, selectStrBackColor int, selectStrColor int, selectStrEdgeColor int, imeStr int, imeStrE int) int {
	if dx_SetKeyInputStringColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputStringColor.Call(pint(nmlStr), pint(nmlCur), pint(imeStrBack), pint(imeCur), pint(imeLine), pint(imeSelectStr), pint(imeModeStr), pint(nmlStrE), pint(imeSelectStrE), pint(imeModeStrE), pint(imeSelectWinE), pint(imeSelectWinF), pint(selectStrBackColor), pint(selectStrColor), pint(selectStrEdgeColor), pint(imeStr), pint(imeStrE))
	return int(res)
}

func MakeKeyInput(maxStrLength int, cancelValidFlag int, singleCharOnlyFlag int, numCharOnlyFlag int, doubleCharOnlyFlag int, enableNewLineFlag int) int {
	if dx_MakeKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeKeyInput.Call(pint(maxStrLength), pint(cancelValidFlag), pint(singleCharOnlyFlag), pint(numCharOnlyFlag), pint(doubleCharOnlyFlag), pint(enableNewLineFlag))
	return int(res)
}

func DeleteKeyInput(inputHandle int) int {
	if dx_DeleteKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteKeyInput.Call(pint(inputHandle))
	return int(res)
}

func InitKeyInput() int {
	if dx_InitKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitKeyInput.Call()
	return int(res)
}

func SetActiveKeyInput(inputHandle int) int {
	if dx_SetActiveKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetActiveKeyInput.Call(pint(inputHandle))
	return int(res)
}

func CheckKeyInput(inputHandle int) int {
	if dx_CheckKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckKeyInput.Call(pint(inputHandle))
	return int(res)
}

func DrawKeyInputString(x int, y int, inputHandle int, drawCandidateList int) int {
	if dx_DrawKeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawKeyInputString.Call(pint(x), pint(y), pint(inputHandle), pint(drawCandidateList))
	return int(res)
}

func DrawKeyInputModeString(x int, y int) int {
	if dx_DrawKeyInputModeString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawKeyInputModeString.Call(pint(x), pint(y))
	return int(res)
}

func SetKeyInputString(str string, inputHandle int) int {
	if dx_SetKeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputString.Call(pstring(str), pint(inputHandle))
	return int(res)
}

func SetKeyInputNumber(number int, inputHandle int) int {
	if dx_SetKeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputNumber.Call(pint(number), pint(inputHandle))
	return int(res)
}

func GetKeyInputNumber(inputHandle int) int {
	if dx_GetKeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetKeyInputNumber.Call(pint(inputHandle))
	return int(res)
}

func PlaySoundFile(fileName string, playType int) int {
	if dx_PlaySoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlaySoundFile.Call(pstring(fileName), pint(playType))
	return int(res)
}

func CheckSoundFile() int {
	if dx_CheckSoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckSoundFile.Call()
	return int(res)
}

func StopSoundFile() int {
	if dx_StopSoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopSoundFile.Call()
	return int(res)
}

// LoadSoundMem 音ファイルをメモリに読みこむ
//
// 引数
//   fileName: ファイル名
//   bufferNum: デフォルト 3
//   unionHandle: デフォルト -1
func LoadSoundMem(fileName string, opt ...LoadSoundMemOption) int {
	if dx_LoadSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	bufferNum := int(3)
	if len(opt) > 0 && opt[0].BufferNum != nil {
		bufferNum = *opt[0].BufferNum
	}
	unionHandle := int(-1)
	if len(opt) > 0 && opt[0].UnionHandle != nil {
		unionHandle = *opt[0].UnionHandle
	}

	res, _, _ := dx_LoadSoundMem.Call(pstring(fileName), pint(bufferNum), pint(unionHandle))
	return int(res)
}

func PlaySoundMem(soundHandle int, playType int, topPositionFlag int) int {
	if dx_PlaySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlaySoundMem.Call(pint(soundHandle), pint(playType), pint(topPositionFlag))
	return int(res)
}

func CheckSoundMem(soundHandle int) int {
	if dx_CheckSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckSoundMem.Call(pint(soundHandle))
	return int(res)
}

func StopSoundMem(soundHandle int) int {
	if dx_StopSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopSoundMem.Call(pint(soundHandle))
	return int(res)
}

func DeleteSoundMem(soundHandle int, logOutFlag int) int {
	if dx_DeleteSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteSoundMem.Call(pint(soundHandle), pint(logOutFlag))
	return int(res)
}

func InitSoundMem(logOutFlag int) int {
	if dx_InitSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitSoundMem.Call(pint(logOutFlag))
	return int(res)
}

func ChangePanSoundMem(panPal int, soundHandle int) int {
	if dx_ChangePanSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangePanSoundMem.Call(pint(panPal), pint(soundHandle))
	return int(res)
}

func ChangeVolumeSoundMem(volumePan int, soundHandle int) int {
	if dx_ChangeVolumeSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeVolumeSoundMem.Call(pint(volumePan), pint(soundHandle))
	return int(res)
}

func ChangeNextPlayPanSoundMem(panPal int, soundHandle int) int {
	if dx_ChangeNextPlayPanSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeNextPlayPanSoundMem.Call(pint(panPal), pint(soundHandle))
	return int(res)
}

func ChangeNextPlayVolumeSoundMem(volumePal int, soundHandle int) int {
	if dx_ChangeNextPlayVolumeSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeNextPlayVolumeSoundMem.Call(pint(volumePal), pint(soundHandle))
	return int(res)
}

func SetFrequencySoundMem(frequencyPal int, soundHandle int) int {
	if dx_SetFrequencySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFrequencySoundMem.Call(pint(frequencyPal), pint(soundHandle))
	return int(res)
}

func SetLoopPosSoundMem(loopTime int, soundHandle int) int {
	if dx_SetLoopPosSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetLoopPosSoundMem.Call(pint(loopTime), pint(soundHandle))
	return int(res)
}

func SetLoopSamplePosSoundMem(loopSamplePosition int, soundHandle int) int {
	if dx_SetLoopSamplePosSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetLoopSamplePosSoundMem.Call(pint(loopSamplePosition), pint(soundHandle))
	return int(res)
}

func SetCurrentPositionSoundMem(samplePosition int, soundHandle int) int {
	if dx_SetCurrentPositionSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCurrentPositionSoundMem.Call(pint(samplePosition), pint(soundHandle))
	return int(res)
}

func DuplicateSoundMem(srcSoundHandle int, bufferNum int) int {
	if dx_DuplicateSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DuplicateSoundMem.Call(pint(srcSoundHandle), pint(bufferNum))
	return int(res)
}

func SetCreateSoundPitchRate(cents float32) int {
	if dx_SetCreateSoundPitchRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundPitchRate.Call(pfloat32(cents))
	return int(res)
}

func SetCreateSoundTimeStretchRate(rate float32) int {
	if dx_SetCreateSoundTimeStretchRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundTimeStretchRate.Call(pfloat32(rate))
	return int(res)
}

func Set3DPositionSoundMem(position VECTOR, soundHandle int) int {
	if dx_Set3DPositionSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPositionSoundMem.Call(pVECTOR(position), pint(soundHandle))
	return int(res)
}

func Set3DRadiusSoundMem(radius float32, soundHandle int) int {
	if dx_Set3DRadiusSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DRadiusSoundMem.Call(pfloat32(radius), pint(soundHandle))
	return int(res)
}

func Set3DVelocitySoundMem(velocity VECTOR, soundHandle int) int {
	if dx_Set3DVelocitySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DVelocitySoundMem.Call(pVECTOR(velocity), pint(soundHandle))
	return int(res)
}

func SetNextPlay3DPositionSoundMem(position VECTOR, soundHandle int) int {
	if dx_SetNextPlay3DPositionSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetNextPlay3DPositionSoundMem.Call(pVECTOR(position), pint(soundHandle))
	return int(res)
}

func SetNextPlay3DRadiusSoundMem(radius float32, soundHandle int) int {
	if dx_SetNextPlay3DRadiusSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetNextPlay3DRadiusSoundMem.Call(pfloat32(radius), pint(soundHandle))
	return int(res)
}

func SetNextPlay3DVelocitySoundMem(velocity VECTOR, soundHandle int) int {
	if dx_SetNextPlay3DVelocitySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetNextPlay3DVelocitySoundMem.Call(pVECTOR(velocity), pint(soundHandle))
	return int(res)
}

func Set3DPresetReverbParamSoundMem(presetNo int, soundHandle int) int {
	if dx_Set3DPresetReverbParamSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPresetReverbParamSoundMem.Call(pint(presetNo), pint(soundHandle))
	return int(res)
}

func Set3DPresetReverbParamSoundMemAll(presetNo int, playSoundOnly int) int {
	if dx_Set3DPresetReverbParamSoundMemAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPresetReverbParamSoundMemAll.Call(pint(presetNo), pint(playSoundOnly))
	return int(res)
}

func SetCreate3DSoundFlag(flag int) int {
	if dx_SetCreate3DSoundFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreate3DSoundFlag.Call(pint(flag))
	return int(res)
}

func SetEnableXAudioFlag(flag int) int {
	if dx_SetEnableXAudioFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetEnableXAudioFlag.Call(pint(flag))
	return int(res)
}

func Set3DSoundOneMetre(distance float32) int {
	if dx_Set3DSoundOneMetre == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DSoundOneMetre.Call(pfloat32(distance))
	return int(res)
}

func Set3DSoundListenerPosAndFrontPos_UpVecY(position VECTOR, frontPosition VECTOR) int {
	if dx_Set3DSoundListenerPosAndFrontPos_UpVecY == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DSoundListenerPosAndFrontPos_UpVecY.Call(pVECTOR(position), pVECTOR(frontPosition))
	return int(res)
}

func Set3DSoundListenerPosAndFrontPosAndUpVec(position VECTOR, frontPosition VECTOR, upVector VECTOR) int {
	if dx_Set3DSoundListenerPosAndFrontPosAndUpVec == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DSoundListenerPosAndFrontPosAndUpVec.Call(pVECTOR(position), pVECTOR(frontPosition), pVECTOR(upVector))
	return int(res)
}

func Set3DSoundListenerVelocity(velocity VECTOR) int {
	if dx_Set3DSoundListenerVelocity == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DSoundListenerVelocity.Call(pVECTOR(velocity))
	return int(res)
}

func PlayMusic(fileName string, playType int) int {
	if dx_PlayMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMusic.Call(pstring(fileName), pint(playType))
	return int(res)
}

func CheckMusic() int {
	if dx_CheckMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckMusic.Call()
	return int(res)
}

func StopMusic() int {
	if dx_StopMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopMusic.Call()
	return int(res)
}

func SetVolumeMusic(volume int) int {
	if dx_SetVolumeMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetVolumeMusic.Call(pint(volume))
	return int(res)
}

func WaitTimer(waitTime int) int {
	if dx_WaitTimer == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitTimer.Call(pint(waitTime))
	return int(res)
}

func WaitVSync(syncNum int) int {
	if dx_WaitVSync == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitVSync.Call(pint(syncNum))
	return int(res)
}

func WaitKey() int {
	if dx_WaitKey == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitKey.Call()
	return int(res)
}

// GetNowCount ミリ秒単位の精度を持つカウンタの現在値を得る
//
// 引数
//   useRDTSCFlag: デフォルト FALSE
func GetNowCount(opt ...GetNowCountOption) int {
	if dx_GetNowCount == nil {
		panic("Please call dxlib.Init() at first")
	}

	useRDTSCFlag := int(FALSE)
	if len(opt) > 0 && opt[0].UseRDTSCFlag != nil {
		useRDTSCFlag = *opt[0].UseRDTSCFlag
	}

	res, _, _ := dx_GetNowCount.Call(pint(useRDTSCFlag))
	return int(res)
}

// GetNowHiPerformanceCount GetNowCountの高精度バージョン
//
// 引数
//   useRDTSCFlag: デフォルト FALSE
func GetNowHiPerformanceCount(opt ...GetNowHiPerformanceCountOption) int64 {
	if dx_GetNowHiPerformanceCount == nil {
		panic("Please call dxlib.Init() at first")
	}

	useRDTSCFlag := int(FALSE)
	if len(opt) > 0 && opt[0].UseRDTSCFlag != nil {
		useRDTSCFlag = *opt[0].UseRDTSCFlag
	}

	res, _, _ := dx_GetNowHiPerformanceCount.Call(pint(useRDTSCFlag))
	return int64(res)
}

func GetRand(randMax int) int {
	if dx_GetRand == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetRand.Call(pint(randMax))
	return int(res)
}

func SRand(seed int) int {
	if dx_SRand == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SRand.Call(pint(seed))
	return int(res)
}

func ChangeWindowMode(flag int) int {
	if dx_ChangeWindowMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeWindowMode.Call(pint(flag))
	return int(res)
}

func SetMainWindowText(windowText string) int {
	if dx_SetMainWindowText == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMainWindowText.Call(pstring(windowText))
	return int(res)
}

func SetWindowIconID(id int) int {
	if dx_SetWindowIconID == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWindowIconID.Call(pint(id))
	return int(res)
}

func SetWindowSizeChangeEnableFlag(flag int, fitScreen int) int {
	if dx_SetWindowSizeChangeEnableFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWindowSizeChangeEnableFlag.Call(pint(flag), pint(fitScreen))
	return int(res)
}

func SetWindowSizeExtendRate(exRateX float64, exRateY float64) int {
	if dx_SetWindowSizeExtendRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWindowSizeExtendRate.Call(pfloat64(exRateX), pfloat64(exRateY))
	return int(res)
}

func FileRead_open(filePath string, async int) int {
	if dx_FileRead_open == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_open.Call(pstring(filePath), pint(async))
	return int(res)
}

func FileRead_size(filePath string) int64 {
	if dx_FileRead_size == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_size.Call(pstring(filePath))
	return int64(res)
}

func FileRead_close(fileHandle int) int {
	if dx_FileRead_close == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_close.Call(pint(fileHandle))
	return int(res)
}

func FileRead_tell(fileHandle int) int64 {
	if dx_FileRead_tell == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_tell.Call(pint(fileHandle))
	return int64(res)
}

func FileRead_seek(fileHandle int, offset int64, origin int) int {
	if dx_FileRead_seek == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_seek.Call(pint(fileHandle), pint64(offset), pint(origin))
	return int(res)
}

func FileRead_eof(fileHandle int) int {
	if dx_FileRead_eof == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_eof.Call(pint(fileHandle))
	return int(res)
}

func FileRead_gets(buffer []byte, num int, fileHandle int) int {
	if dx_FileRead_gets == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_gets.Call(parraybyte(buffer), pint(num), pint(fileHandle))
	return int(res)
}

func FileRead_getc(fileHandle int) int {
	if dx_FileRead_getc == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_getc.Call(pint(fileHandle))
	return int(res)
}

func LoadSoftImage(fileName string) int {
	if dx_LoadSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadSoftImage.Call(pstring(fileName))
	return int(res)
}

func LoadARGB8ColorSoftImage(fileName string) int {
	if dx_LoadARGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadARGB8ColorSoftImage.Call(pstring(fileName))
	return int(res)
}

func LoadXRGB8ColorSoftImage(fileName string) int {
	if dx_LoadXRGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadXRGB8ColorSoftImage.Call(pstring(fileName))
	return int(res)
}

func MakeARGB8ColorSoftImage(sizeX int, sizeY int) int {
	if dx_MakeARGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeARGB8ColorSoftImage.Call(pint(sizeX), pint(sizeY))
	return int(res)
}

func MakeXRGB8ColorSoftImage(sizeX int, sizeY int) int {
	if dx_MakeXRGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeXRGB8ColorSoftImage.Call(pint(sizeX), pint(sizeY))
	return int(res)
}

func MakePAL8ColorSoftImage(sizeX int, sizeY int, useAlpha int) int {
	if dx_MakePAL8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakePAL8ColorSoftImage.Call(pint(sizeX), pint(sizeY), pint(useAlpha))
	return int(res)
}

func DeleteSoftImage(siHandle int) int {
	if dx_DeleteSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteSoftImage.Call(pint(siHandle))
	return int(res)
}

func InitSoftImage() int {
	if dx_InitSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitSoftImage.Call()
	return int(res)
}

func GetSoftImageSize(siHandle int, width *int, height *int) int {
	if dx_GetSoftImageSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetSoftImageSize.Call(pint(siHandle), ppint(width), ppint(height))
	return int(res)
}

func FillSoftImage(siHandle int, r int, g int, b int, a int) int {
	if dx_FillSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FillSoftImage.Call(pint(siHandle), pint(r), pint(g), pint(b), pint(a))
	return int(res)
}

func SetPaletteSoftImage(siHandle int, paletteNo int, r int, g int, b int, a int) int {
	if dx_SetPaletteSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetPaletteSoftImage.Call(pint(siHandle), pint(paletteNo), pint(r), pint(g), pint(b), pint(a))
	return int(res)
}

func GetPaletteSoftImage(siHandle int, paletteNo int, r *int, g *int, b *int, a *int) int {
	if dx_GetPaletteSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPaletteSoftImage.Call(pint(siHandle), pint(paletteNo), ppint(r), ppint(g), ppint(b), ppint(a))
	return int(res)
}

func DrawPixelPalCodeSoftImage(siHandle int, x int, y int, palNo int) int {
	if dx_DrawPixelPalCodeSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixelPalCodeSoftImage.Call(pint(siHandle), pint(x), pint(y), pint(palNo))
	return int(res)
}

func GetPixelPalCodeSoftImage(siHandle int, x int, y int) int {
	if dx_GetPixelPalCodeSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixelPalCodeSoftImage.Call(pint(siHandle), pint(x), pint(y))
	return int(res)
}

func DrawPixelSoftImage(siHandle int, x int, y int, r int, g int, b int, a int) int {
	if dx_DrawPixelSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixelSoftImage.Call(pint(siHandle), pint(x), pint(y), pint(r), pint(g), pint(b), pint(a))
	return int(res)
}

func GetPixelSoftImage(siHandle int, x int, y int, r *int, g *int, b *int, a *int) int {
	if dx_GetPixelSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixelSoftImage.Call(pint(siHandle), pint(x), pint(y), ppint(r), ppint(g), ppint(b), ppint(a))
	return int(res)
}

func BltSoftImage(srcX int, srcY int, srcSizeX int, srcSizeY int, srcSIHandle int, destX int, destY int, destSIHandle int) int {
	if dx_BltSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_BltSoftImage.Call(pint(srcX), pint(srcY), pint(srcSizeX), pint(srcSizeY), pint(srcSIHandle), pint(destX), pint(destY), pint(destSIHandle))
	return int(res)
}

func DrawSoftImage(x int, y int, siHandle int) int {
	if dx_DrawSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawSoftImage.Call(pint(x), pint(y), pint(siHandle))
	return int(res)
}

func CreateGraphFromSoftImage(siHandle int) int {
	if dx_CreateGraphFromSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateGraphFromSoftImage.Call(pint(siHandle))
	return int(res)
}

func CreateDivGraphFromSoftImage(siHandle int, allnum int, xnum int, ynum int, sizeX int, sizeY int, handleBuf []int) int {
	if dx_CreateDivGraphFromSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateDivGraphFromSoftImage.Call(pint(siHandle), pint(allnum), pint(xnum), pint(ynum), pint(sizeX), pint(sizeY), parrayint(handleBuf))
	return int(res)
}

func SetUseASyncLoadFlag(flag int) int {
	if dx_SetUseASyncLoadFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseASyncLoadFlag.Call(pint(flag))
	return int(res)
}

func CheckHandleASyncLoad(handle int) int {
	if dx_CheckHandleASyncLoad == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHandleASyncLoad.Call(pint(handle))
	return int(res)
}

func GetASyncLoadNum() int {
	if dx_GetASyncLoadNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetASyncLoadNum.Call()
	return int(res)
}

func SetUseCharCodeFormat(charCodeFormat int) int {
	if dx_SetUseCharCodeFormat == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseCharCodeFormat.Call(pint(charCodeFormat))
	return int(res)
}

func SetAlwaysRunFlag(flag int) int {
	if dx_SetAlwaysRunFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetAlwaysRunFlag.Call(pint(flag))
	return int(res)
}

func SetOutApplicationLogValidFlag(flag int) int {
	if dx_SetOutApplicationLogValidFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetOutApplicationLogValidFlag.Call(pint(flag))
	return int(res)
}

func SetUseDXArchiveFlag(flag int) int {
	if dx_SetUseDXArchiveFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseDXArchiveFlag.Call(pint(flag))
	return int(res)
}

func SetDXArchiveExtension(extension string) int {
	if dx_SetDXArchiveExtension == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDXArchiveExtension.Call(pstring(extension))
	return int(res)
}

func SetDXArchiveKeyString(keyString string) int {
	if dx_SetDXArchiveKeyString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDXArchiveKeyString.Call(pstring(keyString))
	return int(res)
}

func SetEmulation320x240(flag int) int {
	if dx_SetEmulation320x240 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetEmulation320x240.Call(pint(flag))
	return int(res)
}

func SetUse3DFlag(flag int) int {
	if dx_SetUse3DFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUse3DFlag.Call(pint(flag))
	return int(res)
}

func SetWaitVSyncFlag(flag int) int {
	if dx_SetWaitVSyncFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWaitVSyncFlag.Call(pint(flag))
	return int(res)
}

func SetUseDivGraphFlag(flag int) int {
	if dx_SetUseDivGraphFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseDivGraphFlag.Call(pint(flag))
	return int(res)
}

func LoadPauseGraph(fileName string) int {
	if dx_LoadPauseGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadPauseGraph.Call(pstring(fileName))
	return int(res)
}

func ScreenCopy() int {
	if dx_ScreenCopy == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ScreenCopy.Call()
	return int(res)
}

func GetColorBitDepth() int {
	if dx_GetColorBitDepth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetColorBitDepth.Call()
	return int(res)
}

func SaveDrawScreen(x1 int, y1 int, x2 int, y2 int, fileName string, saveType int, jpegQuality int, jpegSample2x1 int, pngCompressionLevel int) int {
	if dx_SaveDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SaveDrawScreen.Call(pint(x1), pint(y1), pint(x2), pint(y2), pstring(fileName), pint(saveType), pint(jpegQuality), pint(jpegSample2x1), pint(pngCompressionLevel))
	return int(res)
}

func EnumFontName(nameBuffer []byte, nameBufferNum int, japanOnlyFlag int) int {
	if dx_EnumFontName == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_EnumFontName.Call(parraybyte(nameBuffer), pint(nameBufferNum), pint(japanOnlyFlag))
	return int(res)
}

func DrawVString(x int, y int, str string, color uint, edgeColor uint) int {
	if dx_DrawVString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawVString.Call(pint(x), pint(y), pstring(str), puint(color), puint(edgeColor))
	return int(res)
}

func DrawVStringToHandle(x int, y int, str string, color uint, fontHandle int, edgeColor uint) int {
	if dx_DrawVStringToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawVStringToHandle.Call(pint(x), pint(y), pstring(str), puint(color), pint(fontHandle), puint(edgeColor))
	return int(res)
}

func ReloadFileGraphAll() int {
	if dx_ReloadFileGraphAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ReloadFileGraphAll.Call()
	return int(res)
}

func SetCreateSoundDataType(soundDataType int) int {
	if dx_SetCreateSoundDataType == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundDataType.Call(pint(soundDataType))
	return int(res)
}

func SelectMidiMode(mode int) int {
	if dx_SelectMidiMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SelectMidiMode.Call(pint(mode))
	return int(res)
}

func RemoveFontFile(fontHandle *int) int {
	if dx_RemoveFontFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_RemoveFontFile.Call(ppint(fontHandle))
	return int(res)
}

func DrawFormatString(x int, y int, color uint, format string, a ...interface{}) int {
	str := fmt.Sprintf(format, a...)
	return DrawString(x, y, str, color)
}

func DrawFormatStringToHandle(x int, y int, color uint, fontHandle int, format string, a ...interface{}) int {
	str := fmt.Sprintf(format, a...)
	return DrawStringToHandle(x, y, str, color, fontHandle)
}

func ClearDrawScreen() int {
	temp := RECT{
		left:   -1,
		top:    -1,
		right:  -1,
		bottom: -1,
	}

	res, _, _ := dx_ClearDrawScreen.Call(uintptr(unsafe.Pointer(&temp)))
	return int(res)
}

func AddFontFile(fontFilePath string) *int {
	if dx_AddFontFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_AddFontFile.Call(pstring(fontFilePath))
	if res == 0 {
		return nil
	}
	return (*int)(unsafe.Pointer(&res))
}

func ppint(i *int) uintptr {
	return uintptr(unsafe.Pointer(i))
}

func pint(i int) uintptr {
	return uintptr(i)
}

func puint(ui uint) uintptr {
	return uintptr(ui)
}

func pfloat32(f float32) uintptr {
	return uintptr(math.Float32bits(f))
}

func pfloat64(f float64) uintptr {
	return uintptr(math.Float64bits(f))
}

func pint64(i int64) uintptr {
	return uintptr(i)
}

func parraybyte(b []byte) uintptr {
	return uintptr(unsafe.Pointer(&b[0]))
}

func parrayint(i []int) uintptr {
	return uintptr(unsafe.Pointer(&i[0]))
}

func pstring(str string) uintptr {
	sjisStr, _, err := transform.String(japanese.ShiftJIS.NewEncoder(), str)
	if err != nil {
		panic(err)
	}
	pbyte, err := syscall.BytePtrFromString(sjisStr)
	if err != nil {
		panic(err)
	}
	return uintptr(unsafe.Pointer(pbyte))
}

func pVECTOR(vec VECTOR) uintptr {
	return uintptr(unsafe.Pointer(&vec))
}
