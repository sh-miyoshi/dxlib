// Code generated by 'go generate'; DO NOT EDIT.

package dxlib

import (
	"fmt"
	"math"
	"syscall"
	"unsafe"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

var (
	dx_DxLib_Init                           *syscall.LazyProc
	dx_DxLib_End                            *syscall.LazyProc
	dx_ProcessMessage                       *syscall.LazyProc
	dx_DrawLine                             *syscall.LazyProc
	dx_DrawLineAA                           *syscall.LazyProc
	dx_DrawBox                              *syscall.LazyProc
	dx_DrawBoxAA                            *syscall.LazyProc
	dx_DrawCircle                           *syscall.LazyProc
	dx_DrawCircleAA                         *syscall.LazyProc
	dx_DrawOval                             *syscall.LazyProc
	dx_DrawOvalAA                           *syscall.LazyProc
	dx_DrawTriangle                         *syscall.LazyProc
	dx_DrawTriangleAA                       *syscall.LazyProc
	dx_DrawPixel                            *syscall.LazyProc
	dx_GetPixel                             *syscall.LazyProc
	dx_LoadGraphScreen                      *syscall.LazyProc
	dx_LoadGraph                            *syscall.LazyProc
	dx_LoadDivGraph                         *syscall.LazyProc
	dx_MakeGraph                            *syscall.LazyProc
	dx_MakeScreen                           *syscall.LazyProc
	dx_SetCreateDrawValidGraphMultiSample   *syscall.LazyProc
	dx_SetCreateGraphColorBitDepth          *syscall.LazyProc
	dx_SetDrawValidFloatTypeGraphCreateFlag *syscall.LazyProc
	dx_SetCreateDrawValidGraphChannelNum    *syscall.LazyProc
	dx_SetUsePremulAlphaConvertLoad         *syscall.LazyProc
	dx_DrawGraph                            *syscall.LazyProc
	dx_DrawTurnGraph                        *syscall.LazyProc
	dx_DrawExtendGraph                      *syscall.LazyProc
	dx_DrawRotaGraph                        *syscall.LazyProc
	dx_DrawRotaGraph2                       *syscall.LazyProc
	dx_DrawRotaGraph3                       *syscall.LazyProc
	dx_DrawModiGraph                        *syscall.LazyProc
	dx_DrawRectGraph                        *syscall.LazyProc
	dx_DerivationGraph                      *syscall.LazyProc
	dx_GetDrawScreenGraph                   *syscall.LazyProc
	dx_GetGraphiteSize                      *syscall.LazyProc
	dx_InitGraph                            *syscall.LazyProc
	dx_DeleteGraph                          *syscall.LazyProc
	dx_SetDrawMode                          *syscall.LazyProc
	dx_SetDrawBlendMode                     *syscall.LazyProc
	dx_SetDrawBright                        *syscall.LazyProc
	dx_SetTransColor                        *syscall.LazyProc
	dx_LoadBlendGraph                       *syscall.LazyProc
	dx_DrawBlendGraph                       *syscall.LazyProc
	dx_DrawString                           *syscall.LazyProc
	dx_GetDrawStringWidth                   *syscall.LazyProc
	dx_SetFontSize                          *syscall.LazyProc
	dx_SetFontThickness                     *syscall.LazyProc
	dx_ChangeFont                           *syscall.LazyProc
	dx_ChangeFontType                       *syscall.LazyProc
	dx_CreateFontToHandle                   *syscall.LazyProc
	dx_LoadFontDataToHandle                 *syscall.LazyProc
	dx_DeleteFontToHandle                   *syscall.LazyProc
	dx_SetFontCacheUsePremulAlphaFlag       *syscall.LazyProc
	dx_DrawStringToHandle                   *syscall.LazyProc
	dx_GetDrawStringWidthToHandle           *syscall.LazyProc
	dx_GetFontStateToHandle                 *syscall.LazyProc
	dx_InitFontToHandle                     *syscall.LazyProc
	dx_clsDx                                *syscall.LazyProc
	dx_SetGraphMode                         *syscall.LazyProc
	dx_SetFullScreenResolutionMode          *syscall.LazyProc
	dx_SetFullScreenScalingMode             *syscall.LazyProc
	dx_GetScreenState                       *syscall.LazyProc
	dx_SetDrawArea                          *syscall.LazyProc
	dx_ClearDrawScreen                      *syscall.LazyProc
	dx_SetBackgroundColor                   *syscall.LazyProc
	dx_GetColor                             *syscall.LazyProc
	dx_SetDrawScreen                        *syscall.LazyProc
	dx_ScreenFlip                           *syscall.LazyProc
	dx_SetFullSceneAntiAliasingMode         *syscall.LazyProc
	dx_PlayMovie                            *syscall.LazyProc
	dx_PlayMovieToGraph                     *syscall.LazyProc
	dx_PauseMovieToGraph                    *syscall.LazyProc
	dx_SeekMovieToGraph                     *syscall.LazyProc
	dx_TellMovieToGraph                     *syscall.LazyProc
	dx_GetMovieStateToGraph                 *syscall.LazyProc
	dx_CreateMaskScreen                     *syscall.LazyProc
	dx_DeleteMaskScreen                     *syscall.LazyProc
	dx_LoadMask                             *syscall.LazyProc
	dx_LoadDivMask                          *syscall.LazyProc
	dx_DrawMask                             *syscall.LazyProc
	dx_DrawFillMask                         *syscall.LazyProc
	dx_DeleteMask                           *syscall.LazyProc
	dx_InitMask                             *syscall.LazyProc
	dx_FillMaskScreen                       *syscall.LazyProc
	dx_SetUseMaskScreenFlag                 *syscall.LazyProc
	dx_MakeMask                             *syscall.LazyProc
	dx_GetMaskSize                          *syscall.LazyProc
	dx_GetJoypadNum                         *syscall.LazyProc
	dx_GetJoypadInputState                  *syscall.LazyProc
	dx_GetJoypadAnalogInput                 *syscall.LazyProc
	dx_SetJoypadDeadZone                    *syscall.LazyProc
	dx_StartJoypadVibration                 *syscall.LazyProc
	dx_StopJoypadVibration                  *syscall.LazyProc
	dx_SetMouseDispFlag                     *syscall.LazyProc
	dx_GetMousePoint                        *syscall.LazyProc
	dx_SetMousePoint                        *syscall.LazyProc
	dx_GetMouseInput                        *syscall.LazyProc
	dx_GetMouseInputLog2                    *syscall.LazyProc
	dx_GetMouseWheelRotVol                  *syscall.LazyProc
	dx_GetTouchInputNum                     *syscall.LazyProc
	dx_GetTouchInput                        *syscall.LazyProc
	dx_CheckHitKeyAll                       *syscall.LazyProc
	dx_CheckHitKey                          *syscall.LazyProc
	dx_GetHitKeyStateAll                    *syscall.LazyProc
	dx_GetInputChar                         *syscall.LazyProc
	dx_GetInputCharWait                     *syscall.LazyProc
	dx_ClearInputCharBuf                    *syscall.LazyProc
	dx_KeyInputString                       *syscall.LazyProc
	dx_KeyInputSingleCharString             *syscall.LazyProc
	dx_KeyInputNumber                       *syscall.LazyProc
	dx_SetKeyInputStringColor               *syscall.LazyProc
	dx_MakeKeyInput                         *syscall.LazyProc
	dx_DeleteKeyInput                       *syscall.LazyProc
	dx_InitKeyInput                         *syscall.LazyProc
	dx_SetActiveKeyInput                    *syscall.LazyProc
	dx_CheckKeyInput                        *syscall.LazyProc
	dx_DrawKeyInputString                   *syscall.LazyProc
	dx_DrawKeyInputModeString               *syscall.LazyProc
	dx_SetKeyInputString                    *syscall.LazyProc
	dx_SetKeyInputNumber                    *syscall.LazyProc
	dx_GetKeyInputNumber                    *syscall.LazyProc
	dx_PlaySoundFile                        *syscall.LazyProc
	dx_CheckSoundFile                       *syscall.LazyProc
	dx_StopSoundFile                        *syscall.LazyProc
	dx_LoadSoundMem                         *syscall.LazyProc
	dx_PlaySoundMem                         *syscall.LazyProc
	dx_CheckSoundMem                        *syscall.LazyProc
	dx_StopSoundMem                         *syscall.LazyProc
	dx_DeleteSoundMem                       *syscall.LazyProc
	dx_InitSoundMem                         *syscall.LazyProc
	dx_ChangePanSoundMem                    *syscall.LazyProc
	dx_ChangeVolumeSoundMem                 *syscall.LazyProc
	dx_ChangeNextPlayPanSoundMem            *syscall.LazyProc
	dx_ChangeNextPlayVolumeSoundMem         *syscall.LazyProc
	dx_SetFrequencySoundMem                 *syscall.LazyProc
	dx_SetLoopPosSoundMem                   *syscall.LazyProc
	dx_SetLoopSamplePosSoundMem             *syscall.LazyProc
	dx_SetCurrentPositionSoundMem           *syscall.LazyProc
	dx_DuplicateSoundMem                    *syscall.LazyProc
	dx_SetCreateSoundPitchRate              *syscall.LazyProc
	dx_SetCreateSoundTimeStretchRate        *syscall.LazyProc
	dx_Set3DRadiusSoundMem                  *syscall.LazyProc
	dx_SetNextPlay3DRadiusSoundMem          *syscall.LazyProc
	dx_Set3DPresetReverbParamSoundMem       *syscall.LazyProc
	dx_Set3DPresetReverbParamSoundMemAll    *syscall.LazyProc
	dx_SetCreate3DSoundFlag                 *syscall.LazyProc
	dx_SetEnableXAudioFlag                  *syscall.LazyProc
	dx_Set3DSoundOneMetre                   *syscall.LazyProc
	dx_PlayMusic                            *syscall.LazyProc
	dx_CheckMusic                           *syscall.LazyProc
	dx_StopMusic                            *syscall.LazyProc
	dx_SetVolumeMusic                       *syscall.LazyProc
	dx_WaitTimer                            *syscall.LazyProc
	dx_WaitVSync                            *syscall.LazyProc
	dx_WaitKey                              *syscall.LazyProc
	dx_GetNowCount                          *syscall.LazyProc
	dx_GetNowHiPerformanceCount             *syscall.LazyProc
	dx_GetRand                              *syscall.LazyProc
	dx_SRand                                *syscall.LazyProc
	dx_ChangeWindowMode                     *syscall.LazyProc
	dx_SetMainWindowText                    *syscall.LazyProc
	dx_SetWindowIconID                      *syscall.LazyProc
	dx_SetWindowSizeChangeEnableFlag        *syscall.LazyProc
	dx_SetWindowSizeExtendRate              *syscall.LazyProc
	dx_CloseNetWork                         *syscall.LazyProc
	dx_PreparationListenNetWork             *syscall.LazyProc
	dx_StopListenNetWork                    *syscall.LazyProc
	dx_GetNetWorkDataLength                 *syscall.LazyProc
	dx_GetNetWorkSendDataLength             *syscall.LazyProc
	dx_GetNewAcceptNetWork                  *syscall.LazyProc
	dx_GetLostNetWork                       *syscall.LazyProc
	dx_GetNetWorkAcceptState                *syscall.LazyProc
	dx_MakeUDPSocket                        *syscall.LazyProc
	dx_DeleteUDPSocket                      *syscall.LazyProc
	dx_CheckNetWorkRecvUDP                  *syscall.LazyProc
	dx_FileRead_open                        *syscall.LazyProc
	dx_FileRead_size                        *syscall.LazyProc
	dx_FileRead_close                       *syscall.LazyProc
	dx_FileRead_tell                        *syscall.LazyProc
	dx_FileRead_seek                        *syscall.LazyProc
	dx_FileRead_eof                         *syscall.LazyProc
	dx_FileRead_gets                        *syscall.LazyProc
	dx_FileRead_getc                        *syscall.LazyProc
	dx_LoadSoftImage                        *syscall.LazyProc
	dx_LoadARGB8ColorSoftImage              *syscall.LazyProc
	dx_LoadXRGB8ColorSoftImage              *syscall.LazyProc
	dx_MakeARGB8ColorSoftImage              *syscall.LazyProc
	dx_MakeXRGB8ColorSoftImage              *syscall.LazyProc
	dx_MakePAL8ColorSoftImage               *syscall.LazyProc
	dx_DeleteSoftImage                      *syscall.LazyProc
	dx_InitSoftImage                        *syscall.LazyProc
	dx_GetSoftImageSize                     *syscall.LazyProc
	dx_FillSoftImage                        *syscall.LazyProc
	dx_SetPaletteSoftImage                  *syscall.LazyProc
	dx_GetPaletteSoftImage                  *syscall.LazyProc
	dx_DrawPixelPalCodeSoftImage            *syscall.LazyProc
	dx_GetPixelPalCodeSoftImage             *syscall.LazyProc
	dx_DrawPixelSoftImage                   *syscall.LazyProc
	dx_GetPixelSoftImage                    *syscall.LazyProc
	dx_BltSoftImage                         *syscall.LazyProc
	dx_DrawSoftImage                        *syscall.LazyProc
	dx_CreateGraphFromSoftImage             *syscall.LazyProc
	dx_CreateDivGraphFromSoftImage          *syscall.LazyProc
	dx_SetUseASyncLoadFlag                  *syscall.LazyProc
	dx_CheckHandleASyncLoad                 *syscall.LazyProc
	dx_GetASyncLoadNum                      *syscall.LazyProc
	dx_SetUseCharCodeFormat                 *syscall.LazyProc
	dx_SetAlwaysRunFlag                     *syscall.LazyProc
	dx_SetOutApplicationLogValidFlag        *syscall.LazyProc
	dx_SetUseDXArchiveFlag                  *syscall.LazyProc
	dx_SetDXArchiveExtension                *syscall.LazyProc
	dx_SetDXArchiveKeyString                *syscall.LazyProc
	dx_SetEmulation320x240                  *syscall.LazyProc
	dx_SetUse3DFlag                         *syscall.LazyProc
	dx_SetWaitVSyncFlag                     *syscall.LazyProc
	dx_SetUseDivGraphFlag                   *syscall.LazyProc
	dx_LoadPauseGraph                       *syscall.LazyProc
	dx_ScreenCopy                           *syscall.LazyProc
	dx_GetColorBitDepth                     *syscall.LazyProc
	dx_SaveDrawScreen                       *syscall.LazyProc
	dx_EnumFontName                         *syscall.LazyProc
	dx_DrawVString                          *syscall.LazyProc
	dx_DrawVStringToHandle                  *syscall.LazyProc
	dx_ReloadFileGraphAll                   *syscall.LazyProc
	dx_SetCreateSoundDataType               *syscall.LazyProc
	dx_SelectMidiMode                       *syscall.LazyProc
	dx_DrawFormatString                     *syscall.LazyProc
	dx_DrawFormatStringToHandle             *syscall.LazyProc
)

func Init(dllFile string) {
	mod := syscall.NewLazyDLL(dllFile)

	dx_DxLib_Init = mod.NewProc("dx_DxLib_Init")
	dx_DxLib_End = mod.NewProc("dx_DxLib_End")
	dx_ProcessMessage = mod.NewProc("dx_ProcessMessage")
	dx_DrawLine = mod.NewProc("dx_DrawLine")
	dx_DrawLineAA = mod.NewProc("dx_DrawLineAA")
	dx_DrawBox = mod.NewProc("dx_DrawBox")
	dx_DrawBoxAA = mod.NewProc("dx_DrawBoxAA")
	dx_DrawCircle = mod.NewProc("dx_DrawCircle")
	dx_DrawCircleAA = mod.NewProc("dx_DrawCircleAA")
	dx_DrawOval = mod.NewProc("dx_DrawOval")
	dx_DrawOvalAA = mod.NewProc("dx_DrawOvalAA")
	dx_DrawTriangle = mod.NewProc("dx_DrawTriangle")
	dx_DrawTriangleAA = mod.NewProc("dx_DrawTriangleAA")
	dx_DrawPixel = mod.NewProc("dx_DrawPixel")
	dx_GetPixel = mod.NewProc("dx_GetPixel")
	dx_LoadGraphScreen = mod.NewProc("dx_LoadGraphScreen")
	dx_LoadGraph = mod.NewProc("dx_LoadGraph")
	dx_LoadDivGraph = mod.NewProc("dx_LoadDivGraph")
	dx_MakeGraph = mod.NewProc("dx_MakeGraph")
	dx_MakeScreen = mod.NewProc("dx_MakeScreen")
	dx_SetCreateDrawValidGraphMultiSample = mod.NewProc("dx_SetCreateDrawValidGraphMultiSample")
	dx_SetCreateGraphColorBitDepth = mod.NewProc("dx_SetCreateGraphColorBitDepth")
	dx_SetDrawValidFloatTypeGraphCreateFlag = mod.NewProc("dx_SetDrawValidFloatTypeGraphCreateFlag")
	dx_SetCreateDrawValidGraphChannelNum = mod.NewProc("dx_SetCreateDrawValidGraphChannelNum")
	dx_SetUsePremulAlphaConvertLoad = mod.NewProc("dx_SetUsePremulAlphaConvertLoad")
	dx_DrawGraph = mod.NewProc("dx_DrawGraph")
	dx_DrawTurnGraph = mod.NewProc("dx_DrawTurnGraph")
	dx_DrawExtendGraph = mod.NewProc("dx_DrawExtendGraph")
	dx_DrawRotaGraph = mod.NewProc("dx_DrawRotaGraph")
	dx_DrawRotaGraph2 = mod.NewProc("dx_DrawRotaGraph2")
	dx_DrawRotaGraph3 = mod.NewProc("dx_DrawRotaGraph3")
	dx_DrawModiGraph = mod.NewProc("dx_DrawModiGraph")
	dx_DrawRectGraph = mod.NewProc("dx_DrawRectGraph")
	dx_DerivationGraph = mod.NewProc("dx_DerivationGraph")
	dx_GetDrawScreenGraph = mod.NewProc("dx_GetDrawScreenGraph")
	dx_GetGraphiteSize = mod.NewProc("dx_GetGraphiteSize")
	dx_InitGraph = mod.NewProc("dx_InitGraph")
	dx_DeleteGraph = mod.NewProc("dx_DeleteGraph")
	dx_SetDrawMode = mod.NewProc("dx_SetDrawMode")
	dx_SetDrawBlendMode = mod.NewProc("dx_SetDrawBlendMode")
	dx_SetDrawBright = mod.NewProc("dx_SetDrawBright")
	dx_SetTransColor = mod.NewProc("dx_SetTransColor")
	dx_LoadBlendGraph = mod.NewProc("dx_LoadBlendGraph")
	dx_DrawBlendGraph = mod.NewProc("dx_DrawBlendGraph")
	dx_DrawString = mod.NewProc("dx_DrawString")
	dx_GetDrawStringWidth = mod.NewProc("dx_GetDrawStringWidth")
	dx_SetFontSize = mod.NewProc("dx_SetFontSize")
	dx_SetFontThickness = mod.NewProc("dx_SetFontThickness")
	dx_ChangeFont = mod.NewProc("dx_ChangeFont")
	dx_ChangeFontType = mod.NewProc("dx_ChangeFontType")
	dx_CreateFontToHandle = mod.NewProc("dx_CreateFontToHandle")
	dx_LoadFontDataToHandle = mod.NewProc("dx_LoadFontDataToHandle")
	dx_DeleteFontToHandle = mod.NewProc("dx_DeleteFontToHandle")
	dx_SetFontCacheUsePremulAlphaFlag = mod.NewProc("dx_SetFontCacheUsePremulAlphaFlag")
	dx_DrawStringToHandle = mod.NewProc("dx_DrawStringToHandle")
	dx_GetDrawStringWidthToHandle = mod.NewProc("dx_GetDrawStringWidthToHandle")
	dx_GetFontStateToHandle = mod.NewProc("dx_GetFontStateToHandle")
	dx_InitFontToHandle = mod.NewProc("dx_InitFontToHandle")
	dx_clsDx = mod.NewProc("dx_clsDx")
	dx_SetGraphMode = mod.NewProc("dx_SetGraphMode")
	dx_SetFullScreenResolutionMode = mod.NewProc("dx_SetFullScreenResolutionMode")
	dx_SetFullScreenScalingMode = mod.NewProc("dx_SetFullScreenScalingMode")
	dx_GetScreenState = mod.NewProc("dx_GetScreenState")
	dx_SetDrawArea = mod.NewProc("dx_SetDrawArea")
	dx_ClearDrawScreen = mod.NewProc("dx_ClearDrawScreen")
	dx_SetBackgroundColor = mod.NewProc("dx_SetBackgroundColor")
	dx_GetColor = mod.NewProc("dx_GetColor")
	dx_SetDrawScreen = mod.NewProc("dx_SetDrawScreen")
	dx_ScreenFlip = mod.NewProc("dx_ScreenFlip")
	dx_SetFullSceneAntiAliasingMode = mod.NewProc("dx_SetFullSceneAntiAliasingMode")
	dx_PlayMovie = mod.NewProc("dx_PlayMovie")
	dx_PlayMovieToGraph = mod.NewProc("dx_PlayMovieToGraph")
	dx_PauseMovieToGraph = mod.NewProc("dx_PauseMovieToGraph")
	dx_SeekMovieToGraph = mod.NewProc("dx_SeekMovieToGraph")
	dx_TellMovieToGraph = mod.NewProc("dx_TellMovieToGraph")
	dx_GetMovieStateToGraph = mod.NewProc("dx_GetMovieStateToGraph")
	dx_CreateMaskScreen = mod.NewProc("dx_CreateMaskScreen")
	dx_DeleteMaskScreen = mod.NewProc("dx_DeleteMaskScreen")
	dx_LoadMask = mod.NewProc("dx_LoadMask")
	dx_LoadDivMask = mod.NewProc("dx_LoadDivMask")
	dx_DrawMask = mod.NewProc("dx_DrawMask")
	dx_DrawFillMask = mod.NewProc("dx_DrawFillMask")
	dx_DeleteMask = mod.NewProc("dx_DeleteMask")
	dx_InitMask = mod.NewProc("dx_InitMask")
	dx_FillMaskScreen = mod.NewProc("dx_FillMaskScreen")
	dx_SetUseMaskScreenFlag = mod.NewProc("dx_SetUseMaskScreenFlag")
	dx_MakeMask = mod.NewProc("dx_MakeMask")
	dx_GetMaskSize = mod.NewProc("dx_GetMaskSize")
	dx_GetJoypadNum = mod.NewProc("dx_GetJoypadNum")
	dx_GetJoypadInputState = mod.NewProc("dx_GetJoypadInputState")
	dx_GetJoypadAnalogInput = mod.NewProc("dx_GetJoypadAnalogInput")
	dx_SetJoypadDeadZone = mod.NewProc("dx_SetJoypadDeadZone")
	dx_StartJoypadVibration = mod.NewProc("dx_StartJoypadVibration")
	dx_StopJoypadVibration = mod.NewProc("dx_StopJoypadVibration")
	dx_SetMouseDispFlag = mod.NewProc("dx_SetMouseDispFlag")
	dx_GetMousePoint = mod.NewProc("dx_GetMousePoint")
	dx_SetMousePoint = mod.NewProc("dx_SetMousePoint")
	dx_GetMouseInput = mod.NewProc("dx_GetMouseInput")
	dx_GetMouseInputLog2 = mod.NewProc("dx_GetMouseInputLog2")
	dx_GetMouseWheelRotVol = mod.NewProc("dx_GetMouseWheelRotVol")
	dx_GetTouchInputNum = mod.NewProc("dx_GetTouchInputNum")
	dx_GetTouchInput = mod.NewProc("dx_GetTouchInput")
	dx_CheckHitKeyAll = mod.NewProc("dx_CheckHitKeyAll")
	dx_CheckHitKey = mod.NewProc("dx_CheckHitKey")
	dx_GetHitKeyStateAll = mod.NewProc("dx_GetHitKeyStateAll")
	dx_GetInputChar = mod.NewProc("dx_GetInputChar")
	dx_GetInputCharWait = mod.NewProc("dx_GetInputCharWait")
	dx_ClearInputCharBuf = mod.NewProc("dx_ClearInputCharBuf")
	dx_KeyInputString = mod.NewProc("dx_KeyInputString")
	dx_KeyInputSingleCharString = mod.NewProc("dx_KeyInputSingleCharString")
	dx_KeyInputNumber = mod.NewProc("dx_KeyInputNumber")
	dx_SetKeyInputStringColor = mod.NewProc("dx_SetKeyInputStringColor")
	dx_MakeKeyInput = mod.NewProc("dx_MakeKeyInput")
	dx_DeleteKeyInput = mod.NewProc("dx_DeleteKeyInput")
	dx_InitKeyInput = mod.NewProc("dx_InitKeyInput")
	dx_SetActiveKeyInput = mod.NewProc("dx_SetActiveKeyInput")
	dx_CheckKeyInput = mod.NewProc("dx_CheckKeyInput")
	dx_DrawKeyInputString = mod.NewProc("dx_DrawKeyInputString")
	dx_DrawKeyInputModeString = mod.NewProc("dx_DrawKeyInputModeString")
	dx_SetKeyInputString = mod.NewProc("dx_SetKeyInputString")
	dx_SetKeyInputNumber = mod.NewProc("dx_SetKeyInputNumber")
	dx_GetKeyInputNumber = mod.NewProc("dx_GetKeyInputNumber")
	dx_PlaySoundFile = mod.NewProc("dx_PlaySoundFile")
	dx_CheckSoundFile = mod.NewProc("dx_CheckSoundFile")
	dx_StopSoundFile = mod.NewProc("dx_StopSoundFile")
	dx_LoadSoundMem = mod.NewProc("dx_LoadSoundMem")
	dx_PlaySoundMem = mod.NewProc("dx_PlaySoundMem")
	dx_CheckSoundMem = mod.NewProc("dx_CheckSoundMem")
	dx_StopSoundMem = mod.NewProc("dx_StopSoundMem")
	dx_DeleteSoundMem = mod.NewProc("dx_DeleteSoundMem")
	dx_InitSoundMem = mod.NewProc("dx_InitSoundMem")
	dx_ChangePanSoundMem = mod.NewProc("dx_ChangePanSoundMem")
	dx_ChangeVolumeSoundMem = mod.NewProc("dx_ChangeVolumeSoundMem")
	dx_ChangeNextPlayPanSoundMem = mod.NewProc("dx_ChangeNextPlayPanSoundMem")
	dx_ChangeNextPlayVolumeSoundMem = mod.NewProc("dx_ChangeNextPlayVolumeSoundMem")
	dx_SetFrequencySoundMem = mod.NewProc("dx_SetFrequencySoundMem")
	dx_SetLoopPosSoundMem = mod.NewProc("dx_SetLoopPosSoundMem")
	dx_SetLoopSamplePosSoundMem = mod.NewProc("dx_SetLoopSamplePosSoundMem")
	dx_SetCurrentPositionSoundMem = mod.NewProc("dx_SetCurrentPositionSoundMem")
	dx_DuplicateSoundMem = mod.NewProc("dx_DuplicateSoundMem")
	dx_SetCreateSoundPitchRate = mod.NewProc("dx_SetCreateSoundPitchRate")
	dx_SetCreateSoundTimeStretchRate = mod.NewProc("dx_SetCreateSoundTimeStretchRate")
	dx_Set3DRadiusSoundMem = mod.NewProc("dx_Set3DRadiusSoundMem")
	dx_SetNextPlay3DRadiusSoundMem = mod.NewProc("dx_SetNextPlay3DRadiusSoundMem")
	dx_Set3DPresetReverbParamSoundMem = mod.NewProc("dx_Set3DPresetReverbParamSoundMem")
	dx_Set3DPresetReverbParamSoundMemAll = mod.NewProc("dx_Set3DPresetReverbParamSoundMemAll")
	dx_SetCreate3DSoundFlag = mod.NewProc("dx_SetCreate3DSoundFlag")
	dx_SetEnableXAudioFlag = mod.NewProc("dx_SetEnableXAudioFlag")
	dx_Set3DSoundOneMetre = mod.NewProc("dx_Set3DSoundOneMetre")
	dx_PlayMusic = mod.NewProc("dx_PlayMusic")
	dx_CheckMusic = mod.NewProc("dx_CheckMusic")
	dx_StopMusic = mod.NewProc("dx_StopMusic")
	dx_SetVolumeMusic = mod.NewProc("dx_SetVolumeMusic")
	dx_WaitTimer = mod.NewProc("dx_WaitTimer")
	dx_WaitVSync = mod.NewProc("dx_WaitVSync")
	dx_WaitKey = mod.NewProc("dx_WaitKey")
	dx_GetNowCount = mod.NewProc("dx_GetNowCount")
	dx_GetNowHiPerformanceCount = mod.NewProc("dx_GetNowHiPerformanceCount")
	dx_GetRand = mod.NewProc("dx_GetRand")
	dx_SRand = mod.NewProc("dx_SRand")
	dx_ChangeWindowMode = mod.NewProc("dx_ChangeWindowMode")
	dx_SetMainWindowText = mod.NewProc("dx_SetMainWindowText")
	dx_SetWindowIconID = mod.NewProc("dx_SetWindowIconID")
	dx_SetWindowSizeChangeEnableFlag = mod.NewProc("dx_SetWindowSizeChangeEnableFlag")
	dx_SetWindowSizeExtendRate = mod.NewProc("dx_SetWindowSizeExtendRate")
	dx_CloseNetWork = mod.NewProc("dx_CloseNetWork")
	dx_PreparationListenNetWork = mod.NewProc("dx_PreparationListenNetWork")
	dx_StopListenNetWork = mod.NewProc("dx_StopListenNetWork")
	dx_GetNetWorkDataLength = mod.NewProc("dx_GetNetWorkDataLength")
	dx_GetNetWorkSendDataLength = mod.NewProc("dx_GetNetWorkSendDataLength")
	dx_GetNewAcceptNetWork = mod.NewProc("dx_GetNewAcceptNetWork")
	dx_GetLostNetWork = mod.NewProc("dx_GetLostNetWork")
	dx_GetNetWorkAcceptState = mod.NewProc("dx_GetNetWorkAcceptState")
	dx_MakeUDPSocket = mod.NewProc("dx_MakeUDPSocket")
	dx_DeleteUDPSocket = mod.NewProc("dx_DeleteUDPSocket")
	dx_CheckNetWorkRecvUDP = mod.NewProc("dx_CheckNetWorkRecvUDP")
	dx_FileRead_open = mod.NewProc("dx_FileRead_open")
	dx_FileRead_size = mod.NewProc("dx_FileRead_size")
	dx_FileRead_close = mod.NewProc("dx_FileRead_close")
	dx_FileRead_tell = mod.NewProc("dx_FileRead_tell")
	dx_FileRead_seek = mod.NewProc("dx_FileRead_seek")
	dx_FileRead_eof = mod.NewProc("dx_FileRead_eof")
	dx_FileRead_gets = mod.NewProc("dx_FileRead_gets")
	dx_FileRead_getc = mod.NewProc("dx_FileRead_getc")
	dx_LoadSoftImage = mod.NewProc("dx_LoadSoftImage")
	dx_LoadARGB8ColorSoftImage = mod.NewProc("dx_LoadARGB8ColorSoftImage")
	dx_LoadXRGB8ColorSoftImage = mod.NewProc("dx_LoadXRGB8ColorSoftImage")
	dx_MakeARGB8ColorSoftImage = mod.NewProc("dx_MakeARGB8ColorSoftImage")
	dx_MakeXRGB8ColorSoftImage = mod.NewProc("dx_MakeXRGB8ColorSoftImage")
	dx_MakePAL8ColorSoftImage = mod.NewProc("dx_MakePAL8ColorSoftImage")
	dx_DeleteSoftImage = mod.NewProc("dx_DeleteSoftImage")
	dx_InitSoftImage = mod.NewProc("dx_InitSoftImage")
	dx_GetSoftImageSize = mod.NewProc("dx_GetSoftImageSize")
	dx_FillSoftImage = mod.NewProc("dx_FillSoftImage")
	dx_SetPaletteSoftImage = mod.NewProc("dx_SetPaletteSoftImage")
	dx_GetPaletteSoftImage = mod.NewProc("dx_GetPaletteSoftImage")
	dx_DrawPixelPalCodeSoftImage = mod.NewProc("dx_DrawPixelPalCodeSoftImage")
	dx_GetPixelPalCodeSoftImage = mod.NewProc("dx_GetPixelPalCodeSoftImage")
	dx_DrawPixelSoftImage = mod.NewProc("dx_DrawPixelSoftImage")
	dx_GetPixelSoftImage = mod.NewProc("dx_GetPixelSoftImage")
	dx_BltSoftImage = mod.NewProc("dx_BltSoftImage")
	dx_DrawSoftImage = mod.NewProc("dx_DrawSoftImage")
	dx_CreateGraphFromSoftImage = mod.NewProc("dx_CreateGraphFromSoftImage")
	dx_CreateDivGraphFromSoftImage = mod.NewProc("dx_CreateDivGraphFromSoftImage")
	dx_SetUseASyncLoadFlag = mod.NewProc("dx_SetUseASyncLoadFlag")
	dx_CheckHandleASyncLoad = mod.NewProc("dx_CheckHandleASyncLoad")
	dx_GetASyncLoadNum = mod.NewProc("dx_GetASyncLoadNum")
	dx_SetUseCharCodeFormat = mod.NewProc("dx_SetUseCharCodeFormat")
	dx_SetAlwaysRunFlag = mod.NewProc("dx_SetAlwaysRunFlag")
	dx_SetOutApplicationLogValidFlag = mod.NewProc("dx_SetOutApplicationLogValidFlag")
	dx_SetUseDXArchiveFlag = mod.NewProc("dx_SetUseDXArchiveFlag")
	dx_SetDXArchiveExtension = mod.NewProc("dx_SetDXArchiveExtension")
	dx_SetDXArchiveKeyString = mod.NewProc("dx_SetDXArchiveKeyString")
	dx_SetEmulation320x240 = mod.NewProc("dx_SetEmulation320x240")
	dx_SetUse3DFlag = mod.NewProc("dx_SetUse3DFlag")
	dx_SetWaitVSyncFlag = mod.NewProc("dx_SetWaitVSyncFlag")
	dx_SetUseDivGraphFlag = mod.NewProc("dx_SetUseDivGraphFlag")
	dx_LoadPauseGraph = mod.NewProc("dx_LoadPauseGraph")
	dx_ScreenCopy = mod.NewProc("dx_ScreenCopy")
	dx_GetColorBitDepth = mod.NewProc("dx_GetColorBitDepth")
	dx_SaveDrawScreen = mod.NewProc("dx_SaveDrawScreen")
	dx_EnumFontName = mod.NewProc("dx_EnumFontName")
	dx_DrawVString = mod.NewProc("dx_DrawVString")
	dx_DrawVStringToHandle = mod.NewProc("dx_DrawVStringToHandle")
	dx_ReloadFileGraphAll = mod.NewProc("dx_ReloadFileGraphAll")
	dx_SetCreateSoundDataType = mod.NewProc("dx_SetCreateSoundDataType")
	dx_SelectMidiMode = mod.NewProc("dx_SelectMidiMode")
	dx_DrawFormatString = mod.NewProc("dx_DrawFormatString")
	dx_DrawFormatStringToHandle = mod.NewProc("dx_DrawFormatStringToHandle")

}

func DxLib_Init() int32 {
	if dx_DxLib_Init == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DxLib_Init.Call()
	return int32(res)
}

func DxLib_End() int32 {
	if dx_DxLib_End == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DxLib_End.Call()
	return int32(res)
}

func ProcessMessage() int32 {
	if dx_ProcessMessage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ProcessMessage.Call()
	return int32(res)
}

func DrawLine(x1 int32, y1 int32, x2 int32, y2 int32, color uint32) int32 {
	if dx_DrawLine == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawLine.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), puint32(color))
	return int32(res)
}

func DrawLineAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint32) int32 {
	if dx_DrawLineAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawLineAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint32(color))
	return int32(res)
}

func DrawBox(x1 int32, y1 int32, x2 int32, y2 int32, color uint32, fillFlag int32) int32 {
	if dx_DrawBox == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBox.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawBoxAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint32, fillFlag int32) int32 {
	if dx_DrawBoxAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBoxAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawCircle(x int32, y int32, r int32, color uint32, fillFlag int32) int32 {
	if dx_DrawCircle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawCircle.Call(pint32(x), pint32(y), pint32(r), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawCircleAA(x float32, y float32, r float32, posnum int32, color uint32, fillFlag int32) int32 {
	if dx_DrawCircleAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawCircleAA.Call(pfloat32(x), pfloat32(y), pfloat32(r), pint32(posnum), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawOval(x int32, y int32, rx int32, ry int32, color uint32, fillFlag int32) int32 {
	if dx_DrawOval == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawOval.Call(pint32(x), pint32(y), pint32(rx), pint32(ry), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawOvalAA(x float32, y float32, rx float32, ry float32, posnum int32, color uint32, fillFlag int32) int32 {
	if dx_DrawOvalAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawOvalAA.Call(pfloat32(x), pfloat32(y), pfloat32(rx), pfloat32(ry), pint32(posnum), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawTriangle(x1 int32, y1 int32, x2 int32, y2 int32, x3 int32, y3 int32, color uint32, fillFlag int32) int32 {
	if dx_DrawTriangle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTriangle.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), pint32(x3), pint32(y3), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawTriangleAA(x1 float32, y1 float32, x2 float32, y2 float32, x3 float32, y3 float32, color uint32, fillFlag int32) int32 {
	if dx_DrawTriangleAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTriangleAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), pfloat32(x3), pfloat32(y3), puint32(color), pint32(fillFlag))
	return int32(res)
}

func DrawPixel(x int32, y int32, color uint32) int32 {
	if dx_DrawPixel == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixel.Call(pint32(x), pint32(y), puint32(color))
	return int32(res)
}

func GetPixel(x int32, y int32) uint32 {
	if dx_GetPixel == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixel.Call(pint32(x), pint32(y))
	return uint32(res)
}

func LoadGraphScreen(x int32, y int32, graphName string, transFlag int32) int32 {
	if dx_LoadGraphScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadGraphScreen.Call(pint32(x), pint32(y), pstring(graphName), pint32(transFlag))
	return int32(res)
}

func LoadGraph(fileName string) int32 {
	if dx_LoadGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadGraph.Call(pstring(fileName))
	return int32(res)
}

func LoadDivGraph(fileName string, allnum int32, xnum int32, ynum int32, xsize int32, ysize int32, handleBuf []int32) int32 {
	if dx_LoadDivGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadDivGraph.Call(pstring(fileName), pint32(allnum), pint32(xnum), pint32(ynum), pint32(xsize), pint32(ysize), parrayint32(handleBuf))
	return int32(res)
}

func MakeGraph(sizeX int32, sizeY int32) int32 {
	if dx_MakeGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeGraph.Call(pint32(sizeX), pint32(sizeY))
	return int32(res)
}

func MakeScreen(sizeX int32, sizeY int32, useAlphaChannel int32) int32 {
	if dx_MakeScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeScreen.Call(pint32(sizeX), pint32(sizeY), pint32(useAlphaChannel))
	return int32(res)
}

func SetCreateDrawValidGraphMultiSample(samples int32, quality int32) int32 {
	if dx_SetCreateDrawValidGraphMultiSample == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateDrawValidGraphMultiSample.Call(pint32(samples), pint32(quality))
	return int32(res)
}

func SetCreateGraphColorBitDepth(bitDepth int32) int32 {
	if dx_SetCreateGraphColorBitDepth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateGraphColorBitDepth.Call(pint32(bitDepth))
	return int32(res)
}

func SetDrawValidFloatTypeGraphCreateFlag(flag int32) int32 {
	if dx_SetDrawValidFloatTypeGraphCreateFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawValidFloatTypeGraphCreateFlag.Call(pint32(flag))
	return int32(res)
}

func SetCreateDrawValidGraphChannelNum(channelNum int32) int32 {
	if dx_SetCreateDrawValidGraphChannelNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateDrawValidGraphChannelNum.Call(pint32(channelNum))
	return int32(res)
}

func SetUsePremulAlphaConvertLoad(useFlag int32) int32 {
	if dx_SetUsePremulAlphaConvertLoad == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUsePremulAlphaConvertLoad.Call(pint32(useFlag))
	return int32(res)
}

func DrawGraph(x int32, y int32, grHandle int32, transFlag int32) int32 {
	if dx_DrawGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawGraph.Call(pint32(x), pint32(y), pint32(grHandle), pint32(transFlag))
	return int32(res)
}

func DrawTurnGraph(x int32, y int32, grHandle int32, transFlag int32) int32 {
	if dx_DrawTurnGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTurnGraph.Call(pint32(x), pint32(y), pint32(grHandle), pint32(transFlag))
	return int32(res)
}

func DrawExtendGraph(x1 int32, y1 int32, x2 int32, y2 int32, grHandle int32, transFlag int32) int32 {
	if dx_DrawExtendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawExtendGraph.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), pint32(grHandle), pint32(transFlag))
	return int32(res)
}

func DrawRotaGraph(x int32, y int32, extRate float64, angle float64, grHandle int32, transFlag int32, reverseXFlag int32, reverseYFlag int32) int32 {
	if dx_DrawRotaGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRotaGraph.Call(pint32(x), pint32(y), pfloat64(extRate), pfloat64(angle), pint32(grHandle), pint32(transFlag), pint32(reverseXFlag), pint32(reverseYFlag))
	return int32(res)
}

func DrawRotaGraph2(x int32, y int32, cx int32, cy int32, extRate float64, angle float64, grHandle int32, transFlag int32, reverseXFlag int32, reverseYFlag int32) int32 {
	if dx_DrawRotaGraph2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRotaGraph2.Call(pint32(x), pint32(y), pint32(cx), pint32(cy), pfloat64(extRate), pfloat64(angle), pint32(grHandle), pint32(transFlag), pint32(reverseXFlag), pint32(reverseYFlag))
	return int32(res)
}

func DrawRotaGraph3(x int32, y int32, cx int32, cy int32, extRateX float64, extRateY float64, angle float64, grHandle int32, transFlag int32, reverseXFlag int32, reverseYFlag int32) int32 {
	if dx_DrawRotaGraph3 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRotaGraph3.Call(pint32(x), pint32(y), pint32(cx), pint32(cy), pfloat64(extRateX), pfloat64(extRateY), pfloat64(angle), pint32(grHandle), pint32(transFlag), pint32(reverseXFlag), pint32(reverseYFlag))
	return int32(res)
}

func DrawModiGraph(x1 int32, y1 int32, x2 int32, y2 int32, x3 int32, y3 int32, x4 int32, y4 int32, grHandle int32, transFlag int32) int32 {
	if dx_DrawModiGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawModiGraph.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), pint32(x3), pint32(y3), pint32(x4), pint32(y4), pint32(grHandle), pint32(transFlag))
	return int32(res)
}

func DrawRectGraph(destX int32, destY int32, srcX int32, srcY int32, width int32, height int32, graphHandle int32, transFlag int32, reverseXFlag int32, reverseYFlag int32) int32 {
	if dx_DrawRectGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRectGraph.Call(pint32(destX), pint32(destY), pint32(srcX), pint32(srcY), pint32(width), pint32(height), pint32(graphHandle), pint32(transFlag), pint32(reverseXFlag), pint32(reverseYFlag))
	return int32(res)
}

func DerivationGraph(srcX int32, srcY int32, width int32, height int32, srcGraphHandle int32) int32 {
	if dx_DerivationGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DerivationGraph.Call(pint32(srcX), pint32(srcY), pint32(width), pint32(height), pint32(srcGraphHandle))
	return int32(res)
}

func GetDrawScreenGraph(x1 int32, y1 int32, x2 int32, y2 int32, grHandle int32) int32 {
	if dx_GetDrawScreenGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetDrawScreenGraph.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), pint32(grHandle))
	return int32(res)
}

func GetGraphiteSize(grHandle int32, sizeXBuf *int32, sizeYBuf *int32) int32 {
	if dx_GetGraphiteSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetGraphiteSize.Call(pint32(grHandle), ppint32(sizeXBuf), ppint32(sizeYBuf))
	return int32(res)
}

func InitGraph() int32 {
	if dx_InitGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitGraph.Call()
	return int32(res)
}

func DeleteGraph(grHandle int32) int32 {
	if dx_DeleteGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteGraph.Call(pint32(grHandle))
	return int32(res)
}

func SetDrawMode(drawMode int32) int32 {
	if dx_SetDrawMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawMode.Call(pint32(drawMode))
	return int32(res)
}

func SetDrawBlendMode(blendMode int32, pal int32) int32 {
	if dx_SetDrawBlendMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawBlendMode.Call(pint32(blendMode), pint32(pal))
	return int32(res)
}

func SetDrawBright(redBright int32, greenBright int32, blueBright int32) int32 {
	if dx_SetDrawBright == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawBright.Call(pint32(redBright), pint32(greenBright), pint32(blueBright))
	return int32(res)
}

func SetTransColor(red int32, green int32, blue int32) int32 {
	if dx_SetTransColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetTransColor.Call(pint32(red), pint32(green), pint32(blue))
	return int32(res)
}

func LoadBlendGraph(fileName string) int32 {
	if dx_LoadBlendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadBlendGraph.Call(pstring(fileName))
	return int32(res)
}

func DrawBlendGraph(x int32, y int32, grHandle int32, transFlag int32, blendGraph int32, borderParam int32, borderRange int32) int32 {
	if dx_DrawBlendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBlendGraph.Call(pint32(x), pint32(y), pint32(grHandle), pint32(transFlag), pint32(blendGraph), pint32(borderParam), pint32(borderRange))
	return int32(res)
}

func DrawString(x int32, y int32, str string, color uint32) int32 {
	if dx_DrawString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawString.Call(pint32(x), pint32(y), pstring(str), puint32(color))
	return int32(res)
}

func GetDrawStringWidth(str string, strLen int32) int32 {
	if dx_GetDrawStringWidth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetDrawStringWidth.Call(pstring(str), pint32(strLen))
	return int32(res)
}

func SetFontSize(fontSize int32) int32 {
	if dx_SetFontSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontSize.Call(pint32(fontSize))
	return int32(res)
}

func SetFontThickness(tinckPal int32) int32 {
	if dx_SetFontThickness == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontThickness.Call(pint32(tinckPal))
	return int32(res)
}

func ChangeFont(fontName string) int32 {
	if dx_ChangeFont == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeFont.Call(pstring(fontName))
	return int32(res)
}

func ChangeFontType(fontType int32) int32 {
	if dx_ChangeFontType == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeFontType.Call(pint32(fontType))
	return int32(res)
}

func CreateFontToHandle(fontName string, size int32, thick int32, fontType int32) int32 {
	if dx_CreateFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateFontToHandle.Call(pstring(fontName), pint32(size), pint32(thick), pint32(fontType))
	return int32(res)
}

func LoadFontDataToHandle(fileName string, edgeSize int32) int32 {
	if dx_LoadFontDataToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadFontDataToHandle.Call(pstring(fileName), pint32(edgeSize))
	return int32(res)
}

func DeleteFontToHandle(fontHandle int32) int32 {
	if dx_DeleteFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteFontToHandle.Call(pint32(fontHandle))
	return int32(res)
}

func SetFontCacheUsePremulAlphaFlag(flag int32) int32 {
	if dx_SetFontCacheUsePremulAlphaFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontCacheUsePremulAlphaFlag.Call(pint32(flag))
	return int32(res)
}

func DrawStringToHandle(x int32, y int32, str string, color uint32, fontHandle int32) int32 {
	if dx_DrawStringToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawStringToHandle.Call(pint32(x), pint32(y), pstring(str), puint32(color), pint32(fontHandle))
	return int32(res)
}

func GetDrawStringWidthToHandle(str string, strLen int32, fontHandle int32) int32 {
	if dx_GetDrawStringWidthToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetDrawStringWidthToHandle.Call(pstring(str), pint32(strLen), pint32(fontHandle))
	return int32(res)
}

func GetFontStateToHandle(fontName string, size *int32, thick *int32, fontHandle int32) int32 {
	if dx_GetFontStateToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetFontStateToHandle.Call(pstring(fontName), ppint32(size), ppint32(thick), pint32(fontHandle))
	return int32(res)
}

func InitFontToHandle() int32 {
	if dx_InitFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitFontToHandle.Call()
	return int32(res)
}

func clsDx() int32 {
	if dx_clsDx == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_clsDx.Call()
	return int32(res)
}

func SetGraphMode(sizeX int32, sizeY int32, colorBitNum int32) int32 {
	if dx_SetGraphMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetGraphMode.Call(pint32(sizeX), pint32(sizeY), pint32(colorBitNum))
	return int32(res)
}

func SetFullScreenResolutionMode(resolutionMode int32) int32 {
	if dx_SetFullScreenResolutionMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullScreenResolutionMode.Call(pint32(resolutionMode))
	return int32(res)
}

func SetFullScreenScalingMode(scalingMode int32) int32 {
	if dx_SetFullScreenScalingMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullScreenScalingMode.Call(pint32(scalingMode))
	return int32(res)
}

func GetScreenState(sizeX *int32, sizeY *int32, colorBitDepth *int32) int32 {
	if dx_GetScreenState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetScreenState.Call(ppint32(sizeX), ppint32(sizeY), ppint32(colorBitDepth))
	return int32(res)
}

func SetDrawArea(x1 int32, y1 int32, x2 int32, y2 int32) int32 {
	if dx_SetDrawArea == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawArea.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2))
	return int32(res)
}

func ClearDrawScreen() int32 {
	if dx_ClearDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ClearDrawScreen.Call()
	return int32(res)
}

func SetBackgroundColor(red int32, green int32, blue int32) int32 {
	if dx_SetBackgroundColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetBackgroundColor.Call(pint32(red), pint32(green), pint32(blue))
	return int32(res)
}

func GetColor(red int32, green int32, blue int32) uint32 {
	if dx_GetColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetColor.Call(pint32(red), pint32(green), pint32(blue))
	return uint32(res)
}

func SetDrawScreen(drawScreen int32) int32 {
	if dx_SetDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawScreen.Call(pint32(drawScreen))
	return int32(res)
}

func ScreenFlip() int32 {
	if dx_ScreenFlip == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ScreenFlip.Call()
	return int32(res)
}

func SetFullSceneAntiAliasingMode(samples int32, quality int32) int32 {
	if dx_SetFullSceneAntiAliasingMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullSceneAntiAliasingMode.Call(pint32(samples), pint32(quality))
	return int32(res)
}

func PlayMovie(fileName string, exRate int32, playType int32) int32 {
	if dx_PlayMovie == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMovie.Call(pstring(fileName), pint32(exRate), pint32(playType))
	return int32(res)
}

func PlayMovieToGraph(graphHandle int32) int32 {
	if dx_PlayMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMovieToGraph.Call(pint32(graphHandle))
	return int32(res)
}

func PauseMovieToGraph(graphHandle int32) int32 {
	if dx_PauseMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PauseMovieToGraph.Call(pint32(graphHandle))
	return int32(res)
}

func SeekMovieToGraph(graphHandle int32, time int32) int32 {
	if dx_SeekMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SeekMovieToGraph.Call(pint32(graphHandle), pint32(time))
	return int32(res)
}

func TellMovieToGraph(graphHandle int32) int32 {
	if dx_TellMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_TellMovieToGraph.Call(pint32(graphHandle))
	return int32(res)
}

func GetMovieStateToGraph(graphHandle int32) int32 {
	if dx_GetMovieStateToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMovieStateToGraph.Call(pint32(graphHandle))
	return int32(res)
}

func CreateMaskScreen() int32 {
	if dx_CreateMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateMaskScreen.Call()
	return int32(res)
}

func DeleteMaskScreen() int32 {
	if dx_DeleteMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteMaskScreen.Call()
	return int32(res)
}

func LoadMask(fileName string) int32 {
	if dx_LoadMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadMask.Call(pstring(fileName))
	return int32(res)
}

func LoadDivMask(fileName string, allnum int32, xnum int32, ynum int32, xsize int32, ysize int32, handleBuf []int32) int32 {
	if dx_LoadDivMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadDivMask.Call(pstring(fileName), pint32(allnum), pint32(xnum), pint32(ynum), pint32(xsize), pint32(ysize), parrayint32(handleBuf))
	return int32(res)
}

func DrawMask(x int32, y int32, maskHandle int32, transMode int32) int32 {
	if dx_DrawMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawMask.Call(pint32(x), pint32(y), pint32(maskHandle), pint32(transMode))
	return int32(res)
}

func DrawFillMask(x1 int32, y1 int32, x2 int32, y2 int32, maskHandle int32) int32 {
	if dx_DrawFillMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawFillMask.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), pint32(maskHandle))
	return int32(res)
}

func DeleteMask(maskHandle int32) int32 {
	if dx_DeleteMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteMask.Call(pint32(maskHandle))
	return int32(res)
}

func InitMask() int32 {
	if dx_InitMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitMask.Call()
	return int32(res)
}

func FillMaskScreen(flag int32) int32 {
	if dx_FillMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FillMaskScreen.Call(pint32(flag))
	return int32(res)
}

func SetUseMaskScreenFlag(validFlag int32) int32 {
	if dx_SetUseMaskScreenFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseMaskScreenFlag.Call(pint32(validFlag))
	return int32(res)
}

func MakeMask(width int32, height int32) int32 {
	if dx_MakeMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeMask.Call(pint32(width), pint32(height))
	return int32(res)
}

func GetMaskSize(widthBuf *int32, heightBuf *int32, maskHandle int32) int32 {
	if dx_GetMaskSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMaskSize.Call(ppint32(widthBuf), ppint32(heightBuf), pint32(maskHandle))
	return int32(res)
}

func GetJoypadNum() int32 {
	if dx_GetJoypadNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadNum.Call()
	return int32(res)
}

func GetJoypadInputState(inputType int32) int32 {
	if dx_GetJoypadInputState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadInputState.Call(pint32(inputType))
	return int32(res)
}

func GetJoypadAnalogInput(xbuf *int32, ybuf *int32, inputType int32) int32 {
	if dx_GetJoypadAnalogInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadAnalogInput.Call(ppint32(xbuf), ppint32(ybuf), pint32(inputType))
	return int32(res)
}

func SetJoypadDeadZone(inputType int32, zone float64) int32 {
	if dx_SetJoypadDeadZone == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetJoypadDeadZone.Call(pint32(inputType), pfloat64(zone))
	return int32(res)
}

func StartJoypadVibration(inputType int32, power int32, time int32) int32 {
	if dx_StartJoypadVibration == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StartJoypadVibration.Call(pint32(inputType), pint32(power), pint32(time))
	return int32(res)
}

func StopJoypadVibration(inputType int32) int32 {
	if dx_StopJoypadVibration == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopJoypadVibration.Call(pint32(inputType))
	return int32(res)
}

func SetMouseDispFlag(dispFlag int32) int32 {
	if dx_SetMouseDispFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMouseDispFlag.Call(pint32(dispFlag))
	return int32(res)
}

func GetMousePoint(xbuf *int32, ybuf *int32) int32 {
	if dx_GetMousePoint == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMousePoint.Call(ppint32(xbuf), ppint32(ybuf))
	return int32(res)
}

func SetMousePoint(pointX int32, pointY int32) int32 {
	if dx_SetMousePoint == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMousePoint.Call(pint32(pointX), pint32(pointY))
	return int32(res)
}

func GetMouseInput() int32 {
	if dx_GetMouseInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseInput.Call()
	return int32(res)
}

func GetMouseInputLog2(button *int32, clickX *int32, clickY *int32, logType *int32, logDelete int32) int32 {
	if dx_GetMouseInputLog2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseInputLog2.Call(ppint32(button), ppint32(clickX), ppint32(clickY), ppint32(logType), pint32(logDelete))
	return int32(res)
}

func GetMouseWheelRotVol() int32 {
	if dx_GetMouseWheelRotVol == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseWheelRotVol.Call()
	return int32(res)
}

func GetTouchInputNum() int32 {
	if dx_GetTouchInputNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetTouchInputNum.Call()
	return int32(res)
}

func GetTouchInput(inputNo int32, positionX *int32, positionY *int32, id *int32, device *int32) int32 {
	if dx_GetTouchInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetTouchInput.Call(pint32(inputNo), ppint32(positionX), ppint32(positionY), ppint32(id), ppint32(device))
	return int32(res)
}

func CheckHitKeyAll(checkType int32) int32 {
	if dx_CheckHitKeyAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHitKeyAll.Call(pint32(checkType))
	return int32(res)
}

func CheckHitKey(keyCode int32) int32 {
	if dx_CheckHitKey == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHitKey.Call(pint32(keyCode))
	return int32(res)
}

func GetHitKeyStateAll(keyStateBuf []byte) int32 {
	if dx_GetHitKeyStateAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetHitKeyStateAll.Call(parraybyte(keyStateBuf))
	return int32(res)
}

func GetInputChar(deleteFlag int32) byte {
	if dx_GetInputChar == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetInputChar.Call(pint32(deleteFlag))
	return byte(res)
}

func GetInputCharWait(deleteFlag int32) byte {
	if dx_GetInputCharWait == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetInputCharWait.Call(pint32(deleteFlag))
	return byte(res)
}

func ClearInputCharBuf() int32 {
	if dx_ClearInputCharBuf == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ClearInputCharBuf.Call()
	return int32(res)
}

func KeyInputString(x int32, y int32, charMaxLength int32, strBuffer string, cancelValidFlag int32) int32 {
	if dx_KeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputString.Call(pint32(x), pint32(y), pint32(charMaxLength), pstring(strBuffer), pint32(cancelValidFlag))
	return int32(res)
}

func KeyInputSingleCharString(x int32, y int32, charMaxLength int32, strBuffer string, cancelValidFlag int32) int32 {
	if dx_KeyInputSingleCharString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputSingleCharString.Call(pint32(x), pint32(y), pint32(charMaxLength), pstring(strBuffer), pint32(cancelValidFlag))
	return int32(res)
}

func KeyInputNumber(x int32, y int32, maxNum int32, minNum int32, cancelValidFlag int32) int32 {
	if dx_KeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputNumber.Call(pint32(x), pint32(y), pint32(maxNum), pint32(minNum), pint32(cancelValidFlag))
	return int32(res)
}

func SetKeyInputStringColor(nmlStr int32, nmlCur int32, imeStrBack int32, imeCur int32, imeLine int32, imeSelectStr int32, imeModeStr int32, nmlStrE int32, imeSelectStrE int32, imeModeStrE int32, imeSelectWinE int32, imeSelectWinF int32, selectStrBackColor int32, selectStrColor int32, selectStrEdgeColor int32, imeStr int32, imeStrE int32) int32 {
	if dx_SetKeyInputStringColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputStringColor.Call(pint32(nmlStr), pint32(nmlCur), pint32(imeStrBack), pint32(imeCur), pint32(imeLine), pint32(imeSelectStr), pint32(imeModeStr), pint32(nmlStrE), pint32(imeSelectStrE), pint32(imeModeStrE), pint32(imeSelectWinE), pint32(imeSelectWinF), pint32(selectStrBackColor), pint32(selectStrColor), pint32(selectStrEdgeColor), pint32(imeStr), pint32(imeStrE))
	return int32(res)
}

func MakeKeyInput(maxStrLength int32, cancelValidFlag int32, singleCharOnlyFlag int32, numCharOnlyFlag int32) int32 {
	if dx_MakeKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeKeyInput.Call(pint32(maxStrLength), pint32(cancelValidFlag), pint32(singleCharOnlyFlag), pint32(numCharOnlyFlag))
	return int32(res)
}

func DeleteKeyInput(inputHandle int32) int32 {
	if dx_DeleteKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteKeyInput.Call(pint32(inputHandle))
	return int32(res)
}

func InitKeyInput() int32 {
	if dx_InitKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitKeyInput.Call()
	return int32(res)
}

func SetActiveKeyInput(inputHandle int32) int32 {
	if dx_SetActiveKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetActiveKeyInput.Call(pint32(inputHandle))
	return int32(res)
}

func CheckKeyInput(inputHandle int32) int32 {
	if dx_CheckKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckKeyInput.Call(pint32(inputHandle))
	return int32(res)
}

func DrawKeyInputString(x int32, y int32, inputHandle int32) int32 {
	if dx_DrawKeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawKeyInputString.Call(pint32(x), pint32(y), pint32(inputHandle))
	return int32(res)
}

func DrawKeyInputModeString(x int32, y int32) int32 {
	if dx_DrawKeyInputModeString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawKeyInputModeString.Call(pint32(x), pint32(y))
	return int32(res)
}

func SetKeyInputString(str string, inputHandle int32) int32 {
	if dx_SetKeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputString.Call(pstring(str), pint32(inputHandle))
	return int32(res)
}

func SetKeyInputNumber(number int32, inputHandle int32) int32 {
	if dx_SetKeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputNumber.Call(pint32(number), pint32(inputHandle))
	return int32(res)
}

func GetKeyInputNumber(inputHandle int32) int32 {
	if dx_GetKeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetKeyInputNumber.Call(pint32(inputHandle))
	return int32(res)
}

func PlaySoundFile(fileName string, playType int32) int32 {
	if dx_PlaySoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlaySoundFile.Call(pstring(fileName), pint32(playType))
	return int32(res)
}

func CheckSoundFile() int32 {
	if dx_CheckSoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckSoundFile.Call()
	return int32(res)
}

func StopSoundFile() int32 {
	if dx_StopSoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopSoundFile.Call()
	return int32(res)
}

func LoadSoundMem(fileName string) int32 {
	if dx_LoadSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadSoundMem.Call(pstring(fileName))
	return int32(res)
}

func PlaySoundMem(soundHandle int32, playType int32, topPositionFlag int32) int32 {
	if dx_PlaySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlaySoundMem.Call(pint32(soundHandle), pint32(playType), pint32(topPositionFlag))
	return int32(res)
}

func CheckSoundMem(soundHandle int32) int32 {
	if dx_CheckSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckSoundMem.Call(pint32(soundHandle))
	return int32(res)
}

func StopSoundMem(soundHandle int32) int32 {
	if dx_StopSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopSoundMem.Call(pint32(soundHandle))
	return int32(res)
}

func DeleteSoundMem(soundHandle int32) int32 {
	if dx_DeleteSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteSoundMem.Call(pint32(soundHandle))
	return int32(res)
}

func InitSoundMem() int32 {
	if dx_InitSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitSoundMem.Call()
	return int32(res)
}

func ChangePanSoundMem(panPal int32, soundHandle int32) int32 {
	if dx_ChangePanSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangePanSoundMem.Call(pint32(panPal), pint32(soundHandle))
	return int32(res)
}

func ChangeVolumeSoundMem(volumePan int32, soundHandle int32) int32 {
	if dx_ChangeVolumeSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeVolumeSoundMem.Call(pint32(volumePan), pint32(soundHandle))
	return int32(res)
}

func ChangeNextPlayPanSoundMem(panPal int32, soundHandle int32) int32 {
	if dx_ChangeNextPlayPanSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeNextPlayPanSoundMem.Call(pint32(panPal), pint32(soundHandle))
	return int32(res)
}

func ChangeNextPlayVolumeSoundMem(volumePal int32, soundHandle int32) int32 {
	if dx_ChangeNextPlayVolumeSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeNextPlayVolumeSoundMem.Call(pint32(volumePal), pint32(soundHandle))
	return int32(res)
}

func SetFrequencySoundMem(frequencyPal int32, soundHandle int32) int32 {
	if dx_SetFrequencySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFrequencySoundMem.Call(pint32(frequencyPal), pint32(soundHandle))
	return int32(res)
}

func SetLoopPosSoundMem(loopTime int32, soundHandle int32) int32 {
	if dx_SetLoopPosSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetLoopPosSoundMem.Call(pint32(loopTime), pint32(soundHandle))
	return int32(res)
}

func SetLoopSamplePosSoundMem(loopSamplePosition int32, soundHandle int32) int32 {
	if dx_SetLoopSamplePosSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetLoopSamplePosSoundMem.Call(pint32(loopSamplePosition), pint32(soundHandle))
	return int32(res)
}

func SetCurrentPositionSoundMem(samplePosition int32, soundHandle int32) int32 {
	if dx_SetCurrentPositionSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCurrentPositionSoundMem.Call(pint32(samplePosition), pint32(soundHandle))
	return int32(res)
}

func DuplicateSoundMem(srcSoundHandle int32) int32 {
	if dx_DuplicateSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DuplicateSoundMem.Call(pint32(srcSoundHandle))
	return int32(res)
}

func SetCreateSoundPitchRate(cents float32) int32 {
	if dx_SetCreateSoundPitchRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundPitchRate.Call(pfloat32(cents))
	return int32(res)
}

func SetCreateSoundTimeStretchRate(rate float32) int32 {
	if dx_SetCreateSoundTimeStretchRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundTimeStretchRate.Call(pfloat32(rate))
	return int32(res)
}

func Set3DRadiusSoundMem(radius float32, soundHandle int32) int32 {
	if dx_Set3DRadiusSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DRadiusSoundMem.Call(pfloat32(radius), pint32(soundHandle))
	return int32(res)
}

func SetNextPlay3DRadiusSoundMem(radius float32, soundHandle int32) int32 {
	if dx_SetNextPlay3DRadiusSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetNextPlay3DRadiusSoundMem.Call(pfloat32(radius), pint32(soundHandle))
	return int32(res)
}

func Set3DPresetReverbParamSoundMem(presetNo int32, soundHandle int32) int32 {
	if dx_Set3DPresetReverbParamSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPresetReverbParamSoundMem.Call(pint32(presetNo), pint32(soundHandle))
	return int32(res)
}

func Set3DPresetReverbParamSoundMemAll(presetNo int32, playSoundOnly int32) int32 {
	if dx_Set3DPresetReverbParamSoundMemAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPresetReverbParamSoundMemAll.Call(pint32(presetNo), pint32(playSoundOnly))
	return int32(res)
}

func SetCreate3DSoundFlag(flag int32) int32 {
	if dx_SetCreate3DSoundFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreate3DSoundFlag.Call(pint32(flag))
	return int32(res)
}

func SetEnableXAudioFlag(flag int32) int32 {
	if dx_SetEnableXAudioFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetEnableXAudioFlag.Call(pint32(flag))
	return int32(res)
}

func Set3DSoundOneMetre(distance float32) int32 {
	if dx_Set3DSoundOneMetre == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DSoundOneMetre.Call(pfloat32(distance))
	return int32(res)
}

func PlayMusic(fileName string, playType int32) int32 {
	if dx_PlayMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMusic.Call(pstring(fileName), pint32(playType))
	return int32(res)
}

func CheckMusic() int32 {
	if dx_CheckMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckMusic.Call()
	return int32(res)
}

func StopMusic() int32 {
	if dx_StopMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopMusic.Call()
	return int32(res)
}

func SetVolumeMusic(volume int32) int32 {
	if dx_SetVolumeMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetVolumeMusic.Call(pint32(volume))
	return int32(res)
}

func WaitTimer(waitTime int32) int32 {
	if dx_WaitTimer == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitTimer.Call(pint32(waitTime))
	return int32(res)
}

func WaitVSync(syncNum int32) int32 {
	if dx_WaitVSync == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitVSync.Call(pint32(syncNum))
	return int32(res)
}

func WaitKey() int32 {
	if dx_WaitKey == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitKey.Call()
	return int32(res)
}

func GetNowCount() int32 {
	if dx_GetNowCount == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNowCount.Call()
	return int32(res)
}

func GetNowHiPerformanceCount() int64 {
	if dx_GetNowHiPerformanceCount == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNowHiPerformanceCount.Call()
	return int64(res)
}

func GetRand(randMax int32) int32 {
	if dx_GetRand == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetRand.Call(pint32(randMax))
	return int32(res)
}

func SRand(seed int32) int32 {
	if dx_SRand == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SRand.Call(pint32(seed))
	return int32(res)
}

func ChangeWindowMode(flag int32) int32 {
	if dx_ChangeWindowMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeWindowMode.Call(pint32(flag))
	return int32(res)
}

func SetMainWindowText(windowText string) int32 {
	if dx_SetMainWindowText == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMainWindowText.Call(pstring(windowText))
	return int32(res)
}

func SetWindowIconID(id int32) int32 {
	if dx_SetWindowIconID == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWindowIconID.Call(pint32(id))
	return int32(res)
}

func SetWindowSizeChangeEnableFlag(flag int32) int32 {
	if dx_SetWindowSizeChangeEnableFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWindowSizeChangeEnableFlag.Call(pint32(flag))
	return int32(res)
}

func SetWindowSizeExtendRate(exRate float64) int32 {
	if dx_SetWindowSizeExtendRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWindowSizeExtendRate.Call(pfloat64(exRate))
	return int32(res)
}

func CloseNetWork(netHandle int32) int32 {
	if dx_CloseNetWork == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CloseNetWork.Call(pint32(netHandle))
	return int32(res)
}

func PreparationListenNetWork(port int32) int32 {
	if dx_PreparationListenNetWork == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PreparationListenNetWork.Call(pint32(port))
	return int32(res)
}

func StopListenNetWork() int32 {
	if dx_StopListenNetWork == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopListenNetWork.Call()
	return int32(res)
}

func GetNetWorkDataLength(netHandle int32) int32 {
	if dx_GetNetWorkDataLength == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNetWorkDataLength.Call(pint32(netHandle))
	return int32(res)
}

func GetNetWorkSendDataLength(netHandle int32) int32 {
	if dx_GetNetWorkSendDataLength == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNetWorkSendDataLength.Call(pint32(netHandle))
	return int32(res)
}

func GetNewAcceptNetWork() int32 {
	if dx_GetNewAcceptNetWork == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNewAcceptNetWork.Call()
	return int32(res)
}

func GetLostNetWork() int32 {
	if dx_GetLostNetWork == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetLostNetWork.Call()
	return int32(res)
}

func GetNetWorkAcceptState(netHandle int32) int32 {
	if dx_GetNetWorkAcceptState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNetWorkAcceptState.Call(pint32(netHandle))
	return int32(res)
}

func MakeUDPSocket(recvPort int32) int32 {
	if dx_MakeUDPSocket == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeUDPSocket.Call(pint32(recvPort))
	return int32(res)
}

func DeleteUDPSocket(netUDPHandle int32) int32 {
	if dx_DeleteUDPSocket == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteUDPSocket.Call(pint32(netUDPHandle))
	return int32(res)
}

func CheckNetWorkRecvUDP(netUDPHandle int32) int32 {
	if dx_CheckNetWorkRecvUDP == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckNetWorkRecvUDP.Call(pint32(netUDPHandle))
	return int32(res)
}

func FileRead_open(filePath string, async int32) int32 {
	if dx_FileRead_open == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_open.Call(pstring(filePath), pint32(async))
	return int32(res)
}

func FileRead_size(filePath string) int64 {
	if dx_FileRead_size == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_size.Call(pstring(filePath))
	return int64(res)
}

func FileRead_close(fileHandle int32) int32 {
	if dx_FileRead_close == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_close.Call(pint32(fileHandle))
	return int32(res)
}

func FileRead_tell(fileHandle int32) int64 {
	if dx_FileRead_tell == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_tell.Call(pint32(fileHandle))
	return int64(res)
}

func FileRead_seek(fileHandle int32, offset int64, origin int32) int32 {
	if dx_FileRead_seek == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_seek.Call(pint32(fileHandle), pint64(offset), pint32(origin))
	return int32(res)
}

func FileRead_eof(fileHandle int32) int32 {
	if dx_FileRead_eof == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_eof.Call(pint32(fileHandle))
	return int32(res)
}

func FileRead_gets(buffer []byte, num int32, fileHandle int32) int32 {
	if dx_FileRead_gets == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_gets.Call(parraybyte(buffer), pint32(num), pint32(fileHandle))
	return int32(res)
}

func FileRead_getc(fileHandle int32) int32 {
	if dx_FileRead_getc == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FileRead_getc.Call(pint32(fileHandle))
	return int32(res)
}

func LoadSoftImage(fileName string) int32 {
	if dx_LoadSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadSoftImage.Call(pstring(fileName))
	return int32(res)
}

func LoadARGB8ColorSoftImage(fileName string) int32 {
	if dx_LoadARGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadARGB8ColorSoftImage.Call(pstring(fileName))
	return int32(res)
}

func LoadXRGB8ColorSoftImage(fileName string) int32 {
	if dx_LoadXRGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadXRGB8ColorSoftImage.Call(pstring(fileName))
	return int32(res)
}

func MakeARGB8ColorSoftImage(sizeX int32, sizeY int32) int32 {
	if dx_MakeARGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeARGB8ColorSoftImage.Call(pint32(sizeX), pint32(sizeY))
	return int32(res)
}

func MakeXRGB8ColorSoftImage(sizeX int32, sizeY int32) int32 {
	if dx_MakeXRGB8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeXRGB8ColorSoftImage.Call(pint32(sizeX), pint32(sizeY))
	return int32(res)
}

func MakePAL8ColorSoftImage(sizeX int32, sizeY int32) int32 {
	if dx_MakePAL8ColorSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakePAL8ColorSoftImage.Call(pint32(sizeX), pint32(sizeY))
	return int32(res)
}

func DeleteSoftImage(siHandle int32) int32 {
	if dx_DeleteSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteSoftImage.Call(pint32(siHandle))
	return int32(res)
}

func InitSoftImage() int32 {
	if dx_InitSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitSoftImage.Call()
	return int32(res)
}

func GetSoftImageSize(siHandle int32, width *int32, height *int32) int32 {
	if dx_GetSoftImageSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetSoftImageSize.Call(pint32(siHandle), ppint32(width), ppint32(height))
	return int32(res)
}

func FillSoftImage(siHandle int32, r int32, g int32, b int32, a int32) int32 {
	if dx_FillSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FillSoftImage.Call(pint32(siHandle), pint32(r), pint32(g), pint32(b), pint32(a))
	return int32(res)
}

func SetPaletteSoftImage(siHandle int32, paletteNo int32, r int32, g int32, b int32, a int32) int32 {
	if dx_SetPaletteSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetPaletteSoftImage.Call(pint32(siHandle), pint32(paletteNo), pint32(r), pint32(g), pint32(b), pint32(a))
	return int32(res)
}

func GetPaletteSoftImage(siHandle int32, paletteNo int32, r *int32, g *int32, b *int32, a *int32) int32 {
	if dx_GetPaletteSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPaletteSoftImage.Call(pint32(siHandle), pint32(paletteNo), ppint32(r), ppint32(g), ppint32(b), ppint32(a))
	return int32(res)
}

func DrawPixelPalCodeSoftImage(siHandle int32, x int32, y int32, palNo int32) int32 {
	if dx_DrawPixelPalCodeSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixelPalCodeSoftImage.Call(pint32(siHandle), pint32(x), pint32(y), pint32(palNo))
	return int32(res)
}

func GetPixelPalCodeSoftImage(siHandle int32, x int32, y int32) int32 {
	if dx_GetPixelPalCodeSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixelPalCodeSoftImage.Call(pint32(siHandle), pint32(x), pint32(y))
	return int32(res)
}

func DrawPixelSoftImage(siHandle int32, x int32, y int32, r int32, g int32, b int32, a int32) int32 {
	if dx_DrawPixelSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixelSoftImage.Call(pint32(siHandle), pint32(x), pint32(y), pint32(r), pint32(g), pint32(b), pint32(a))
	return int32(res)
}

func GetPixelSoftImage(siHandle int32, x int32, y int32, r *int32, g *int32, b *int32, a *int32) int32 {
	if dx_GetPixelSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixelSoftImage.Call(pint32(siHandle), pint32(x), pint32(y), ppint32(r), ppint32(g), ppint32(b), ppint32(a))
	return int32(res)
}

func BltSoftImage(srcX int32, srcY int32, srcSizeX int32, srcSizeY int32, srcSIHandle int32, destX int32, destY int32, destSIHandle int32) int32 {
	if dx_BltSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_BltSoftImage.Call(pint32(srcX), pint32(srcY), pint32(srcSizeX), pint32(srcSizeY), pint32(srcSIHandle), pint32(destX), pint32(destY), pint32(destSIHandle))
	return int32(res)
}

func DrawSoftImage(x int32, y int32, siHandle int32) int32 {
	if dx_DrawSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawSoftImage.Call(pint32(x), pint32(y), pint32(siHandle))
	return int32(res)
}

func CreateGraphFromSoftImage(siHandle int32) int32 {
	if dx_CreateGraphFromSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateGraphFromSoftImage.Call(pint32(siHandle))
	return int32(res)
}

func CreateDivGraphFromSoftImage(siHandle int32, allnum int32, xnum int32, ynum int32, sizeX int32, sizeY int32, handleBuf []int32) int32 {
	if dx_CreateDivGraphFromSoftImage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateDivGraphFromSoftImage.Call(pint32(siHandle), pint32(allnum), pint32(xnum), pint32(ynum), pint32(sizeX), pint32(sizeY), parrayint32(handleBuf))
	return int32(res)
}

func SetUseASyncLoadFlag(flag int32) int32 {
	if dx_SetUseASyncLoadFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseASyncLoadFlag.Call(pint32(flag))
	return int32(res)
}

func CheckHandleASyncLoad(handle int32) int32 {
	if dx_CheckHandleASyncLoad == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHandleASyncLoad.Call(pint32(handle))
	return int32(res)
}

func GetASyncLoadNum() int32 {
	if dx_GetASyncLoadNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetASyncLoadNum.Call()
	return int32(res)
}

func SetUseCharCodeFormat(charCodeFormat int32) int32 {
	if dx_SetUseCharCodeFormat == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseCharCodeFormat.Call(pint32(charCodeFormat))
	return int32(res)
}

func SetAlwaysRunFlag(flag int32) int32 {
	if dx_SetAlwaysRunFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetAlwaysRunFlag.Call(pint32(flag))
	return int32(res)
}

func SetOutApplicationLogValidFlag(flag int32) int32 {
	if dx_SetOutApplicationLogValidFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetOutApplicationLogValidFlag.Call(pint32(flag))
	return int32(res)
}

func SetUseDXArchiveFlag(flag int32) int32 {
	if dx_SetUseDXArchiveFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseDXArchiveFlag.Call(pint32(flag))
	return int32(res)
}

func SetDXArchiveExtension(extension string) int32 {
	if dx_SetDXArchiveExtension == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDXArchiveExtension.Call(pstring(extension))
	return int32(res)
}

func SetDXArchiveKeyString(keyString string) int32 {
	if dx_SetDXArchiveKeyString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDXArchiveKeyString.Call(pstring(keyString))
	return int32(res)
}

func SetEmulation320x240(flag int32) int32 {
	if dx_SetEmulation320x240 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetEmulation320x240.Call(pint32(flag))
	return int32(res)
}

func SetUse3DFlag(flag int32) int32 {
	if dx_SetUse3DFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUse3DFlag.Call(pint32(flag))
	return int32(res)
}

func SetWaitVSyncFlag(flag int32) int32 {
	if dx_SetWaitVSyncFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetWaitVSyncFlag.Call(pint32(flag))
	return int32(res)
}

func SetUseDivGraphFlag(flag int32) int32 {
	if dx_SetUseDivGraphFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseDivGraphFlag.Call(pint32(flag))
	return int32(res)
}

func LoadPauseGraph(fileName string) int32 {
	if dx_LoadPauseGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadPauseGraph.Call(pstring(fileName))
	return int32(res)
}

func ScreenCopy() int32 {
	if dx_ScreenCopy == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ScreenCopy.Call()
	return int32(res)
}

func GetColorBitDepth() int32 {
	if dx_GetColorBitDepth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetColorBitDepth.Call()
	return int32(res)
}

func SaveDrawScreen(x1 int32, y1 int32, x2 int32, y2 int32, fileName string) int32 {
	if dx_SaveDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SaveDrawScreen.Call(pint32(x1), pint32(y1), pint32(x2), pint32(y2), pstring(fileName))
	return int32(res)
}

func EnumFontName(nameBuffer []byte, nameBufferNum int32) int32 {
	if dx_EnumFontName == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_EnumFontName.Call(parraybyte(nameBuffer), pint32(nameBufferNum))
	return int32(res)
}

func DrawVString(x int32, y int32, str string, color int32) int32 {
	if dx_DrawVString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawVString.Call(pint32(x), pint32(y), pstring(str), pint32(color))
	return int32(res)
}

func DrawVStringToHandle(x int32, y int32, str string, color int32, fontHandle int32) int32 {
	if dx_DrawVStringToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawVStringToHandle.Call(pint32(x), pint32(y), pstring(str), pint32(color), pint32(fontHandle))
	return int32(res)
}

func ReloadFileGraphAll() int32 {
	if dx_ReloadFileGraphAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ReloadFileGraphAll.Call()
	return int32(res)
}

func SetCreateSoundDataType(soundDataType int32) int32 {
	if dx_SetCreateSoundDataType == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundDataType.Call(pint32(soundDataType))
	return int32(res)
}

func SelectMidiMode(mode int32) int32 {
	if dx_SelectMidiMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SelectMidiMode.Call(pint32(mode))
	return int32(res)
}

func ppint32(i *int32) uintptr {
	return uintptr(unsafe.Pointer(i))
}

func pint32(i int32) uintptr {
	return uintptr(i)
}

func puint32(ui uint32) uintptr {
	return uintptr(ui)
}

func pstring(str string) uintptr {
	sjisStr, _, err := transform.String(japanese.ShiftJIS.NewEncoder(), str)
	if err != nil {
		panic(err)
	}
	pbyte, err := syscall.BytePtrFromString(sjisStr)
	if err != nil {
		panic(err)
	}
	return uintptr(unsafe.Pointer(pbyte))
}

func pfloat32(f float32) uintptr {
	return uintptr(math.Float32bits(f))
}

func pfloat64(f float64) uintptr {
	return uintptr(math.Float64bits(f))
}

func pint64(i int64) uintptr {
	return uintptr(i)
}

func parraybyte(b []byte) uintptr {
	return uintptr(unsafe.Pointer(&b[0]))
}

func parrayint32(i []int32) uintptr {
	return uintptr(unsafe.Pointer(&i[0]))
}

func DrawFormatString(x int32, y int32, color uint32, format string, a ...interface{}) int32 {
	str := fmt.Sprintf(format, a...)
	return DrawString(x, y, str, color)
}

func DrawFormatStringToHandle(x int32, y int32, color uint32, fontHandle int32, format string, a ...interface{}) int32 {
	str := fmt.Sprintf(format, a...)
	return DrawStringToHandle(x, y, str, color, fontHandle)
}
