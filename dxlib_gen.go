// Code generated by 'go generate'; DO NOT EDIT.

package dxlib

import (
	"syscall"
	"unsafe"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

var (
	dx_DxLib_Init                           *syscall.LazyProc
	dx_DxLib_End                            *syscall.LazyProc
	dx_ProcessMessage                       *syscall.LazyProc
	dx_DrawLine                             *syscall.LazyProc
	dx_DrawLineAA                           *syscall.LazyProc
	dx_DrawBox                              *syscall.LazyProc
	dx_DrawBoxAA                            *syscall.LazyProc
	dx_DrawCircle                           *syscall.LazyProc
	dx_DrawCircleAA                         *syscall.LazyProc
	dx_DrawOval                             *syscall.LazyProc
	dx_DrawOvalAA                           *syscall.LazyProc
	dx_DrawTriangle                         *syscall.LazyProc
	dx_DrawTriangleAA                       *syscall.LazyProc
	dx_DrawPixel                            *syscall.LazyProc
	dx_GetPixel                             *syscall.LazyProc
	dx_LoadGraphScreen                      *syscall.LazyProc
	dx_LoadGraph                            *syscall.LazyProc
	dx_LoadDivGraph                         *syscall.LazyProc
	dx_MakeGraph                            *syscall.LazyProc
	dx_MakeScreen                           *syscall.LazyProc
	dx_SetCreateDrawValidGraphMultiSample   *syscall.LazyProc
	dx_SetCreateGraphColorBitDepth          *syscall.LazyProc
	dx_SetDrawValidFloatTypeGraphCreateFlag *syscall.LazyProc
	dx_SetCreateDrawValidGraphChannelNum    *syscall.LazyProc
	dx_SetUsePremulAlphaConvertLoad         *syscall.LazyProc
	dx_DrawGraph                            *syscall.LazyProc
	dx_DrawTurnGraph                        *syscall.LazyProc
	dx_DrawExtendGraph                      *syscall.LazyProc
	dx_DrawRotaGraph                        *syscall.LazyProc
	dx_DrawRotaGraph2                       *syscall.LazyProc
	dx_DrawRotaGraph3                       *syscall.LazyProc
	dx_DrawModiGraph                        *syscall.LazyProc
	dx_DrawRectGraph                        *syscall.LazyProc
	dx_DerivationGraph                      *syscall.LazyProc
	dx_GetDrawScreenGraph                   *syscall.LazyProc
	dx_GetGraphiteSize                      *syscall.LazyProc
	dx_InitGraph                            *syscall.LazyProc
	dx_DeleteGraph                          *syscall.LazyProc
	dx_SetDrawMode                          *syscall.LazyProc
	dx_SetDrawBlendMode                     *syscall.LazyProc
	dx_SetDrawBright                        *syscall.LazyProc
	dx_SetTransColor                        *syscall.LazyProc
	dx_LoadBlendGraph                       *syscall.LazyProc
	dx_DrawBlendGraph                       *syscall.LazyProc
	dx_DrawString                           *syscall.LazyProc
	dx_GetDrawStringWidth                   *syscall.LazyProc
	dx_SetFontSize                          *syscall.LazyProc
	dx_SetFontThickness                     *syscall.LazyProc
	dx_ChangeFont                           *syscall.LazyProc
	dx_ChangeFontType                       *syscall.LazyProc
	dx_CreateFontToHandle                   *syscall.LazyProc
	dx_LoadFontDataToHandle                 *syscall.LazyProc
	dx_DeleteFontToHandle                   *syscall.LazyProc
	dx_SetFontCacheUsePremulAlphaFlag       *syscall.LazyProc
	dx_DrawStringToHandle                   *syscall.LazyProc
	dx_GetDrawStringWidthToHandle           *syscall.LazyProc
	dx_GetFontStateToHandle                 *syscall.LazyProc
	dx_InitFontToHandle                     *syscall.LazyProc
	dx_clsDx                                *syscall.LazyProc
	dx_SetGraphMode                         *syscall.LazyProc
	dx_SetFullScreenResolutionMode          *syscall.LazyProc
	dx_SetFullScreenScalingMode             *syscall.LazyProc
	dx_GetScreenState                       *syscall.LazyProc
	dx_SetDrawArea                          *syscall.LazyProc
	dx_ClearDrawScreen                      *syscall.LazyProc
	dx_SetBackgroundColor                   *syscall.LazyProc
	dx_GetColor                             *syscall.LazyProc
	dx_SetDrawScreen                        *syscall.LazyProc
	dx_ScreenFlip                           *syscall.LazyProc
	dx_SetFullSceneAntiAliasingMode         *syscall.LazyProc
	dx_PlayMovie                            *syscall.LazyProc
	dx_PlayMovieToGraph                     *syscall.LazyProc
	dx_PauseMovieToGraph                    *syscall.LazyProc
	dx_SeekMovieToGraph                     *syscall.LazyProc
	dx_TellMovieToGraph                     *syscall.LazyProc
	dx_GetMovieStateToGraph                 *syscall.LazyProc
	dx_CreateMaskScreen                     *syscall.LazyProc
	dx_DeleteMaskScreen                     *syscall.LazyProc
	dx_LoadMask                             *syscall.LazyProc
	dx_LoadDivMask                          *syscall.LazyProc
	dx_DrawMask                             *syscall.LazyProc
	dx_DrawFillMask                         *syscall.LazyProc
	dx_DeleteMask                           *syscall.LazyProc
	dx_InitMask                             *syscall.LazyProc
	dx_FillMaskScreen                       *syscall.LazyProc
	dx_SetUseMaskScreenFlag                 *syscall.LazyProc
	dx_MakeMask                             *syscall.LazyProc
	dx_GetMaskSize                          *syscall.LazyProc
	dx_GetJoypadNum                         *syscall.LazyProc
	dx_GetJoypadInputState                  *syscall.LazyProc
	dx_GetJoypadAnalogInput                 *syscall.LazyProc
	dx_SetJoypadDeadZone                    *syscall.LazyProc
	dx_StartJoypadVibration                 *syscall.LazyProc
	dx_StopJoypadVibration                  *syscall.LazyProc
	dx_SetMouseDispFlag                     *syscall.LazyProc
	dx_GetMousePoint                        *syscall.LazyProc
	dx_SetMousePoint                        *syscall.LazyProc
	dx_GetMouseInput                        *syscall.LazyProc
	dx_GetMouseInputLog2                    *syscall.LazyProc
	dx_GetMouseWheelRotVol                  *syscall.LazyProc
	dx_GetTouchInputNum                     *syscall.LazyProc
	dx_GetTouchInput                        *syscall.LazyProc
	dx_CheckHitKeyAll                       *syscall.LazyProc
	dx_CheckHitKey                          *syscall.LazyProc
	dx_GetInputChar                         *syscall.LazyProc
	dx_GetInputCharWait                     *syscall.LazyProc
	dx_ClearInputCharBuf                    *syscall.LazyProc
	dx_KeyInputString                       *syscall.LazyProc
	dx_KeyInputSingleCharString             *syscall.LazyProc
	dx_KeyInputNumber                       *syscall.LazyProc
	dx_SetKeyInputStringColor               *syscall.LazyProc
	dx_MakeKeyInput                         *syscall.LazyProc
	dx_DeleteKeyInput                       *syscall.LazyProc
	dx_InitKeyInput                         *syscall.LazyProc
	dx_SetActiveKeyInput                    *syscall.LazyProc
	dx_CheckKeyInput                        *syscall.LazyProc
	dx_DrawKeyInputString                   *syscall.LazyProc
	dx_DrawKeyInputModeString               *syscall.LazyProc
	dx_SetKeyInputString                    *syscall.LazyProc
	dx_SetKeyInputNumber                    *syscall.LazyProc
	dx_GetKeyInputNumber                    *syscall.LazyProc
	dx_PlaySoundFile                        *syscall.LazyProc
	dx_CheckSoundFile                       *syscall.LazyProc
	dx_StopSoundFile                        *syscall.LazyProc
	dx_LoadSoundMem                         *syscall.LazyProc
	dx_PlaySoundMem                         *syscall.LazyProc
	dx_CheckSoundMem                        *syscall.LazyProc
	dx_StopSoundMem                         *syscall.LazyProc
	dx_DeleteSoundMem                       *syscall.LazyProc
	dx_InitSoundMem                         *syscall.LazyProc
	dx_ChangePanSoundMem                    *syscall.LazyProc
	dx_ChangeVolumeSoundMem                 *syscall.LazyProc
	dx_ChangeNextPlayPanSoundMem            *syscall.LazyProc
	dx_ChangeNextPlayVolumeSoundMem         *syscall.LazyProc
	dx_SetFrequencySoundMem                 *syscall.LazyProc
	dx_SetLoopPosSoundMem                   *syscall.LazyProc
	dx_SetLoopSamplePosSoundMem             *syscall.LazyProc
	dx_SetCurrentPositionSoundMem           *syscall.LazyProc
	dx_DuplicateSoundMem                    *syscall.LazyProc
	dx_SetCreateSoundPitchRate              *syscall.LazyProc
	dx_SetCreateSoundTimeStretchRate        *syscall.LazyProc
	dx_Set3DRadiusSoundMem                  *syscall.LazyProc
	dx_SetNextPlay3DRadiusSoundMem          *syscall.LazyProc
	dx_Set3DPresetReverbParamSoundMem       *syscall.LazyProc
	dx_Set3DPresetReverbParamSoundMemAll    *syscall.LazyProc
	dx_SetCreate3DSoundFlag                 *syscall.LazyProc
	dx_SetEnableXAudioFlag                  *syscall.LazyProc
	dx_Set3DSoundOneMetre                   *syscall.LazyProc
	dx_PlayMusic                            *syscall.LazyProc
	dx_CheckMusic                           *syscall.LazyProc
	dx_StopMusic                            *syscall.LazyProc
	dx_SetVolumeMusic                       *syscall.LazyProc
	dx_WaitTimer                            *syscall.LazyProc
	dx_WaitVSync                            *syscall.LazyProc
	dx_WaitKey                              *syscall.LazyProc
	dx_GetNowCount                          *syscall.LazyProc
	dx_GetRand                              *syscall.LazyProc
	dx_SRand                                *syscall.LazyProc
	dx_ChangeWindowMode                     *syscall.LazyProc
	dx_SetOutApplicationLogValidFlag        *syscall.LazyProc
)

func Init(dllFile string) {
	mod := syscall.NewLazyDLL(dllFile)

	dx_DxLib_Init = mod.NewProc("dx_DxLib_Init")
	dx_DxLib_End = mod.NewProc("dx_DxLib_End")
	dx_ProcessMessage = mod.NewProc("dx_ProcessMessage")
	dx_DrawLine = mod.NewProc("dx_DrawLine")
	dx_DrawLineAA = mod.NewProc("dx_DrawLineAA")
	dx_DrawBox = mod.NewProc("dx_DrawBox")
	dx_DrawBoxAA = mod.NewProc("dx_DrawBoxAA")
	dx_DrawCircle = mod.NewProc("dx_DrawCircle")
	dx_DrawCircleAA = mod.NewProc("dx_DrawCircleAA")
	dx_DrawOval = mod.NewProc("dx_DrawOval")
	dx_DrawOvalAA = mod.NewProc("dx_DrawOvalAA")
	dx_DrawTriangle = mod.NewProc("dx_DrawTriangle")
	dx_DrawTriangleAA = mod.NewProc("dx_DrawTriangleAA")
	dx_DrawPixel = mod.NewProc("dx_DrawPixel")
	dx_GetPixel = mod.NewProc("dx_GetPixel")
	dx_LoadGraphScreen = mod.NewProc("dx_LoadGraphScreen")
	dx_LoadGraph = mod.NewProc("dx_LoadGraph")
	dx_LoadDivGraph = mod.NewProc("dx_LoadDivGraph")
	dx_MakeGraph = mod.NewProc("dx_MakeGraph")
	dx_MakeScreen = mod.NewProc("dx_MakeScreen")
	dx_SetCreateDrawValidGraphMultiSample = mod.NewProc("dx_SetCreateDrawValidGraphMultiSample")
	dx_SetCreateGraphColorBitDepth = mod.NewProc("dx_SetCreateGraphColorBitDepth")
	dx_SetDrawValidFloatTypeGraphCreateFlag = mod.NewProc("dx_SetDrawValidFloatTypeGraphCreateFlag")
	dx_SetCreateDrawValidGraphChannelNum = mod.NewProc("dx_SetCreateDrawValidGraphChannelNum")
	dx_SetUsePremulAlphaConvertLoad = mod.NewProc("dx_SetUsePremulAlphaConvertLoad")
	dx_DrawGraph = mod.NewProc("dx_DrawGraph")
	dx_DrawTurnGraph = mod.NewProc("dx_DrawTurnGraph")
	dx_DrawExtendGraph = mod.NewProc("dx_DrawExtendGraph")
	dx_DrawRotaGraph = mod.NewProc("dx_DrawRotaGraph")
	dx_DrawRotaGraph2 = mod.NewProc("dx_DrawRotaGraph2")
	dx_DrawRotaGraph3 = mod.NewProc("dx_DrawRotaGraph3")
	dx_DrawModiGraph = mod.NewProc("dx_DrawModiGraph")
	dx_DrawRectGraph = mod.NewProc("dx_DrawRectGraph")
	dx_DerivationGraph = mod.NewProc("dx_DerivationGraph")
	dx_GetDrawScreenGraph = mod.NewProc("dx_GetDrawScreenGraph")
	dx_GetGraphiteSize = mod.NewProc("dx_GetGraphiteSize")
	dx_InitGraph = mod.NewProc("dx_InitGraph")
	dx_DeleteGraph = mod.NewProc("dx_DeleteGraph")
	dx_SetDrawMode = mod.NewProc("dx_SetDrawMode")
	dx_SetDrawBlendMode = mod.NewProc("dx_SetDrawBlendMode")
	dx_SetDrawBright = mod.NewProc("dx_SetDrawBright")
	dx_SetTransColor = mod.NewProc("dx_SetTransColor")
	dx_LoadBlendGraph = mod.NewProc("dx_LoadBlendGraph")
	dx_DrawBlendGraph = mod.NewProc("dx_DrawBlendGraph")
	dx_DrawString = mod.NewProc("dx_DrawString")
	dx_GetDrawStringWidth = mod.NewProc("dx_GetDrawStringWidth")
	dx_SetFontSize = mod.NewProc("dx_SetFontSize")
	dx_SetFontThickness = mod.NewProc("dx_SetFontThickness")
	dx_ChangeFont = mod.NewProc("dx_ChangeFont")
	dx_ChangeFontType = mod.NewProc("dx_ChangeFontType")
	dx_CreateFontToHandle = mod.NewProc("dx_CreateFontToHandle")
	dx_LoadFontDataToHandle = mod.NewProc("dx_LoadFontDataToHandle")
	dx_DeleteFontToHandle = mod.NewProc("dx_DeleteFontToHandle")
	dx_SetFontCacheUsePremulAlphaFlag = mod.NewProc("dx_SetFontCacheUsePremulAlphaFlag")
	dx_DrawStringToHandle = mod.NewProc("dx_DrawStringToHandle")
	dx_GetDrawStringWidthToHandle = mod.NewProc("dx_GetDrawStringWidthToHandle")
	dx_GetFontStateToHandle = mod.NewProc("dx_GetFontStateToHandle")
	dx_InitFontToHandle = mod.NewProc("dx_InitFontToHandle")
	dx_clsDx = mod.NewProc("dx_clsDx")
	dx_SetGraphMode = mod.NewProc("dx_SetGraphMode")
	dx_SetFullScreenResolutionMode = mod.NewProc("dx_SetFullScreenResolutionMode")
	dx_SetFullScreenScalingMode = mod.NewProc("dx_SetFullScreenScalingMode")
	dx_GetScreenState = mod.NewProc("dx_GetScreenState")
	dx_SetDrawArea = mod.NewProc("dx_SetDrawArea")
	dx_ClearDrawScreen = mod.NewProc("dx_ClearDrawScreen")
	dx_SetBackgroundColor = mod.NewProc("dx_SetBackgroundColor")
	dx_GetColor = mod.NewProc("dx_GetColor")
	dx_SetDrawScreen = mod.NewProc("dx_SetDrawScreen")
	dx_ScreenFlip = mod.NewProc("dx_ScreenFlip")
	dx_SetFullSceneAntiAliasingMode = mod.NewProc("dx_SetFullSceneAntiAliasingMode")
	dx_PlayMovie = mod.NewProc("dx_PlayMovie")
	dx_PlayMovieToGraph = mod.NewProc("dx_PlayMovieToGraph")
	dx_PauseMovieToGraph = mod.NewProc("dx_PauseMovieToGraph")
	dx_SeekMovieToGraph = mod.NewProc("dx_SeekMovieToGraph")
	dx_TellMovieToGraph = mod.NewProc("dx_TellMovieToGraph")
	dx_GetMovieStateToGraph = mod.NewProc("dx_GetMovieStateToGraph")
	dx_CreateMaskScreen = mod.NewProc("dx_CreateMaskScreen")
	dx_DeleteMaskScreen = mod.NewProc("dx_DeleteMaskScreen")
	dx_LoadMask = mod.NewProc("dx_LoadMask")
	dx_LoadDivMask = mod.NewProc("dx_LoadDivMask")
	dx_DrawMask = mod.NewProc("dx_DrawMask")
	dx_DrawFillMask = mod.NewProc("dx_DrawFillMask")
	dx_DeleteMask = mod.NewProc("dx_DeleteMask")
	dx_InitMask = mod.NewProc("dx_InitMask")
	dx_FillMaskScreen = mod.NewProc("dx_FillMaskScreen")
	dx_SetUseMaskScreenFlag = mod.NewProc("dx_SetUseMaskScreenFlag")
	dx_MakeMask = mod.NewProc("dx_MakeMask")
	dx_GetMaskSize = mod.NewProc("dx_GetMaskSize")
	dx_GetJoypadNum = mod.NewProc("dx_GetJoypadNum")
	dx_GetJoypadInputState = mod.NewProc("dx_GetJoypadInputState")
	dx_GetJoypadAnalogInput = mod.NewProc("dx_GetJoypadAnalogInput")
	dx_SetJoypadDeadZone = mod.NewProc("dx_SetJoypadDeadZone")
	dx_StartJoypadVibration = mod.NewProc("dx_StartJoypadVibration")
	dx_StopJoypadVibration = mod.NewProc("dx_StopJoypadVibration")
	dx_SetMouseDispFlag = mod.NewProc("dx_SetMouseDispFlag")
	dx_GetMousePoint = mod.NewProc("dx_GetMousePoint")
	dx_SetMousePoint = mod.NewProc("dx_SetMousePoint")
	dx_GetMouseInput = mod.NewProc("dx_GetMouseInput")
	dx_GetMouseInputLog2 = mod.NewProc("dx_GetMouseInputLog2")
	dx_GetMouseWheelRotVol = mod.NewProc("dx_GetMouseWheelRotVol")
	dx_GetTouchInputNum = mod.NewProc("dx_GetTouchInputNum")
	dx_GetTouchInput = mod.NewProc("dx_GetTouchInput")
	dx_CheckHitKeyAll = mod.NewProc("dx_CheckHitKeyAll")
	dx_CheckHitKey = mod.NewProc("dx_CheckHitKey")
	dx_GetInputChar = mod.NewProc("dx_GetInputChar")
	dx_GetInputCharWait = mod.NewProc("dx_GetInputCharWait")
	dx_ClearInputCharBuf = mod.NewProc("dx_ClearInputCharBuf")
	dx_KeyInputString = mod.NewProc("dx_KeyInputString")
	dx_KeyInputSingleCharString = mod.NewProc("dx_KeyInputSingleCharString")
	dx_KeyInputNumber = mod.NewProc("dx_KeyInputNumber")
	dx_SetKeyInputStringColor = mod.NewProc("dx_SetKeyInputStringColor")
	dx_MakeKeyInput = mod.NewProc("dx_MakeKeyInput")
	dx_DeleteKeyInput = mod.NewProc("dx_DeleteKeyInput")
	dx_InitKeyInput = mod.NewProc("dx_InitKeyInput")
	dx_SetActiveKeyInput = mod.NewProc("dx_SetActiveKeyInput")
	dx_CheckKeyInput = mod.NewProc("dx_CheckKeyInput")
	dx_DrawKeyInputString = mod.NewProc("dx_DrawKeyInputString")
	dx_DrawKeyInputModeString = mod.NewProc("dx_DrawKeyInputModeString")
	dx_SetKeyInputString = mod.NewProc("dx_SetKeyInputString")
	dx_SetKeyInputNumber = mod.NewProc("dx_SetKeyInputNumber")
	dx_GetKeyInputNumber = mod.NewProc("dx_GetKeyInputNumber")
	dx_PlaySoundFile = mod.NewProc("dx_PlaySoundFile")
	dx_CheckSoundFile = mod.NewProc("dx_CheckSoundFile")
	dx_StopSoundFile = mod.NewProc("dx_StopSoundFile")
	dx_LoadSoundMem = mod.NewProc("dx_LoadSoundMem")
	dx_PlaySoundMem = mod.NewProc("dx_PlaySoundMem")
	dx_CheckSoundMem = mod.NewProc("dx_CheckSoundMem")
	dx_StopSoundMem = mod.NewProc("dx_StopSoundMem")
	dx_DeleteSoundMem = mod.NewProc("dx_DeleteSoundMem")
	dx_InitSoundMem = mod.NewProc("dx_InitSoundMem")
	dx_ChangePanSoundMem = mod.NewProc("dx_ChangePanSoundMem")
	dx_ChangeVolumeSoundMem = mod.NewProc("dx_ChangeVolumeSoundMem")
	dx_ChangeNextPlayPanSoundMem = mod.NewProc("dx_ChangeNextPlayPanSoundMem")
	dx_ChangeNextPlayVolumeSoundMem = mod.NewProc("dx_ChangeNextPlayVolumeSoundMem")
	dx_SetFrequencySoundMem = mod.NewProc("dx_SetFrequencySoundMem")
	dx_SetLoopPosSoundMem = mod.NewProc("dx_SetLoopPosSoundMem")
	dx_SetLoopSamplePosSoundMem = mod.NewProc("dx_SetLoopSamplePosSoundMem")
	dx_SetCurrentPositionSoundMem = mod.NewProc("dx_SetCurrentPositionSoundMem")
	dx_DuplicateSoundMem = mod.NewProc("dx_DuplicateSoundMem")
	dx_SetCreateSoundPitchRate = mod.NewProc("dx_SetCreateSoundPitchRate")
	dx_SetCreateSoundTimeStretchRate = mod.NewProc("dx_SetCreateSoundTimeStretchRate")
	dx_Set3DRadiusSoundMem = mod.NewProc("dx_Set3DRadiusSoundMem")
	dx_SetNextPlay3DRadiusSoundMem = mod.NewProc("dx_SetNextPlay3DRadiusSoundMem")
	dx_Set3DPresetReverbParamSoundMem = mod.NewProc("dx_Set3DPresetReverbParamSoundMem")
	dx_Set3DPresetReverbParamSoundMemAll = mod.NewProc("dx_Set3DPresetReverbParamSoundMemAll")
	dx_SetCreate3DSoundFlag = mod.NewProc("dx_SetCreate3DSoundFlag")
	dx_SetEnableXAudioFlag = mod.NewProc("dx_SetEnableXAudioFlag")
	dx_Set3DSoundOneMetre = mod.NewProc("dx_Set3DSoundOneMetre")
	dx_PlayMusic = mod.NewProc("dx_PlayMusic")
	dx_CheckMusic = mod.NewProc("dx_CheckMusic")
	dx_StopMusic = mod.NewProc("dx_StopMusic")
	dx_SetVolumeMusic = mod.NewProc("dx_SetVolumeMusic")
	dx_WaitTimer = mod.NewProc("dx_WaitTimer")
	dx_WaitVSync = mod.NewProc("dx_WaitVSync")
	dx_WaitKey = mod.NewProc("dx_WaitKey")
	dx_GetNowCount = mod.NewProc("dx_GetNowCount")
	dx_GetRand = mod.NewProc("dx_GetRand")
	dx_SRand = mod.NewProc("dx_SRand")
	dx_ChangeWindowMode = mod.NewProc("dx_ChangeWindowMode")
	dx_SetOutApplicationLogValidFlag = mod.NewProc("dx_SetOutApplicationLogValidFlag")

}

func DxLib_Init() int {
	if dx_DxLib_Init == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DxLib_Init.Call()
	return int(res)
}

func DxLib_End() int {
	if dx_DxLib_End == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DxLib_End.Call()
	return int(res)
}

func ProcessMessage() int {
	if dx_ProcessMessage == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ProcessMessage.Call()
	return int(res)
}

func DrawLine(x1 int, y1 int, x2 int, y2 int, color uint) int {
	if dx_DrawLine == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawLine.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color))
	return int(res)
}

func DrawLineAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint) int {
	if dx_DrawLineAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawLineAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint(color))
	return int(res)
}

func DrawBox(x1 int, y1 int, x2 int, y2 int, color uint, fillFlag int) int {
	if dx_DrawBox == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBox.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color), pint(fillFlag))
	return int(res)
}

func DrawBoxAA(x1 float32, y1 float32, x2 float32, y2 float32, color uint, fillFlag int) int {
	if dx_DrawBoxAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBoxAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), puint(color), pint(fillFlag))
	return int(res)
}

func DrawCircle(x int, y int, r int, color uint, fillFlag int) int {
	if dx_DrawCircle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawCircle.Call(pint(x), pint(y), pint(r), puint(color), pint(fillFlag))
	return int(res)
}

func DrawCircleAA(x float32, y float32, r float32, posnum int, color uint, fillFlag int) int {
	if dx_DrawCircleAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawCircleAA.Call(pfloat32(x), pfloat32(y), pfloat32(r), pint(posnum), puint(color), pint(fillFlag))
	return int(res)
}

func DrawOval(x int, y int, rx int, ry int, color uint, fillFlag int) int {
	if dx_DrawOval == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawOval.Call(pint(x), pint(y), pint(rx), pint(ry), puint(color), pint(fillFlag))
	return int(res)
}

func DrawOvalAA(x float32, y float32, rx float32, ry float32, posnum int, color uint, fillFlag int) int {
	if dx_DrawOvalAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawOvalAA.Call(pfloat32(x), pfloat32(y), pfloat32(rx), pfloat32(ry), pint(posnum), puint(color), pint(fillFlag))
	return int(res)
}

func DrawTriangle(x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, color uint, fillFlag int) int {
	if dx_DrawTriangle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTriangle.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(x3), pint(y3), puint(color), pint(fillFlag))
	return int(res)
}

func DrawTriangleAA(x1 float32, y1 float32, x2 float32, y2 float32, x3 float32, y3 float32, color uint, fillFlag int) int {
	if dx_DrawTriangleAA == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTriangleAA.Call(pfloat32(x1), pfloat32(y1), pfloat32(x2), pfloat32(y2), pfloat32(x3), pfloat32(y3), puint(color), pint(fillFlag))
	return int(res)
}

func DrawPixel(x int, y int, color uint) int {
	if dx_DrawPixel == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawPixel.Call(pint(x), pint(y), puint(color))
	return int(res)
}

func GetPixel(x int, y int) uint {
	if dx_GetPixel == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetPixel.Call(pint(x), pint(y))
	return uint(res)
}

func LoadGraphScreen(x int, y int, graphName string, transFlag int) int {
	if dx_LoadGraphScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadGraphScreen.Call(pint(x), pint(y), pstring(graphName), pint(transFlag))
	return int(res)
}

func LoadGraph(fileName string) int {
	if dx_LoadGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadGraph.Call(pstring(fileName))
	return int(res)
}

func LoadDivGraph(fileName string, allnum int, xnum int, ynum int, xsize int, ysize int, handleBuf *int) int {
	if dx_LoadDivGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadDivGraph.Call(pstring(fileName), pint(allnum), pint(xnum), pint(ynum), pint(xsize), pint(ysize), ppint(handleBuf))
	return int(res)
}

func MakeGraph(sizeX int, sizeY int) int {
	if dx_MakeGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeGraph.Call(pint(sizeX), pint(sizeY))
	return int(res)
}

func MakeScreen(sizeX int, sizeY int, useAlphaChannel int) int {
	if dx_MakeScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeScreen.Call(pint(sizeX), pint(sizeY), pint(useAlphaChannel))
	return int(res)
}

func SetCreateDrawValidGraphMultiSample(samples int, quality int) int {
	if dx_SetCreateDrawValidGraphMultiSample == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateDrawValidGraphMultiSample.Call(pint(samples), pint(quality))
	return int(res)
}

func SetCreateGraphColorBitDepth(bitDepth int) int {
	if dx_SetCreateGraphColorBitDepth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateGraphColorBitDepth.Call(pint(bitDepth))
	return int(res)
}

func SetDrawValidFloatTypeGraphCreateFlag(flag int) int {
	if dx_SetDrawValidFloatTypeGraphCreateFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawValidFloatTypeGraphCreateFlag.Call(pint(flag))
	return int(res)
}

func SetCreateDrawValidGraphChannelNum(channelNum int) int {
	if dx_SetCreateDrawValidGraphChannelNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateDrawValidGraphChannelNum.Call(pint(channelNum))
	return int(res)
}

func SetUsePremulAlphaConvertLoad(useFlag int) int {
	if dx_SetUsePremulAlphaConvertLoad == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUsePremulAlphaConvertLoad.Call(pint(useFlag))
	return int(res)
}

func DrawGraph(x int, y int, grHandle int, transFlag int) int {
	if dx_DrawGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag))
	return int(res)
}

func DrawTurnGraph(x int, y int, grHandle int, transFlag int) int {
	if dx_DrawTurnGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawTurnGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag))
	return int(res)
}

func DrawExtendGraph(x1 int, y1 int, x2 int, y2 int, grHandle int, transFlag int) int {
	if dx_DrawExtendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawExtendGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(grHandle), pint(transFlag))
	return int(res)
}

func DrawRotaGraph(x int, y int, extRate float64, angle float64, grHandle int, transFlag int, turnFlag int) int {
	if dx_DrawRotaGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRotaGraph.Call(pint(x), pint(y), pfloat64(extRate), pfloat64(angle), pint(grHandle), pint(transFlag), pint(turnFlag))
	return int(res)
}

func DrawRotaGraph2(x int, y int, cx int, cy int, extRate float64, angle float64, grHandle int, transFlag int, turnFlag int) int {
	if dx_DrawRotaGraph2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRotaGraph2.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat64(extRate), pfloat64(angle), pint(grHandle), pint(transFlag), pint(turnFlag))
	return int(res)
}

func DrawRotaGraph3(x int, y int, cx int, cy int, extRateX float64, extRateY float64, angle float64, grHandle int, transFlag int, turnFlag int) int {
	if dx_DrawRotaGraph3 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRotaGraph3.Call(pint(x), pint(y), pint(cx), pint(cy), pfloat64(extRateX), pfloat64(extRateY), pfloat64(angle), pint(grHandle), pint(transFlag), pint(turnFlag))
	return int(res)
}

func DrawModiGraph(x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, x4 int, y4 int, grHandle int, transFlag int) int {
	if dx_DrawModiGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawModiGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(x3), pint(y3), pint(x4), pint(y4), pint(grHandle), pint(transFlag))
	return int(res)
}

func DrawRectGraph(destX int, destY int, srcX int, srcY int, width int, height int, graphHandle int, transFlag int, turnFlag int) int {
	if dx_DrawRectGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawRectGraph.Call(pint(destX), pint(destY), pint(srcX), pint(srcY), pint(width), pint(height), pint(graphHandle), pint(transFlag), pint(turnFlag))
	return int(res)
}

func DerivationGraph(srcX int, srcY int, width int, height int, srcGraphHandle int) int {
	if dx_DerivationGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DerivationGraph.Call(pint(srcX), pint(srcY), pint(width), pint(height), pint(srcGraphHandle))
	return int(res)
}

func GetDrawScreenGraph(x1 int, y1 int, x2 int, y2 int, grHandle int) int {
	if dx_GetDrawScreenGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetDrawScreenGraph.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(grHandle))
	return int(res)
}

func GetGraphiteSize(grHandle int, sizeXBuf *int, sizeYBuf *int) int {
	if dx_GetGraphiteSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetGraphiteSize.Call(pint(grHandle), ppint(sizeXBuf), ppint(sizeYBuf))
	return int(res)
}

func InitGraph() int {
	if dx_InitGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitGraph.Call()
	return int(res)
}

func DeleteGraph(grHandle int) int {
	if dx_DeleteGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteGraph.Call(pint(grHandle))
	return int(res)
}

func SetDrawMode(drawMode int) int {
	if dx_SetDrawMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawMode.Call(pint(drawMode))
	return int(res)
}

func SetDrawBlendMode(blendMode int, pal int) int {
	if dx_SetDrawBlendMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawBlendMode.Call(pint(blendMode), pint(pal))
	return int(res)
}

func SetDrawBright(redBright int, greenBright int, blueBright int) int {
	if dx_SetDrawBright == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawBright.Call(pint(redBright), pint(greenBright), pint(blueBright))
	return int(res)
}

func SetTransColor(red int, green int, blue int) int {
	if dx_SetTransColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetTransColor.Call(pint(red), pint(green), pint(blue))
	return int(res)
}

func LoadBlendGraph(fileName string) int {
	if dx_LoadBlendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadBlendGraph.Call(pstring(fileName))
	return int(res)
}

func DrawBlendGraph(x int, y int, grHandle int, transFlag int, blendGraph int, borderParam int, borderRange int) int {
	if dx_DrawBlendGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawBlendGraph.Call(pint(x), pint(y), pint(grHandle), pint(transFlag), pint(blendGraph), pint(borderParam), pint(borderRange))
	return int(res)
}

func DrawString(x int, y int, str string, color uint) int {
	if dx_DrawString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawString.Call(pint(x), pint(y), pstring(str), puint(color))
	return int(res)
}

func GetDrawStringWidth(str string, strLen int) int {
	if dx_GetDrawStringWidth == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetDrawStringWidth.Call(pstring(str), pint(strLen))
	return int(res)
}

func SetFontSize(fontSize int) int {
	if dx_SetFontSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontSize.Call(pint(fontSize))
	return int(res)
}

func SetFontThickness(tinckPal int) int {
	if dx_SetFontThickness == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontThickness.Call(pint(tinckPal))
	return int(res)
}

func ChangeFont(fontName string) int {
	if dx_ChangeFont == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeFont.Call(pstring(fontName))
	return int(res)
}

func ChangeFontType(fontType int) int {
	if dx_ChangeFontType == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeFontType.Call(pint(fontType))
	return int(res)
}

func CreateFontToHandle(fontName string, size int, thick int, fontType int) int {
	if dx_CreateFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateFontToHandle.Call(pstring(fontName), pint(size), pint(thick), pint(fontType))
	return int(res)
}

func LoadFontDataToHandle(fileName string, edgeSize int) int {
	if dx_LoadFontDataToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadFontDataToHandle.Call(pstring(fileName), pint(edgeSize))
	return int(res)
}

func DeleteFontToHandle(fontHandle int) int {
	if dx_DeleteFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteFontToHandle.Call(pint(fontHandle))
	return int(res)
}

func SetFontCacheUsePremulAlphaFlag(flag int) int {
	if dx_SetFontCacheUsePremulAlphaFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFontCacheUsePremulAlphaFlag.Call(pint(flag))
	return int(res)
}

func DrawStringToHandle(x int, y int, str string, color uint, fontHandle int) int {
	if dx_DrawStringToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawStringToHandle.Call(pint(x), pint(y), pstring(str), puint(color), pint(fontHandle))
	return int(res)
}

func GetDrawStringWidthToHandle(str string, strLen int, fontHandle int) int {
	if dx_GetDrawStringWidthToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetDrawStringWidthToHandle.Call(pstring(str), pint(strLen), pint(fontHandle))
	return int(res)
}

func GetFontStateToHandle(fontName string, size *int, thick *int, fontHandle int) int {
	if dx_GetFontStateToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetFontStateToHandle.Call(pstring(fontName), ppint(size), ppint(thick), pint(fontHandle))
	return int(res)
}

func InitFontToHandle() int {
	if dx_InitFontToHandle == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitFontToHandle.Call()
	return int(res)
}

func clsDx() int {
	if dx_clsDx == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_clsDx.Call()
	return int(res)
}

func SetGraphMode(sizeX int, sizeY int, colorBitNum int) int {
	if dx_SetGraphMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetGraphMode.Call(pint(sizeX), pint(sizeY), pint(colorBitNum))
	return int(res)
}

func SetFullScreenResolutionMode(resolutionMode int) int {
	if dx_SetFullScreenResolutionMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullScreenResolutionMode.Call(pint(resolutionMode))
	return int(res)
}

func SetFullScreenScalingMode(scalingMode int) int {
	if dx_SetFullScreenScalingMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullScreenScalingMode.Call(pint(scalingMode))
	return int(res)
}

func GetScreenState(sizeX *int, sizeY *int, colorBitDepth *int) int {
	if dx_GetScreenState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetScreenState.Call(ppint(sizeX), ppint(sizeY), ppint(colorBitDepth))
	return int(res)
}

func SetDrawArea(x1 int, y1 int, x2 int, y2 int) int {
	if dx_SetDrawArea == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawArea.Call(pint(x1), pint(y1), pint(x2), pint(y2))
	return int(res)
}

func ClearDrawScreen() int {
	if dx_ClearDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ClearDrawScreen.Call()
	return int(res)
}

func SetBackgroundColor(red int, green int, blue int) int {
	if dx_SetBackgroundColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetBackgroundColor.Call(pint(red), pint(green), pint(blue))
	return int(res)
}

func GetColor(red int, green int, blue int) uint {
	if dx_GetColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetColor.Call(pint(red), pint(green), pint(blue))
	return uint(res)
}

func SetDrawScreen(drawScreen int) int {
	if dx_SetDrawScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetDrawScreen.Call(pint(drawScreen))
	return int(res)
}

func ScreenFlip() int {
	if dx_ScreenFlip == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ScreenFlip.Call()
	return int(res)
}

func SetFullSceneAntiAliasingMode(samples int, quality int) int {
	if dx_SetFullSceneAntiAliasingMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFullSceneAntiAliasingMode.Call(pint(samples), pint(quality))
	return int(res)
}

func PlayMovie(fileName string, exRate int, playType int) int {
	if dx_PlayMovie == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMovie.Call(pstring(fileName), pint(exRate), pint(playType))
	return int(res)
}

func PlayMovieToGraph(graphHandle int) int {
	if dx_PlayMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMovieToGraph.Call(pint(graphHandle))
	return int(res)
}

func PauseMovieToGraph(graphHandle int) int {
	if dx_PauseMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PauseMovieToGraph.Call(pint(graphHandle))
	return int(res)
}

func SeekMovieToGraph(graphHandle int, time int) int {
	if dx_SeekMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SeekMovieToGraph.Call(pint(graphHandle), pint(time))
	return int(res)
}

func TellMovieToGraph(graphHandle int) int {
	if dx_TellMovieToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_TellMovieToGraph.Call(pint(graphHandle))
	return int(res)
}

func GetMovieStateToGraph(graphHandle int) int {
	if dx_GetMovieStateToGraph == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMovieStateToGraph.Call(pint(graphHandle))
	return int(res)
}

func CreateMaskScreen() int {
	if dx_CreateMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CreateMaskScreen.Call()
	return int(res)
}

func DeleteMaskScreen() int {
	if dx_DeleteMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteMaskScreen.Call()
	return int(res)
}

func LoadMask(fileName string) int {
	if dx_LoadMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadMask.Call(pstring(fileName))
	return int(res)
}

func LoadDivMask(fileName string, allnum int, xnum int, ynum int, xsize int, ysize int, handleBuf *int) int {
	if dx_LoadDivMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadDivMask.Call(pstring(fileName), pint(allnum), pint(xnum), pint(ynum), pint(xsize), pint(ysize), ppint(handleBuf))
	return int(res)
}

func DrawMask(x int, y int, maskHandle int, transMode int) int {
	if dx_DrawMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawMask.Call(pint(x), pint(y), pint(maskHandle), pint(transMode))
	return int(res)
}

func DrawFillMask(x1 int, y1 int, x2 int, y2 int, maskHandle int) int {
	if dx_DrawFillMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawFillMask.Call(pint(x1), pint(y1), pint(x2), pint(y2), pint(maskHandle))
	return int(res)
}

func DeleteMask(maskHandle int) int {
	if dx_DeleteMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteMask.Call(pint(maskHandle))
	return int(res)
}

func InitMask() int {
	if dx_InitMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitMask.Call()
	return int(res)
}

func FillMaskScreen(flag int) int {
	if dx_FillMaskScreen == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_FillMaskScreen.Call(pint(flag))
	return int(res)
}

func SetUseMaskScreenFlag(validFlag int) int {
	if dx_SetUseMaskScreenFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetUseMaskScreenFlag.Call(pint(validFlag))
	return int(res)
}

func MakeMask(width int, height int) int {
	if dx_MakeMask == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeMask.Call(pint(width), pint(height))
	return int(res)
}

func GetMaskSize(widthBuf *int, heightBuf *int, maskHandle int) int {
	if dx_GetMaskSize == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMaskSize.Call(ppint(widthBuf), ppint(heightBuf), pint(maskHandle))
	return int(res)
}

func GetJoypadNum() int {
	if dx_GetJoypadNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadNum.Call()
	return int(res)
}

func GetJoypadInputState(inputType int) int {
	if dx_GetJoypadInputState == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadInputState.Call(pint(inputType))
	return int(res)
}

func GetJoypadAnalogInput(xbuf *int, ybuf *int, inputType int) int {
	if dx_GetJoypadAnalogInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetJoypadAnalogInput.Call(ppint(xbuf), ppint(ybuf), pint(inputType))
	return int(res)
}

func SetJoypadDeadZone(inputType int, zone float64) int {
	if dx_SetJoypadDeadZone == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetJoypadDeadZone.Call(pint(inputType), pfloat64(zone))
	return int(res)
}

func StartJoypadVibration(inputType int, power int, time int) int {
	if dx_StartJoypadVibration == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StartJoypadVibration.Call(pint(inputType), pint(power), pint(time))
	return int(res)
}

func StopJoypadVibration(inputType int) int {
	if dx_StopJoypadVibration == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopJoypadVibration.Call(pint(inputType))
	return int(res)
}

func SetMouseDispFlag(dispFlag int) int {
	if dx_SetMouseDispFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMouseDispFlag.Call(pint(dispFlag))
	return int(res)
}

func GetMousePoint(xbuf *int, ybuf *int) int {
	if dx_GetMousePoint == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMousePoint.Call(ppint(xbuf), ppint(ybuf))
	return int(res)
}

func SetMousePoint(pointX int, pointY int) int {
	if dx_SetMousePoint == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetMousePoint.Call(pint(pointX), pint(pointY))
	return int(res)
}

func GetMouseInput() int {
	if dx_GetMouseInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseInput.Call()
	return int(res)
}

func GetMouseInputLog2(button *int, clickX *int, clickY *int, logType *int, logDelete int) int {
	if dx_GetMouseInputLog2 == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseInputLog2.Call(ppint(button), ppint(clickX), ppint(clickY), ppint(logType), pint(logDelete))
	return int(res)
}

func GetMouseWheelRotVol() int {
	if dx_GetMouseWheelRotVol == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetMouseWheelRotVol.Call()
	return int(res)
}

func GetTouchInputNum() int {
	if dx_GetTouchInputNum == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetTouchInputNum.Call()
	return int(res)
}

func GetTouchInput(inputNo int, positionX *int, positionY *int, id *int, device *int) int {
	if dx_GetTouchInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetTouchInput.Call(pint(inputNo), ppint(positionX), ppint(positionY), ppint(id), ppint(device))
	return int(res)
}

func CheckHitKeyAll(checkType int) int {
	if dx_CheckHitKeyAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHitKeyAll.Call(pint(checkType))
	return int(res)
}

func CheckHitKey(keyCode int) int {
	if dx_CheckHitKey == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckHitKey.Call(pint(keyCode))
	return int(res)
}

func GetInputChar(deleteFlag int) byte {
	if dx_GetInputChar == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetInputChar.Call(pint(deleteFlag))
	return byte(res)
}

func GetInputCharWait(deleteFlag int) byte {
	if dx_GetInputCharWait == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetInputCharWait.Call(pint(deleteFlag))
	return byte(res)
}

func ClearInputCharBuf() int {
	if dx_ClearInputCharBuf == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ClearInputCharBuf.Call()
	return int(res)
}

func KeyInputString(x int, y int, charMaxLength int, strBuffer string, cancelValidFlag int) int {
	if dx_KeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputString.Call(pint(x), pint(y), pint(charMaxLength), pstring(strBuffer), pint(cancelValidFlag))
	return int(res)
}

func KeyInputSingleCharString(x int, y int, charMaxLength int, strBuffer string, cancelValidFlag int) int {
	if dx_KeyInputSingleCharString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputSingleCharString.Call(pint(x), pint(y), pint(charMaxLength), pstring(strBuffer), pint(cancelValidFlag))
	return int(res)
}

func KeyInputNumber(x int, y int, maxNum int, minNum int, cancelValidFlag int) int {
	if dx_KeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_KeyInputNumber.Call(pint(x), pint(y), pint(maxNum), pint(minNum), pint(cancelValidFlag))
	return int(res)
}

func SetKeyInputStringColor(nmlStr int, nmlCur int, imeStrBack int, imeCur int, imeLine int, imeSelectStr int, imeModeStr int, nmlStrE int, imeSelectStrE int, imeModeStrE int, imeSelectWinE int, imeSelectWinF int, selectStrBackColor int, selectStrColor int, selectStrEdgeColor int, imeStr int, imeStrE int) int {
	if dx_SetKeyInputStringColor == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputStringColor.Call(pint(nmlStr), pint(nmlCur), pint(imeStrBack), pint(imeCur), pint(imeLine), pint(imeSelectStr), pint(imeModeStr), pint(nmlStrE), pint(imeSelectStrE), pint(imeModeStrE), pint(imeSelectWinE), pint(imeSelectWinF), pint(selectStrBackColor), pint(selectStrColor), pint(selectStrEdgeColor), pint(imeStr), pint(imeStrE))
	return int(res)
}

func MakeKeyInput(maxStrLength int, cancelValidFlag int, singleCharOnlyFlag int, numCharOnlyFlag int) int {
	if dx_MakeKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_MakeKeyInput.Call(pint(maxStrLength), pint(cancelValidFlag), pint(singleCharOnlyFlag), pint(numCharOnlyFlag))
	return int(res)
}

func DeleteKeyInput(inputHandle int) int {
	if dx_DeleteKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteKeyInput.Call(pint(inputHandle))
	return int(res)
}

func InitKeyInput() int {
	if dx_InitKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitKeyInput.Call()
	return int(res)
}

func SetActiveKeyInput(inputHandle int) int {
	if dx_SetActiveKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetActiveKeyInput.Call(pint(inputHandle))
	return int(res)
}

func CheckKeyInput(inputHandle int) int {
	if dx_CheckKeyInput == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckKeyInput.Call(pint(inputHandle))
	return int(res)
}

func DrawKeyInputString(x int, y int, inputHandle int) int {
	if dx_DrawKeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawKeyInputString.Call(pint(x), pint(y), pint(inputHandle))
	return int(res)
}

func DrawKeyInputModeString(x int, y int) int {
	if dx_DrawKeyInputModeString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DrawKeyInputModeString.Call(pint(x), pint(y))
	return int(res)
}

func SetKeyInputString(str string, inputHandle int) int {
	if dx_SetKeyInputString == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputString.Call(pstring(str), pint(inputHandle))
	return int(res)
}

func SetKeyInputNumber(number int, inputHandle int) int {
	if dx_SetKeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetKeyInputNumber.Call(pint(number), pint(inputHandle))
	return int(res)
}

func GetKeyInputNumber(inputHandle int) int {
	if dx_GetKeyInputNumber == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetKeyInputNumber.Call(pint(inputHandle))
	return int(res)
}

func PlaySoundFile(fileName string, playType int) int {
	if dx_PlaySoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlaySoundFile.Call(pstring(fileName), pint(playType))
	return int(res)
}

func CheckSoundFile() int {
	if dx_CheckSoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckSoundFile.Call()
	return int(res)
}

func StopSoundFile() int {
	if dx_StopSoundFile == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopSoundFile.Call()
	return int(res)
}

func LoadSoundMem(fileName string) int {
	if dx_LoadSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_LoadSoundMem.Call(pstring(fileName))
	return int(res)
}

func PlaySoundMem(soundHandle int, playType int, topPositionFlag int) int {
	if dx_PlaySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlaySoundMem.Call(pint(soundHandle), pint(playType), pint(topPositionFlag))
	return int(res)
}

func CheckSoundMem(soundHandle int) int {
	if dx_CheckSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckSoundMem.Call(pint(soundHandle))
	return int(res)
}

func StopSoundMem(soundHandle int) int {
	if dx_StopSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopSoundMem.Call(pint(soundHandle))
	return int(res)
}

func DeleteSoundMem(soundHandle int) int {
	if dx_DeleteSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DeleteSoundMem.Call(pint(soundHandle))
	return int(res)
}

func InitSoundMem() int {
	if dx_InitSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_InitSoundMem.Call()
	return int(res)
}

func ChangePanSoundMem(panPal int, soundHandle int) int {
	if dx_ChangePanSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangePanSoundMem.Call(pint(panPal), pint(soundHandle))
	return int(res)
}

func ChangeVolumeSoundMem(volumePan int, soundHandle int) int {
	if dx_ChangeVolumeSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeVolumeSoundMem.Call(pint(volumePan), pint(soundHandle))
	return int(res)
}

func ChangeNextPlayPanSoundMem(panPal int, soundHandle int) int {
	if dx_ChangeNextPlayPanSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeNextPlayPanSoundMem.Call(pint(panPal), pint(soundHandle))
	return int(res)
}

func ChangeNextPlayVolumeSoundMem(volumePal int, soundHandle int) int {
	if dx_ChangeNextPlayVolumeSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeNextPlayVolumeSoundMem.Call(pint(volumePal), pint(soundHandle))
	return int(res)
}

func SetFrequencySoundMem(frequencyPal int, soundHandle int) int {
	if dx_SetFrequencySoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetFrequencySoundMem.Call(pint(frequencyPal), pint(soundHandle))
	return int(res)
}

func SetLoopPosSoundMem(loopTime int, soundHandle int) int {
	if dx_SetLoopPosSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetLoopPosSoundMem.Call(pint(loopTime), pint(soundHandle))
	return int(res)
}

func SetLoopSamplePosSoundMem(loopSamplePosition int, soundHandle int) int {
	if dx_SetLoopSamplePosSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetLoopSamplePosSoundMem.Call(pint(loopSamplePosition), pint(soundHandle))
	return int(res)
}

func SetCurrentPositionSoundMem(samplePosition int, soundHandle int) int {
	if dx_SetCurrentPositionSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCurrentPositionSoundMem.Call(pint(samplePosition), pint(soundHandle))
	return int(res)
}

func DuplicateSoundMem(srcSoundHandle int) int {
	if dx_DuplicateSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_DuplicateSoundMem.Call(pint(srcSoundHandle))
	return int(res)
}

func SetCreateSoundPitchRate(cents float32) int {
	if dx_SetCreateSoundPitchRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundPitchRate.Call(pfloat32(cents))
	return int(res)
}

func SetCreateSoundTimeStretchRate(rate float32) int {
	if dx_SetCreateSoundTimeStretchRate == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreateSoundTimeStretchRate.Call(pfloat32(rate))
	return int(res)
}

func Set3DRadiusSoundMem(radius float32, soundHandle int) int {
	if dx_Set3DRadiusSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DRadiusSoundMem.Call(pfloat32(radius), pint(soundHandle))
	return int(res)
}

func SetNextPlay3DRadiusSoundMem(radius float32, soundHandle int) int {
	if dx_SetNextPlay3DRadiusSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetNextPlay3DRadiusSoundMem.Call(pfloat32(radius), pint(soundHandle))
	return int(res)
}

func Set3DPresetReverbParamSoundMem(presetNo int, soundHandle int) int {
	if dx_Set3DPresetReverbParamSoundMem == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPresetReverbParamSoundMem.Call(pint(presetNo), pint(soundHandle))
	return int(res)
}

func Set3DPresetReverbParamSoundMemAll(presetNo int, playSoundOnly int) int {
	if dx_Set3DPresetReverbParamSoundMemAll == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DPresetReverbParamSoundMemAll.Call(pint(presetNo), pint(playSoundOnly))
	return int(res)
}

func SetCreate3DSoundFlag(flag int) int {
	if dx_SetCreate3DSoundFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetCreate3DSoundFlag.Call(pint(flag))
	return int(res)
}

func SetEnableXAudioFlag(flag int) int {
	if dx_SetEnableXAudioFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetEnableXAudioFlag.Call(pint(flag))
	return int(res)
}

func Set3DSoundOneMetre(distance float32) int {
	if dx_Set3DSoundOneMetre == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_Set3DSoundOneMetre.Call(pfloat32(distance))
	return int(res)
}

func PlayMusic(fileName string, playType int) int {
	if dx_PlayMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_PlayMusic.Call(pstring(fileName), pint(playType))
	return int(res)
}

func CheckMusic() int {
	if dx_CheckMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_CheckMusic.Call()
	return int(res)
}

func StopMusic() int {
	if dx_StopMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_StopMusic.Call()
	return int(res)
}

func SetVolumeMusic(volume int) int {
	if dx_SetVolumeMusic == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetVolumeMusic.Call(pint(volume))
	return int(res)
}

func WaitTimer(waitTime int) int {
	if dx_WaitTimer == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitTimer.Call(pint(waitTime))
	return int(res)
}

func WaitVSync(syncNum int) int {
	if dx_WaitVSync == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitVSync.Call(pint(syncNum))
	return int(res)
}

func WaitKey() int {
	if dx_WaitKey == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_WaitKey.Call()
	return int(res)
}

func GetNowCount() int {
	if dx_GetNowCount == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetNowCount.Call()
	return int(res)
}

func GetRand(randMax int) int {
	if dx_GetRand == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_GetRand.Call(pint(randMax))
	return int(res)
}

func SRand(seed int) int {
	if dx_SRand == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SRand.Call(pint(seed))
	return int(res)
}

func ChangeWindowMode(flag int) int {
	if dx_ChangeWindowMode == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_ChangeWindowMode.Call(pint(flag))
	return int(res)
}

func SetOutApplicationLogValidFlag(flag int) int {
	if dx_SetOutApplicationLogValidFlag == nil {
		panic("Please call dxlib.Init() at first")
	}

	res, _, _ := dx_SetOutApplicationLogValidFlag.Call(pint(flag))
	return int(res)
}

func ppint(i *int) uintptr {
	return uintptr(unsafe.Pointer(i))
}

func pint(i int) uintptr {
	return uintptr(i)
}

func puint(ui uint) uintptr {
	return uintptr(ui)
}

func pstring(str string) uintptr {
	sjisStr, _, err := transform.String(japanese.ShiftJIS.NewEncoder(), str)
	if err != nil {
		panic(err)
	}
	pbyte, err := syscall.BytePtrFromString(sjisStr)
	if err != nil {
		panic(err)
	}
	return uintptr(unsafe.Pointer(pbyte))
}

func pfloat32(f float32) uintptr {
	return uintptr(f)
}

func pfloat64(f float64) uintptr {
	return uintptr(f)
}
