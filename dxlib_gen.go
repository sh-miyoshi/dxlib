// Code generated by 'go generate'; DO NOT EDIT.

package dxlib

import (
	"syscall"
	"unsafe"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

var (
	mod = syscall.NewLazyDLL("DxLib.dll")

	dx_DxLib_Init     = mod.NewProc("dx_DxLib_Init")
	dx_DxLib_End      = mod.NewProc("dx_DxLib_End")
	dx_ProcessMessage = mod.NewProc("dx_ProcessMessage")
	dx_DrawLine       = mod.NewProc("dx_DrawLine")
)

func DxLib_Init() int {
	res, _, err := dx_DxLib_Init.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DxLib_End() int {
	res, _, err := dx_DxLib_End.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func ProcessMessage() int {
	res, _, err := dx_ProcessMessage.Call()
	if err != nil {
		panic(err)
	}
	return int(res)
}

func DrawLine(x1 int, y1 int, x2 int, y2 int, color uint) int {
	res, _, err := dx_DrawLine.Call(pint(x1), pint(y1), pint(x2), pint(y2), puint(color))
	if err != nil {
		panic(err)
	}
	return int(res)
}

func pint(i int) uintptr {
	return uintptr(i)
}

func puint(ui uint) uintptr {
	return uintptr(ui)
}

func pstring(str string) uintptr {
	sjisStr, _, err := transform.String(japanese.ShiftJIS.NewEncoder(), str)
	if err != nil {
		panic(err)
	}
	pbyte, err := syscall.BytePtrFromString(sjisStr)
	if err != nil {
		panic(err)
	}
	return uintptr(unsafe.Pointer(pbyte))
}
